{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.2", "generated_at": "2023-01-23T18:24:56.507700Z", "invocation_id": "45d4ec2a-7b95-472d-ab7e-8ae80c0dce1e", "env": {}, "project_id": "54f2af7915b6c607c4078b85aa93f883", "user_id": "d8237597-cac6-4d80-a34e-114aca7a4e92", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.drip_data_intelligence.backfill_calendar": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.drip_data_intelligence.run_date"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "data_intelligence", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group di", "group developer", "group bots"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "backfill_calendar"], "unique_id": "model.drip_data_intelligence.backfill_calendar", "raw_code": "WITH RECURSIVE pre_calendar(n) AS (\n      SELECT 1 :: integer\n       UNION\n           ALL\n      SELECT n + 1\n        FROM pre_calendar\n       WHERE n < datediff(DAYS, '2010-jan-1', {{ run_date() }})\n  )\n     , calendar AS (\n      SELECT trunc(dateadd('days', -n, {{ run_date() }})) calendar_date\n        FROM pre_calendar\n  )\n     , calendar2 AS (\n      SELECT c1.calendar_date as_of_date\n           , c2.calendar_date events_date\n           , CASE\n                 WHEN c1.calendar_date = c2.calendar_date\n                     THEN 1\n                     ELSE 0\n          END                 day_of_ind\n           , CASE\n                 WHEN c1.calendar_date - 7 < c2.calendar_date\n                     THEN 1\n                     ELSE 0\n          END                 rolling_7\n           , CASE\n                 WHEN c1.calendar_date - 30 < c2.calendar_date\n                     THEN 1\n                     ELSE 0\n          END                 rolling_30\n        FROM calendar c1\n                 JOIN calendar c2 ON c1.calendar_date >= c2.calendar_date\n  )\nSELECT *\n  FROM calendar2", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "backfill_calendar.sql", "original_file_path": "models/backfill_calendar.sql", "name": "backfill_calendar", "alias": "backfill_calendar", "checksum": {"name": "sha256", "checksum": "c11ba8f7260e1a88e444705b5f6336830af25ffa6ccedff5d8c97beb3bdefcee"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/backfill_calendar.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group di", "group developer", "group bots"]}, "schema": "data_intelligence", "materialized": "table"}, "created_at": 1674498297.6791139, "compiled_code": "WITH RECURSIVE pre_calendar(n) AS (\n      SELECT 1 :: integer\n       UNION\n           ALL\n      SELECT n + 1\n        FROM pre_calendar\n       WHERE n < datediff(DAYS, '2010-jan-1', \n    \n\n    \n        CURRENT_DATE\n    \n)\n  )\n     , calendar AS (\n      SELECT trunc(dateadd('days', -n, \n    \n\n    \n        CURRENT_DATE\n    \n)) calendar_date\n        FROM pre_calendar\n  )\n     , calendar2 AS (\n      SELECT c1.calendar_date as_of_date\n           , c2.calendar_date events_date\n           , CASE\n                 WHEN c1.calendar_date = c2.calendar_date\n                     THEN 1\n                     ELSE 0\n          END                 day_of_ind\n           , CASE\n                 WHEN c1.calendar_date - 7 < c2.calendar_date\n                     THEN 1\n                     ELSE 0\n          END                 rolling_7\n           , CASE\n                 WHEN c1.calendar_date - 30 < c2.calendar_date\n                     THEN 1\n                     ELSE 0\n          END                 rolling_30\n        FROM calendar c1\n                 JOIN calendar c2 ON c1.calendar_date >= c2.calendar_date\n  )\nSELECT *\n  FROM calendar2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"backfill_calendar\""}, "model.drip_data_intelligence.invoice_item_allocations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.invoice_item_allocations"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "invoice_item_allocations"], "unique_id": "model.drip_data_intelligence.invoice_item_allocations", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'invoice_item_allocations') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/invoice_item_allocations.sql", "original_file_path": "models/monolith/invoice_item_allocations.sql", "name": "invoice_item_allocations", "alias": "invoice_item_allocations", "checksum": {"name": "sha256", "checksum": "8f5c4eaf94fa00c5ad42cbfbafb12d21079f57ed06eb8c1fcf5ed26946a1a998"}, "tags": [], "refs": [], "sources": [["full_table_etl", "invoice_item_allocations"]], "metrics": [], "description": "The link between invoice_items and transactions. The schema implies that there's a many to many to many relationship with transactions, in fact there's really only a many to one relationship.\n", "columns": {"invoice_item_id": {"name": "invoice_item_id", "description": "Foreign key to invoice_items via invoice_item.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "Foreign key to transactions via transaction.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount in cents paid for that invoice time. Can be used to detect when we gave a customer something with value that we didn't charge for. This occurs when this amount is 0, but invoice_item.quantity > 0\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/invoice_item_allocations.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.314045, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"invoice_item_allocations\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"invoice_item_allocations\""}, "model.drip_data_intelligence.users": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.users"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "users"], "unique_id": "model.drip_data_intelligence.users", "raw_code": "WITH name_parts AS\n(\n  -- This is janky, but we don't actually store first/last names separately in the the Monolith.\n  -- We'll duplicate the same naive splitting logic used in the Monolith.\n  -- https://github.com/DripEmail/drip/blob/6f75ecee64d0814225e4e8e3d46c6eb1377b1827/app/models/user.rb#L183-L189\n  -- \"Joshua\" -> \"Joshua\", \"\"\n  -- \"Joshua Jorenby\" -> \"Joshua\", \"Jorenby\"\n  -- \"Joshua Paul Jorenby\" -> \"Joshua\", \"Paul Jorenby\"\n  --\n  -- NOTE: all indexes are 1-based, not 0-based.\n  SELECT id\n       , CHARINDEX(' ', users.name)                                        index_of_first_space\n       , CASE WHEN index_of_first_space = 0\n           THEN LEN(users.name)\n           ELSE index_of_first_space - 1\n         END                                                               first_name_length\n       , first_name_length + 1                                             index_of_last_name\n       , SUBSTRING(users.name FROM 1 FOR first_name_length)                first_name\n       , SUBSTRING(users.name FROM index_of_last_name FOR LEN(users.name)) last_name\n  FROM {{ source('full_table_etl', 'users') }}\n)\nSELECT users.*\n     , users.id              user_id\n     , name_parts.first_name\n     , name_parts.last_name\nFROM {{ source('full_table_etl', 'users') }}\nLEFT JOIN name_parts USING (id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/users.sql", "original_file_path": "models/monolith/users.sql", "name": "users", "alias": "users", "checksum": {"name": "sha256", "checksum": "2542f1027afc2f6bc80e948247d2a73d3c86e71a564dae623328c466bcdfc509"}, "tags": [], "refs": [], "sources": [["full_table_etl", "users"]], "metrics": [], "description": "An individual person with access to one or more drip accounts", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The email associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the user. Optional", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_logged_in_at": {"name": "last_logged_in_at", "description": "When they last logged in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "login_count": {"name": "login_count", "description": "The total number of times that they have logged into Drip. Drip has a pretty long keep-alive, so you can go days (weeks?) of using Drip without having to log in\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/users.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.2793322, "compiled_code": "WITH name_parts AS\n(\n  -- This is janky, but we don't actually store first/last names separately in the the Monolith.\n  -- We'll duplicate the same naive splitting logic used in the Monolith.\n  -- https://github.com/DripEmail/drip/blob/6f75ecee64d0814225e4e8e3d46c6eb1377b1827/app/models/user.rb#L183-L189\n  -- \"Joshua\" -> \"Joshua\", \"\"\n  -- \"Joshua Jorenby\" -> \"Joshua\", \"Jorenby\"\n  -- \"Joshua Paul Jorenby\" -> \"Joshua\", \"Paul Jorenby\"\n  --\n  -- NOTE: all indexes are 1-based, not 0-based.\n  SELECT id\n       , CHARINDEX(' ', users.name)                                        index_of_first_space\n       , CASE WHEN index_of_first_space = 0\n           THEN LEN(users.name)\n           ELSE index_of_first_space - 1\n         END                                                               first_name_length\n       , first_name_length + 1                                             index_of_last_name\n       , SUBSTRING(users.name FROM 1 FOR first_name_length)                first_name\n       , SUBSTRING(users.name FROM index_of_last_name FOR LEN(users.name)) last_name\n  FROM \"dumps\".\"current\".\"users\"\n)\nSELECT users.*\n     , users.id              user_id\n     , name_parts.first_name\n     , name_parts.last_name\nFROM \"dumps\".\"current\".\"users\"\nLEFT JOIN name_parts USING (id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"users\""}, "model.drip_data_intelligence.accounts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "accounts"], "unique_id": "model.drip_data_intelligence.accounts", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'accounts') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/accounts.sql", "original_file_path": "models/monolith/accounts.sql", "name": "accounts", "alias": "accounts", "checksum": {"name": "sha256", "checksum": "f7ce770be36284d7824fa4e41fd25f6bb3b6dd468a33eebf3bda30f791f715e6"}, "tags": [], "refs": [], "sources": [["full_table_etl", "accounts"]], "metrics": [], "description": "The encapsulation of a single brand within Drip", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Foreign key to subscriptions.id, which indicates the subscription the account belongs to Note that an account can change subscriptions - this happens occasionally based on user request\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name the subscription owner gave the the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The website associated with the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "When the account was soft deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The default currency used to display purchases shown in the account", "meta": {}, "data_type": null, "quote": null, "tags": [], "details": "This doesn't apply any currency conversion - it's for display purposes only"}, "public_id": {"name": "public_id", "description": "The id used in drip urls. Within computed tables of datamart, it's often called `account_public_id`", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.2769291, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"accounts\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts\""}, "model.drip_data_intelligence.sms_credit_rollups": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.sms_credit_rollups"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "sms_credit_rollups"], "unique_id": "model.drip_data_intelligence.sms_credit_rollups", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'sms_credit_rollups') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/sms_credit_rollups.sql", "original_file_path": "models/monolith/sms_credit_rollups.sql", "name": "sms_credit_rollups", "alias": "sms_credit_rollups", "checksum": {"name": "sha256", "checksum": "8aebfdeb3168a74e1ce80f72b45aa1f4bafe054510b80042bc8ee29a896db1e2"}, "tags": [], "refs": [], "sources": [["full_table_etl", "sms_credit_rollups"]], "metrics": [], "description": "A daily snapshot of SMS activity for accounts that can send SMS. Definitions of these fields are still shifting as of February 2022, so don't lean too heavily on any fields.\n", "columns": {"account_id": {"name": "account_id", "description": "Foreign key to accounts via account.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usage_date": {"name": "usage_date", "description": "The date of the entry", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ending_balance": {"name": "ending_balance", "description": "The number of SMS credits the account had at the end of the day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "details": {"name": "details", "description": "A JSON blob of context that the SMS saw fit to include", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/sms_credit_rollups.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.3160572, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"sms_credit_rollups\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"sms_credit_rollups\""}, "model.drip_data_intelligence.automation_emails": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.automation_emails"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "automation_emails"], "unique_id": "model.drip_data_intelligence.automation_emails", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'automation_emails') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/automation_emails.sql", "original_file_path": "models/monolith/automation_emails.sql", "name": "automation_emails", "alias": "automation_emails", "checksum": {"name": "sha256", "checksum": "dda7ca8dd460cbcfe358ceb3a1d21b89d7e3da1d64bb6df051ebb854f035d4f9"}, "tags": [], "refs": [], "sources": [["full_table_etl", "automation_emails"]], "metrics": [], "description": "Emails sent by various automations. These are sent from workflows, rules, forms and bulk operations (in that order of frequency). We mainly care about workflows. Note that this is just the entity behind the design of the email. Individual sends are in the delivery_events table.\n", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Foreign key to accounts via accounts.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "public_id": {"name": "public_id", "description": "The id used in drip urls.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_id": {"name": "email_id", "description": "Foreign key to emails via emails.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automation_id": {"name": "automation_id", "description": "Foreign key to some other table (polymorphic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automation_type": {"name": "automation_type", "description": "Which table the previous key joins to. Useful to filtering just emails sent from a particular type of automation (eg all workflow emails)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/automation_emails.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.297297, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"automation_emails\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"automation_emails\""}, "model.drip_data_intelligence.invoice_items": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.invoice_items"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "invoice_items"], "unique_id": "model.drip_data_intelligence.invoice_items", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'invoice_items') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/invoice_items.sql", "original_file_path": "models/monolith/invoice_items.sql", "name": "invoice_items", "alias": "invoice_items", "checksum": {"name": "sha256", "checksum": "00258cc0eb535351fe477595a5225c68dd212cce23cf85a8f5f77ea550ce5071"}, "tags": [], "refs": [], "sources": [["full_table_etl", "invoice_items"]], "metrics": [], "description": "The individual things that we charge for on an invoice Useful for determining various types of charges\n", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Foreign key to invoices via invoices.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "The cost in cents of one thing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The number of things we gave them", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "The type of charge. Eg `monthly_service` means that we charged them for their monthly Drip subscription. `sms_reload` is sms credits.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/invoice_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.312468, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"invoice_items\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"invoice_items\""}, "model.drip_data_intelligence.purchases": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "purchases"], "unique_id": "model.drip_data_intelligence.purchases", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'purchases') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/purchases.sql", "original_file_path": "models/monolith/purchases.sql", "name": "purchases", "alias": "purchases", "checksum": {"name": "sha256", "checksum": "5835f0e869bc835b5bd0733ae95fba1731ceef548955ae516884ae1c56aeddce"}, "tags": [], "refs": [], "sources": [["full_table_etl", "purchases"]], "metrics": [], "description": "Purchases that consumers have made from our customers. Caution: While this is really valuable data (eg attributed revenue), it is also of varying quality. Doing any sort of cross account comparison is rife with challenges. As an example, I can set up a test account, and for fun record a million dollar t-shirt purchase via the API because I think it's funny. This purchases is recorded and looks like any other legitimate purchase. Also note that in some cases we import purchase history from an OMS, so its possible that some purchases may predate the account's existence on Drip\n", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Foreign key to accounts via accounts.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscriber_id": {"name": "subscriber_id", "description": "Foreign key to subscribers via subscribers.id Useful to determine number of unique purchasers, first time purchases, etc\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider": {"name": "provider", "description": "The OMS used. This may indicate the quality of the data, but I'm pretty sure it's an open text field so there's a lot of values in here.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Number of cents like currency units in this transaction. This both does not assume a currency and additionally can be set to any value the caller wants to be. This field can have suspicious values.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When this purchase record was created. Helpful for detecting backfills.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "When the purchase was made as reported by the reporter of the purchase. Occasionally there are weird values in here like purchases made in the future.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "upstream_id": {"name": "upstream_id", "description": "The id used by the OMS internally", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency that amount is in. Can be null. Generally the assumption if this is null, then the purchase is in the currency of the account. However, currency is optional, so it's up to the customer to have this make sense.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attributed_delivery_id": {"name": "attributed_delivery_id", "description": "The delivery given credit for this purchase (if any)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attributed_emailable_id": {"name": "attributed_emailable_id", "description": "The email given credit for this purchase (if any)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attributed_emailable_type": {"name": "attributed_emailable_type", "description": "The class of email attributed for this purchase", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attributed_automation_id": {"name": "attributed_automation_id", "description": "The automation (eg workflow) attributed for this purchase", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attributed_automation_type": {"name": "attributed_automation_type", "description": "The class of automation attributed for this purchase", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Where the record came from. Seems to be either `shopper_activity` or blank. I'm assuming that blanks are from shopify.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attributed_smsable_id": {"name": "attributed_smsable_id", "description": "The sms template that the purchases is attributed to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attributed_smsable_type": {"name": "attributed_smsable_type", "description": "The sms template class that the purchases is attributed to. Either AutomationTextMessage or TextMessage.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attributed_sms_delivery_id": {"name": "attributed_sms_delivery_id", "description": "The sms delivery that the purchases is attributed to", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/purchases.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.308243, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"purchases\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"purchases\""}, "model.drip_data_intelligence.invoices": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.invoices"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "invoices"], "unique_id": "model.drip_data_intelligence.invoices", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'invoices') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/invoices.sql", "original_file_path": "models/monolith/invoices.sql", "name": "invoices", "alias": "invoices", "checksum": {"name": "sha256", "checksum": "15be22c78785096e11608b3bed776c2214d16c06e6f83fa5b55ff47ce9630ce7"}, "tags": [], "refs": [], "sources": [["full_table_etl", "invoices"]], "metrics": [], "description": "An invoice that is possibly fulfilled by a transaction Note that we only started issuing invoices in 2021, so historical data is not present\n", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Foreign key to subscriptions via subscriptions.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_address": {"name": "company_address", "description": "The address we billed to. Useful for tax information", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/invoices.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.309911, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"invoices\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"invoices\""}, "model.drip_data_intelligence.delivery_events": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.drip_data_intelligence.stream_events_etl.delivery_events"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "delivery_events"], "unique_id": "model.drip_data_intelligence.delivery_events", "raw_code": "{{ config( materialized='incremental' ) }}\n{% set today_partition = '{dt.year}-{dt.month}-{dt.day}'.format(dt = modules.datetime.datetime.now()).split('-') %}\n{% set yesterday_partition = '{dt.year}-{dt.month}-{dt.day}'.format(dt = modules.datetime.datetime.now() + modules.datetime.timedelta(days=-1)).split('-') %}\n\nSELECT account_id, occurred_at, action, email_id, delivery_id, subscriber_id, emailable_type\nFROM  {{ source('stream_events_etl', 'delivery_events') }}\n{% if is_incremental() %}\n\nWHERE\n((year = '{{yesterday_partition[0]}}' AND month = '{{yesterday_partition[1]}}' AND day = '{{yesterday_partition[2]}}')\nOR (year = '{{today_partition[0]}}' AND month = '{{today_partition[1]}}' AND day = '{{today_partition[2]}}'))\nAND occurred_at > (select max(occurred_at) from {{ this }})\n\n{% endif %}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/delivery_events.sql", "original_file_path": "models/monolith/delivery_events.sql", "name": "delivery_events", "alias": "delivery_events", "checksum": {"name": "sha256", "checksum": "490d3fcd0d790476ff7ee39948013a196001cd908c06938d8dfc2beb0db0b884"}, "tags": [], "refs": [], "sources": [["stream_events_etl", "delivery_events"]], "metrics": [], "description": "The events around email deliveries. Note that there may be more than one event per email delivery. This table contains only a subset of fields from the original table, but there should seldom be any need for the other fields.\n", "columns": {"account_id": {"name": "account_id", "description": "Foreign key to accounts via account.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "When the event occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action": {"name": "action", "description": "The type of event. The most useful (and common) ones are deliver, open, click\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_id": {"name": "email_id", "description": "The email that generated this delivery", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivery_id": {"name": "delivery_id", "description": "The delivery entity associated with this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscriber_id": {"name": "subscriber_id", "description": "The subscriber associated with the delivery", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emailable_type": {"name": "emailable_type", "description": "The class of email associated with the delivery", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/delivery_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "incremental"}, "created_at": 1674498298.319246, "compiled_code": "\n\n\n\nSELECT account_id, occurred_at, action, email_id, delivery_id, subscriber_id, emailable_type\nFROM  \"dumps\".\"current\".\"delivery_events\"\n\n\nWHERE\n((year = '2023' AND month = '1' AND day = '22')\nOR (year = '2023' AND month = '1' AND day = '23'))\nAND occurred_at > (select max(occurred_at) from \"dumps\".\"dev\".\"delivery_events\")\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"delivery_events\""}, "model.drip_data_intelligence.forms": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.forms"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "forms"], "unique_id": "model.drip_data_intelligence.forms", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'forms') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/forms.sql", "original_file_path": "models/monolith/forms.sql", "name": "forms", "alias": "forms", "checksum": {"name": "sha256", "checksum": "a598337878c0fa145071b5dcf727ec2812dc406723459064415b5839c4868d94"}, "tags": [], "refs": [], "sources": [["full_table_etl", "forms"]], "metrics": [], "description": "A form that an account creates to grow their list organically I (Matthew) have little experience with this data, so my knowledge is sparse\n", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Foreign key to accounts via accounts.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the form was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The current state of the form. Is one of 'draft', 'active', 'deleted'\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confirmation_email_id": {"name": "confirmation_email_id", "description": "Foreign key to emails.id. Probably the email that gets sent on submission of the form\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Foreign key to campaigns.id I'm assuming that this facilitates people signing up for a multi-email campaign rather than just subscribing to email marketing overall. This field is optional.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/forms.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.291306, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"forms\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"forms\""}, "model.drip_data_intelligence.subscriptions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "subscriptions"], "unique_id": "model.drip_data_intelligence.subscriptions", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'subscriptions') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/subscriptions.sql", "original_file_path": "models/monolith/subscriptions.sql", "name": "subscriptions", "alias": "subscriptions", "checksum": {"name": "sha256", "checksum": "8aed5cf44451a1d28b72a76b8e6678907268415c7378597986068001289a67d1"}, "tags": [], "refs": [], "sources": [["full_table_etl", "subscriptions"]], "metrics": [], "description": "The billing entity in Drip", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "An indication of whether a user associated with the subscription has access to it. Note that 'active' doesn't mean 'paying'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The number of credits 'burned' each month by the billing job. Roughly correlates to the MRR of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_period": {"name": "billing_period", "description": "The frequency by which we roughly require them to give us cash. Note that all accounts are evaluated by billing monthly", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expires_at": {"name": "expires_at", "description": "When we plan to run the billing job next for this subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the subscription was created. Informative for when we want to understand when a subscription initiated a relationship with Drip", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key to users.id. This is the 'owner' of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_at": {"name": "cancelled_at", "description": "When the subscription was last cancelled. Note that subscriptions can cancel more than once and this does not clear if a subscription is reactivated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount": {"name": "discount", "description": "The percentage of the typical price that we take off when doing billing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_version": {"name": "billing_version", "description": "The version of rules we apply to bill the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "A name given to the billing relationship by the customer. This is optional", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_address": {"name": "company_address", "description": "It's an address. I'm not sure whether this is validated or how clean this is", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The number of credits they have left for the credit usage billing model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trust_status": {"name": "trust_status", "description": "How spammy we believe this subscription is. Determines if/how many emails they can send", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comped": {"name": "comped", "description": "Whether we try and charge this subscription at all", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/subscriptions.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.2733161, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"subscriptions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions\""}, "model.drip_data_intelligence.transactions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "transactions"], "unique_id": "model.drip_data_intelligence.transactions", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'transactions') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/transactions.sql", "original_file_path": "models/monolith/transactions.sql", "name": "transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "925b4dfb488104bd90cf7759669315d44f938e4c79097ca79b646cb418347475"}, "tags": [], "refs": [], "sources": [["full_table_etl", "transactions"]], "metrics": [], "description": "Billing entries for a subscription", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Foreign key to subscriptions via subscriptions.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "What the transaction is about. Helpful for debugging but not reliable for querying", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the transaction occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The number of cents or credit equivalents charged This field has no consistent meaning on its own. Don't use it if possible.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stripe_charge_id": {"name": "stripe_charge_id", "description": "The upstream stripe id. Useful for identifying whether stripe was used or whether another channel might have been employed.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_used": {"name": "credit_used", "description": "The number of drip credits used on this transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "The type of service provided. Only vaguely useful when an invoice isn't present\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.288362, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"transactions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"transactions\""}, "model.drip_data_intelligence.account_events": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.account_events"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "account_events"], "unique_id": "model.drip_data_intelligence.account_events", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'account_events') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/account_events.sql", "original_file_path": "models/monolith/account_events.sql", "name": "account_events", "alias": "account_events", "checksum": {"name": "sha256", "checksum": "a84f4ac1886c5798787d93b22730a658f8b2fa0c5e07f01615146dc0a788a98a"}, "tags": [], "refs": [], "sources": [["full_table_etl", "account_events"]], "metrics": [], "description": "Events emitted by the monolith on the account This data is of varying quality. Some events are backfilled, some are not. Some are supposed to be fired only once per account, yet aren't. Use these with caution.\n", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Foreign key to accounts via accounts.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Foreign key to subscriptions via subscriptions.id Note this is the subscription relationship at the time of the event, not necessarily the current subscription associated with the account\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key to users via users.id. The user that performed the action (if applicable)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action": {"name": "action", "description": "The name of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "When the event occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "properties": {"name": "properties", "description": "Additional context of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the event was created. Analogous to \"observed_at\" - helpful for detecting backfills\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/account_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.284906, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"account_events\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"account_events\""}, "model.drip_data_intelligence.broadcasts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.broadcasts"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "broadcasts"], "unique_id": "model.drip_data_intelligence.broadcasts", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'broadcasts') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/broadcasts.sql", "original_file_path": "models/monolith/broadcasts.sql", "name": "broadcasts", "alias": "broadcasts", "checksum": {"name": "sha256", "checksum": "78997d87ec1b8df132a31886357e0014608ca4b0a87b5cae0928045bed28415f"}, "tags": [], "refs": [], "sources": [["full_table_etl", "broadcasts"]], "metrics": [], "description": "Single email campaigns. Not to be conflated with campaigns, which are multiple email campaigns. We changed the name of this feature for marketing reasons, but it's still named this in the codebase #mentalload. Note that this is just the entity behind the design of the email. Individual sends are in the delivery_events table.\n", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Foreign key to accounts via accounts.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_id": {"name": "email_id", "description": "Foreign key to emails via emails.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User set name of the workflow", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current state of the broadcast.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "send_at": {"name": "send_at", "description": "When the broadcast is scheduled to send", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria": {"name": "criteria", "description": "A filter for who the broadcast is intended to be sent to. Useful for identifying segmented vs whole list broadcasts\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_purpose": {"name": "primary_purpose", "description": "What the email is meant to be used for. Useful because transactional emails can be sent to people who are unsubscribed from marketing emails.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/broadcasts.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.301088, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"broadcasts\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"broadcasts\""}, "model.drip_data_intelligence.purchases_corrected": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.alpha_not_owned_by_dbt.historical_currency_conversion", "model.drip_data_intelligence.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "purchases_corrected"], "unique_id": "model.drip_data_intelligence.purchases_corrected", "raw_code": "WITH purchases_currency_codes_converted AS (\n      SELECT id\n           , account_id\n           , subscriber_id\n           , provider\n           , order_id\n           , CASE WHEN currency_code = 'IRR' THEN amount / 100 ELSE amount END AS amount\n           , permalink\n           , created_at\n           , updated_at\n           , public_id\n           , occurred_at\n           , upstream_id\n           , identifier\n           , financial_state\n           , fulfillment_state\n           , tax\n           , fees\n           , discount\n           , closed_at\n           , billing_address_id\n           , shipping_address_id\n           , upstream_updated_at\n           , CASE\n            WHEN currency_code = '\u20ab' THEN 'VIE'\n            WHEN currency_code = 'DKR' THEN 'DKK'\n            WHEN currency_code = 'USD,USD' THEN 'USD'\n            WHEN currency_code = 'IRT' THEN 'IRR'\n            WHEN currency_code = 'USD,USD,USD' THEN 'USD'\n            WHEN currency_code = 'CA' THEN 'USD'\n            WHEN currency_code = 'AL' THEN 'USD'\n            WHEN currency_code = 'US$' THEN 'USD'\n            WHEN currency_code = 'CO' THEN 'USD'\n            WHEN currency_code = 'MS' THEN 'USD'\n            WHEN currency_code = 'IE-EUR' THEN 'EUR'\n            WHEN currency_code = 'USD,USD,USD,USD' THEN 'USD'\n            WHEN currency_code = 'OR' THEN 'USD'\n            WHEN currency_code = 'WI' THEN 'USD'\n            WHEN currency_code = 'NE' THEN 'USD'\n            WHEN currency_code = 'ID' THEN 'USD'\n            WHEN currency_code = 'OK' THEN 'USD'\n            WHEN currency_code = 'LA' THEN 'USD'\n            WHEN currency_code = 'UT' THEN 'USD'\n            WHEN currency_code = 'ME' THEN 'USD'\n            WHEN currency_code = 'KS' THEN 'USD'\n            WHEN currency_code = 'IN' THEN 'USD'\n            WHEN currency_code = 'KY' THEN 'USD'\n            WHEN currency_code = 'AK' THEN 'USD'\n            WHEN currency_code = 'OH' THEN 'USD'\n            WHEN currency_code = 'CT' THEN 'USD'\n            WHEN currency_code = 'VT' THEN 'USD'\n            WHEN currency_code = 'IA' THEN 'USD'\n            WHEN currency_code = 'WA' THEN 'USD'\n            WHEN currency_code = 'MI' THEN 'USD'\n            WHEN currency_code = 'MD' THEN 'USD'\n            WHEN currency_code = 'TN' THEN 'USD'\n            WHEN currency_code = 'ND' THEN 'USD'\n            WHEN currency_code = 'AR' THEN 'USD'\n            WHEN currency_code = '\u00ceGBP' THEN 'GBP'\n            WHEN currency_code = 'SKR' THEN 'SEK'\n            WHEN currency_code = 'USD,USD,USD,USD,USD' THEN 'USD'\n            ELSE UPPER(currency_code)\n            END AS currency_code\n            , shipping\n            , canceled_at\n            , attributed_delivery_id\n            , attributed_emailable_id\n            , attributed_emailable_type\n            , attributed_automation_id\n            , attributed_automation_type\n            , attributed_email_id\n            , source\n            , attributed_smsable_id\n            , attributed_smsable_type\n            , attributed_sms_delivery_id\n        FROM {{ ref('purchases') }}\n  )\nSELECT purchases_currency_codes_converted.*\n     , nvl(CASE\n           WHEN currency_code != 'USD'\n               THEN amount::real / currency_value_to_usd\n               ELSE amount END / 100 ,0)   AS amount_usd\n     , nvl(CASE\n           WHEN currency_code != 'USD'\n               THEN (discount::real / currency_value_to_usd)\n               ELSE discount END / 100 ,0) AS discount_usd\n     , nvl(CASE\n           WHEN currency_code != 'USD'\n               THEN (shipping::real / currency_value_to_usd)\n               ELSE shipping END / 100 ,0) AS shipping_usd\n     , nvl(CASE\n           WHEN currency_code != 'USD'\n               THEN (tax::real / currency_value_to_usd)\n               ELSE tax END / 100 ,0)      AS tax_usd\n     , amount_usd - shipping_usd - tax_usd AS revenue_amount_usd\n  FROM purchases_currency_codes_converted\n           LEFT JOIN {{ source('alpha_not_owned_by_dbt', 'historical_currency_conversion')}}\n                     ON currency_code = purchase_currency\n                         AND historical_currency_conversion.occurred_at\n                            = date_trunc('d', purchases_currency_codes_converted.occurred_at)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/purchases_corrected.sql", "original_file_path": "models/monolith/purchases_corrected.sql", "name": "purchases_corrected", "alias": "purchases_corrected", "checksum": {"name": "sha256", "checksum": "9fcf23d47a67b21c14d70ebd9219f11ea267f15807a4a50f44a1d5c0c942e299"}, "tags": [], "refs": [["purchases"]], "sources": [["alpha_not_owned_by_dbt", "historical_currency_conversion"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/purchases_corrected.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498297.746208, "compiled_code": "WITH purchases_currency_codes_converted AS (\n      SELECT id\n           , account_id\n           , subscriber_id\n           , provider\n           , order_id\n           , CASE WHEN currency_code = 'IRR' THEN amount / 100 ELSE amount END AS amount\n           , permalink\n           , created_at\n           , updated_at\n           , public_id\n           , occurred_at\n           , upstream_id\n           , identifier\n           , financial_state\n           , fulfillment_state\n           , tax\n           , fees\n           , discount\n           , closed_at\n           , billing_address_id\n           , shipping_address_id\n           , upstream_updated_at\n           , CASE\n            WHEN currency_code = '\u20ab' THEN 'VIE'\n            WHEN currency_code = 'DKR' THEN 'DKK'\n            WHEN currency_code = 'USD,USD' THEN 'USD'\n            WHEN currency_code = 'IRT' THEN 'IRR'\n            WHEN currency_code = 'USD,USD,USD' THEN 'USD'\n            WHEN currency_code = 'CA' THEN 'USD'\n            WHEN currency_code = 'AL' THEN 'USD'\n            WHEN currency_code = 'US$' THEN 'USD'\n            WHEN currency_code = 'CO' THEN 'USD'\n            WHEN currency_code = 'MS' THEN 'USD'\n            WHEN currency_code = 'IE-EUR' THEN 'EUR'\n            WHEN currency_code = 'USD,USD,USD,USD' THEN 'USD'\n            WHEN currency_code = 'OR' THEN 'USD'\n            WHEN currency_code = 'WI' THEN 'USD'\n            WHEN currency_code = 'NE' THEN 'USD'\n            WHEN currency_code = 'ID' THEN 'USD'\n            WHEN currency_code = 'OK' THEN 'USD'\n            WHEN currency_code = 'LA' THEN 'USD'\n            WHEN currency_code = 'UT' THEN 'USD'\n            WHEN currency_code = 'ME' THEN 'USD'\n            WHEN currency_code = 'KS' THEN 'USD'\n            WHEN currency_code = 'IN' THEN 'USD'\n            WHEN currency_code = 'KY' THEN 'USD'\n            WHEN currency_code = 'AK' THEN 'USD'\n            WHEN currency_code = 'OH' THEN 'USD'\n            WHEN currency_code = 'CT' THEN 'USD'\n            WHEN currency_code = 'VT' THEN 'USD'\n            WHEN currency_code = 'IA' THEN 'USD'\n            WHEN currency_code = 'WA' THEN 'USD'\n            WHEN currency_code = 'MI' THEN 'USD'\n            WHEN currency_code = 'MD' THEN 'USD'\n            WHEN currency_code = 'TN' THEN 'USD'\n            WHEN currency_code = 'ND' THEN 'USD'\n            WHEN currency_code = 'AR' THEN 'USD'\n            WHEN currency_code = '\u00ceGBP' THEN 'GBP'\n            WHEN currency_code = 'SKR' THEN 'SEK'\n            WHEN currency_code = 'USD,USD,USD,USD,USD' THEN 'USD'\n            ELSE UPPER(currency_code)\n            END AS currency_code\n            , shipping\n            , canceled_at\n            , attributed_delivery_id\n            , attributed_emailable_id\n            , attributed_emailable_type\n            , attributed_automation_id\n            , attributed_automation_type\n            , attributed_email_id\n            , source\n            , attributed_smsable_id\n            , attributed_smsable_type\n            , attributed_sms_delivery_id\n        FROM \"dumps\".\"dev\".\"purchases\"\n  )\nSELECT purchases_currency_codes_converted.*\n     , nvl(CASE\n           WHEN currency_code != 'USD'\n               THEN amount::real / currency_value_to_usd\n               ELSE amount END / 100 ,0)   AS amount_usd\n     , nvl(CASE\n           WHEN currency_code != 'USD'\n               THEN (discount::real / currency_value_to_usd)\n               ELSE discount END / 100 ,0) AS discount_usd\n     , nvl(CASE\n           WHEN currency_code != 'USD'\n               THEN (shipping::real / currency_value_to_usd)\n               ELSE shipping END / 100 ,0) AS shipping_usd\n     , nvl(CASE\n           WHEN currency_code != 'USD'\n               THEN (tax::real / currency_value_to_usd)\n               ELSE tax END / 100 ,0)      AS tax_usd\n     , amount_usd - shipping_usd - tax_usd AS revenue_amount_usd\n  FROM purchases_currency_codes_converted\n           LEFT JOIN \"dumps\".\"alpha\".\"historical_currency_conversion\"\n                     ON currency_code = purchase_currency\n                         AND historical_currency_conversion.occurred_at\n                            = date_trunc('d', purchases_currency_codes_converted.occurred_at)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"purchases_corrected\""}, "model.drip_data_intelligence.workflows": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.workflows"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "workflows"], "unique_id": "model.drip_data_intelligence.workflows", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'workflows') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/workflows.sql", "original_file_path": "models/monolith/workflows.sql", "name": "workflows", "alias": "workflows", "checksum": {"name": "sha256", "checksum": "3bd99f1330063e6eecbb21f12683b6b5dcaee5cee76af11775a878d07df91900"}, "tags": [], "refs": [], "sources": [["full_table_etl", "workflows"]], "metrics": [], "description": "Automation workflows created in the workflow builder", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Foreign key to accounts via accounts.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "public_id": {"name": "public_id", "description": "The id used in drip urls.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current state of the workflow. One of draft, active, archived, paused", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the workflow was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User set name of the workflow", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "A json blob representing the contents of the workflow. Useful if you're trying to identify all workflows that do a certain thing\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/workflows.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.294427, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"workflows\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"workflows\""}, "model.drip_data_intelligence.memberships": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.memberships"]}, "config": {"enabled": true, "alias": null, "schema": "monolith", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "memberships"], "unique_id": "model.drip_data_intelligence.memberships", "raw_code": "SELECT * FROM {{ source('full_table_etl', 'memberships') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "monolith/memberships.sql", "original_file_path": "models/monolith/memberships.sql", "name": "memberships", "alias": "memberships", "checksum": {"name": "sha256", "checksum": "7722243e8bfe30806497b03d74242e50e14b0f0a804f2b6c10532b51fce0b0ec"}, "tags": [], "refs": [], "sources": [["full_table_etl", "memberships"]], "metrics": [], "description": "The link between a user and an account and the nature of that relationship This is a many to many table, which means that a user can have more than one account and an account can have many users\n", "columns": {"id": {"name": "id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key to users via user.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Foreign key to accounts via account.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "The type of access that the user has on the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/monolith/monolith.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/memberships.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "monolith", "materialized": "table"}, "created_at": 1674498298.2812579, "compiled_code": "SELECT * FROM \"dumps\".\"current\".\"memberships\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"memberships\""}, "model.drip_data_intelligence.segment_subscription_properties": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.drip_data_intelligence.run_date"], "nodes": ["model.drip_data_intelligence.segment_filtered_users_recently_not_churned", "model.drip_data_intelligence.accounts_with_first_email_sent", "model.drip_data_intelligence.accounts_with_first_sms_sent", "model.drip_data_intelligence.accounts_with_legacy_form_activated_events", "model.drip_data_intelligence.accounts_with_oms_connected_provider", "model.drip_data_intelligence.accounts_with_oms_indicated_provider", "model.drip_data_intelligence.accounts_with_first_person_added", "model.drip_data_intelligence.accounts_with_api_purchases", "model.drip_data_intelligence.accounts_with_has_ever_connected_oms", "model.drip_data_intelligence.accounts_with_installed_snippet_action", "model.drip_data_intelligence.subscriptions_with_trial_start_at", "model.drip_data_intelligence.subscriptions_with_trial_end_date", "model.drip_data_intelligence.subscriptions_with_trust_status", "model.drip_data_intelligence.accounts_with_workflow_enabled", "model.drip_data_intelligence.num_accounts_connected_to_subscription", "model.drip_data_intelligence.subscriptions_with_last_payments", "model.drip_data_intelligence.subscriptions_with_activation_dates", "model.drip_data_intelligence.subscriptions_with_trial_weeks", "model.drip_data_intelligence.accounts_with_first_registration_date", "model.drip_data_intelligence.accounts_with_email_campaigns_sent", "model.drip_data_intelligence.accounts_with_sms_campaigns_sent", "model.drip_data_intelligence.subscriptions_with_pricing_amounts", "model.drip_data_intelligence.subscriptions_with_current_mrr", "model.drip_data_intelligence.subscriptions_with_financial_statuses", "model.drip_data_intelligence.subscriptions_with_list_size", "model.drip_data_intelligence.subscriptions_with_company_information", "model.drip_data_intelligence.subscriptions_with_active_workflows", "model.drip_data_intelligence.subscriptions_with_sku_count", "model.drip_data_intelligence.subscriptions_with_success_managers", "model.drip_data_intelligence.subscriptions_with_user_counts", "model.drip_data_intelligence.subscriptions_with_sms_subscribers_count", "model.drip_data_intelligence.subscriptions_with_industries", "model.drip_data_intelligence.subscriptions_with_churn_dates", "model.drip_data_intelligence.subscriptions_with_store_revenue_attributes", "model.drip_data_intelligence.subscriptions_with_api_enablement", "model.drip_data_intelligence.subscriptions_with_first_payment_value_mrr", "model.drip_data_intelligence.store_revenue_stats", "model.drip_data_intelligence.onsite_campaign_totals"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "segment_subscription_properties"], "unique_id": "model.drip_data_intelligence.segment_subscription_properties", "raw_code": "SELECT\n    DISTINCT segment_filtered_users_recently_not_churned.drip_account_id,\n    segment_filtered_users_recently_not_churned.drip_user_id,\n    segment_filtered_users_recently_not_churned.drip_public_account_id,\n    segment_filtered_users_recently_not_churned.drip_subscription_id,\n    segment_filtered_users_recently_not_churned.email,\n    segment_filtered_users_recently_not_churned.drip_subscription_token,\n    CASE\n        WHEN accounts_with_first_email_sent.action IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS drip_sent_first_email,\n    CASE\n        WHEN accounts_with_first_sms_sent.drip_sent_first_sms IS NOT NULL THEN accounts_with_first_sms_sent.drip_sent_first_sms\n        ELSE FALSE\n    END AS drip_sent_first_sms,\n    accounts_with_legacy_form_activated_events.has_legacy_form_activated_event AS drip_form_enabled,\n    CASE\n        WHEN accounts_with_oms_connected_provider.drip_oms_connected_provider IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END as drip_is_oms_connected,\n    accounts_with_oms_connected_provider.drip_oms_connected_provider,\n    CASE\n        WHEN accounts_with_oms_indicated_provider.drip_oms_indicated_provider IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END as drip_is_oms_indicated,\n    accounts_with_oms_indicated_provider.drip_oms_indicated_provider,\n    CASE\n        WHEN accounts_with_first_person_added.action IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS drip_people_added,\n    CASE\n        WHEN accounts_with_installed_snippet_action.action IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS drip_added_javascript,\n    subscriptions_with_trial_start_at.drip_trial_start_date,\n    subscriptions_with_trial_end_date.drip_trial_end_date,\n    subscriptions_with_trust_status.drip_trust_status,\n    CASE\n        WHEN accounts_with_workflow_enabled.action IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END as drip_workflow_enabled,\n    num_accounts_connected_to_subscription.drip_accounts_connected_subscription,\n    subscriptions_with_last_payments.drip_last_payment_date,\n    subscriptions_with_activation_dates.drip_activation_date,\n    subscriptions_with_activation_dates.drip_activation_date_cohort_week,\n    subscriptions_with_trial_weeks.drip_trial_cohort_week,\n    segment_filtered_users_recently_not_churned.subscription_status,\n    accounts_with_first_registration_date.drip_registration_date,\n    accounts_with_email_campaigns_sent.drip_email_campaigns_sent_all_time,\n    accounts_with_email_campaigns_sent.drip_email_campaigns_sent_last_30_days,\n    accounts_with_email_campaigns_sent.drip_email_campaigns_sent_last_7_days,\n    {{ run_date() }} AS drip_cron_last_updated,\n    accounts_with_sms_campaigns_sent.drip_sms_campaigns_sent_all_time,\n    accounts_with_sms_campaigns_sent.drip_sms_campaigns_sent_last_30_days,\n    accounts_with_sms_campaigns_sent.drip_sms_campaigns_sent_last_7_days,\n    accounts_with_api_purchases.drip_has_api_purchase,\n    accounts_with_has_ever_connected_oms.drip_has_ever_connected_oms,\n    subscriptions_with_pricing_amounts.drip_pricing_amount,\n    subscriptions_with_current_mrr.drip_current_mrr,\n    subscriptions_with_financial_statuses.paid_in_the_last_30_days,\n    subscriptions_with_financial_statuses.last_payment_amount_greater_than_0,\n    subscriptions_with_list_size.drip_email_list_size,\n    subscriptions_with_company_information.firstname,\n    subscriptions_with_company_information.lastname,\n    subscriptions_with_company_information.company,\n    subscriptions_with_company_information.website,\n    subscriptions_with_active_workflows.drip_active_workflows,\n    subscriptions_with_sku_count.drip_sku_count,\n    subscriptions_with_success_managers.drip_success_manager,\n    subscriptions_with_success_managers.drip_success_manager_name,\n    subscriptions_with_user_counts.drip_users_count,\n    subscriptions_with_sms_subscribers_count.drip_sms_subscriber_count,\n    subscriptions_with_industries.drip_manually_enriched_industry,\n    subscriptions_with_industries.drip_manually_enriched_subindustry,\n    subscriptions_with_churn_dates.drip_churn_date,\n    subscriptions_with_churn_dates.drip_pending_cancellation_date,\n    subscriptions_with_churn_dates.drip_delinquent_date,\n    subscriptions_with_store_revenue_attributes.drip_revenue_rate_attributed_sms,\n    subscriptions_with_store_revenue_attributes.drip_revenue_rate_attributed_email,\n    subscriptions_with_store_revenue_attributes.drip_total_store_revenue,\n    subscriptions_with_store_revenue_attributes.drip_has_attributed_revenue,\n    subscriptions_with_store_revenue_attributes.drip_has_revenue,\n    subscriptions_with_api_enablement.drip_has_api_enabled,\n    subscriptions_with_first_payment_value_mrr.drip_first_payment_value_mrr,\n    ROUND(store_revenue_stats.revenue_subscription_ytd_usd) AS drip_revenue_subscription_ytd_usd,\n    ROUND(store_revenue_stats.revenue_subscription_monthly_average_usd) AS drip_revenue_subscription_monthly_average_usd,\n    onsite_campaign_totals.onsite_campaigns_active_current,\n    onsite_campaign_totals.onsite_campaigns_total,\n    ('https://www.getdrip.com/faucet/users/' || segment_filtered_users_recently_not_churned.drip_user_id) user_faucet_link,\n    ('https://www.getdrip.com/faucet/accounts/' || segment_filtered_users_recently_not_churned.drip_account_id) account_faucet_link,\n    ('https://www.getdrip.com/faucet/subscriptions/' || segment_filtered_users_recently_not_churned.drip_subscription_id) subscription_faucet_link\nFROM {{ ref(\"segment_filtered_users_recently_not_churned\") }}\n    LEFT JOIN {{ ref(\"accounts_with_first_email_sent\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"accounts_with_first_sms_sent\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"accounts_with_legacy_form_activated_events\") }} ON segment_filtered_users_recently_not_churned.drip_account_id = accounts_with_legacy_form_activated_events.account_id\n    LEFT JOIN {{ ref(\"accounts_with_oms_connected_provider\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"accounts_with_oms_indicated_provider\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"accounts_with_first_person_added\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"accounts_with_api_purchases\")}} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"accounts_with_has_ever_connected_oms\")}} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"accounts_with_installed_snippet_action\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_trial_start_at\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_trial_end_date\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_trust_status\") }} USING (drip_user_id)\n    LEFT JOIN {{ ref(\"accounts_with_workflow_enabled\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"num_accounts_connected_to_subscription\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_last_payments\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_activation_dates\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_trial_weeks\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"accounts_with_first_registration_date\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"accounts_with_email_campaigns_sent\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"accounts_with_sms_campaigns_sent\") }} USING (drip_account_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_pricing_amounts\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_current_mrr\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_financial_statuses\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_list_size\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_company_information\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_active_workflows\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_sku_count\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_success_managers\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_user_counts\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_sms_subscribers_count\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_industries\") }} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_churn_dates\")}} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_store_revenue_attributes\")}} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_api_enablement\")}} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"subscriptions_with_first_payment_value_mrr\")}} USING (drip_subscription_id)\n    LEFT JOIN {{ ref(\"store_revenue_stats\")}} ON drip_subscription_id = store_revenue_stats.subscription_id\n    LEFT JOIN {{ ref(\"onsite_campaign_totals\")}} ON drip_account_id = onsite_campaign_totals.account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/segment_subscription_properties.sql", "original_file_path": "models/segment/segment_subscription_properties.sql", "name": "segment_subscription_properties", "alias": "segment_subscription_properties", "checksum": {"name": "sha256", "checksum": "0934673079b2bed692ab5645f36baa120f735de682a5c5a850502a69314cb816"}, "tags": [], "refs": [["segment_filtered_users_recently_not_churned"], ["accounts_with_first_email_sent"], ["accounts_with_first_sms_sent"], ["accounts_with_legacy_form_activated_events"], ["accounts_with_oms_connected_provider"], ["accounts_with_oms_indicated_provider"], ["accounts_with_first_person_added"], ["accounts_with_api_purchases"], ["accounts_with_has_ever_connected_oms"], ["accounts_with_installed_snippet_action"], ["subscriptions_with_trial_start_at"], ["subscriptions_with_trial_end_date"], ["subscriptions_with_trust_status"], ["accounts_with_workflow_enabled"], ["num_accounts_connected_to_subscription"], ["subscriptions_with_last_payments"], ["subscriptions_with_activation_dates"], ["subscriptions_with_trial_weeks"], ["accounts_with_first_registration_date"], ["accounts_with_email_campaigns_sent"], ["accounts_with_sms_campaigns_sent"], ["subscriptions_with_pricing_amounts"], ["subscriptions_with_current_mrr"], ["subscriptions_with_financial_statuses"], ["subscriptions_with_list_size"], ["subscriptions_with_company_information"], ["subscriptions_with_active_workflows"], ["subscriptions_with_sku_count"], ["subscriptions_with_success_managers"], ["subscriptions_with_user_counts"], ["subscriptions_with_sms_subscribers_count"], ["subscriptions_with_industries"], ["subscriptions_with_churn_dates"], ["subscriptions_with_store_revenue_attributes"], ["subscriptions_with_api_enablement"], ["subscriptions_with_first_payment_value_mrr"], ["store_revenue_stats"], ["onsite_campaign_totals"]], "sources": [], "metrics": [], "description": "*Deprecated* Properties to send to old Segment for Hubpost\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/segment/segment.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment_subscription_properties.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "segment", "bind": false}, "created_at": 1674498298.377047, "compiled_code": "SELECT\n    DISTINCT segment_filtered_users_recently_not_churned.drip_account_id,\n    segment_filtered_users_recently_not_churned.drip_user_id,\n    segment_filtered_users_recently_not_churned.drip_public_account_id,\n    segment_filtered_users_recently_not_churned.drip_subscription_id,\n    segment_filtered_users_recently_not_churned.email,\n    segment_filtered_users_recently_not_churned.drip_subscription_token,\n    CASE\n        WHEN accounts_with_first_email_sent.action IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS drip_sent_first_email,\n    CASE\n        WHEN accounts_with_first_sms_sent.drip_sent_first_sms IS NOT NULL THEN accounts_with_first_sms_sent.drip_sent_first_sms\n        ELSE FALSE\n    END AS drip_sent_first_sms,\n    accounts_with_legacy_form_activated_events.has_legacy_form_activated_event AS drip_form_enabled,\n    CASE\n        WHEN accounts_with_oms_connected_provider.drip_oms_connected_provider IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END as drip_is_oms_connected,\n    accounts_with_oms_connected_provider.drip_oms_connected_provider,\n    CASE\n        WHEN accounts_with_oms_indicated_provider.drip_oms_indicated_provider IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END as drip_is_oms_indicated,\n    accounts_with_oms_indicated_provider.drip_oms_indicated_provider,\n    CASE\n        WHEN accounts_with_first_person_added.action IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS drip_people_added,\n    CASE\n        WHEN accounts_with_installed_snippet_action.action IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS drip_added_javascript,\n    subscriptions_with_trial_start_at.drip_trial_start_date,\n    subscriptions_with_trial_end_date.drip_trial_end_date,\n    subscriptions_with_trust_status.drip_trust_status,\n    CASE\n        WHEN accounts_with_workflow_enabled.action IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END as drip_workflow_enabled,\n    num_accounts_connected_to_subscription.drip_accounts_connected_subscription,\n    subscriptions_with_last_payments.drip_last_payment_date,\n    subscriptions_with_activation_dates.drip_activation_date,\n    subscriptions_with_activation_dates.drip_activation_date_cohort_week,\n    subscriptions_with_trial_weeks.drip_trial_cohort_week,\n    segment_filtered_users_recently_not_churned.subscription_status,\n    accounts_with_first_registration_date.drip_registration_date,\n    accounts_with_email_campaigns_sent.drip_email_campaigns_sent_all_time,\n    accounts_with_email_campaigns_sent.drip_email_campaigns_sent_last_30_days,\n    accounts_with_email_campaigns_sent.drip_email_campaigns_sent_last_7_days,\n    \n    \n\n    \n        CURRENT_DATE\n    \n AS drip_cron_last_updated,\n    accounts_with_sms_campaigns_sent.drip_sms_campaigns_sent_all_time,\n    accounts_with_sms_campaigns_sent.drip_sms_campaigns_sent_last_30_days,\n    accounts_with_sms_campaigns_sent.drip_sms_campaigns_sent_last_7_days,\n    accounts_with_api_purchases.drip_has_api_purchase,\n    accounts_with_has_ever_connected_oms.drip_has_ever_connected_oms,\n    subscriptions_with_pricing_amounts.drip_pricing_amount,\n    subscriptions_with_current_mrr.drip_current_mrr,\n    subscriptions_with_financial_statuses.paid_in_the_last_30_days,\n    subscriptions_with_financial_statuses.last_payment_amount_greater_than_0,\n    subscriptions_with_list_size.drip_email_list_size,\n    subscriptions_with_company_information.firstname,\n    subscriptions_with_company_information.lastname,\n    subscriptions_with_company_information.company,\n    subscriptions_with_company_information.website,\n    subscriptions_with_active_workflows.drip_active_workflows,\n    subscriptions_with_sku_count.drip_sku_count,\n    subscriptions_with_success_managers.drip_success_manager,\n    subscriptions_with_success_managers.drip_success_manager_name,\n    subscriptions_with_user_counts.drip_users_count,\n    subscriptions_with_sms_subscribers_count.drip_sms_subscriber_count,\n    subscriptions_with_industries.drip_manually_enriched_industry,\n    subscriptions_with_industries.drip_manually_enriched_subindustry,\n    subscriptions_with_churn_dates.drip_churn_date,\n    subscriptions_with_churn_dates.drip_pending_cancellation_date,\n    subscriptions_with_churn_dates.drip_delinquent_date,\n    subscriptions_with_store_revenue_attributes.drip_revenue_rate_attributed_sms,\n    subscriptions_with_store_revenue_attributes.drip_revenue_rate_attributed_email,\n    subscriptions_with_store_revenue_attributes.drip_total_store_revenue,\n    subscriptions_with_store_revenue_attributes.drip_has_attributed_revenue,\n    subscriptions_with_store_revenue_attributes.drip_has_revenue,\n    subscriptions_with_api_enablement.drip_has_api_enabled,\n    subscriptions_with_first_payment_value_mrr.drip_first_payment_value_mrr,\n    ROUND(store_revenue_stats.revenue_subscription_ytd_usd) AS drip_revenue_subscription_ytd_usd,\n    ROUND(store_revenue_stats.revenue_subscription_monthly_average_usd) AS drip_revenue_subscription_monthly_average_usd,\n    onsite_campaign_totals.onsite_campaigns_active_current,\n    onsite_campaign_totals.onsite_campaigns_total,\n    ('https://www.getdrip.com/faucet/users/' || segment_filtered_users_recently_not_churned.drip_user_id) user_faucet_link,\n    ('https://www.getdrip.com/faucet/accounts/' || segment_filtered_users_recently_not_churned.drip_account_id) account_faucet_link,\n    ('https://www.getdrip.com/faucet/subscriptions/' || segment_filtered_users_recently_not_churned.drip_subscription_id) subscription_faucet_link\nFROM \"dumps\".\"dev\".\"segment_filtered_users_recently_not_churned\"\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_first_email_sent\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_first_sms_sent\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_legacy_form_activated_events\" ON segment_filtered_users_recently_not_churned.drip_account_id = accounts_with_legacy_form_activated_events.account_id\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_oms_connected_provider\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_oms_indicated_provider\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_first_person_added\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_api_purchases\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_has_ever_connected_oms\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_installed_snippet_action\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_trial_start_at\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_trial_end_date\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_trust_status\" USING (drip_user_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_workflow_enabled\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"num_accounts_connected_to_subscription\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_last_payments\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_activation_dates\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_trial_weeks\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_first_registration_date\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_email_campaigns_sent\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"accounts_with_sms_campaigns_sent\" USING (drip_account_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_pricing_amounts\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_current_mrr\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_financial_statuses\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_list_size\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_company_information\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_active_workflows\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_sku_count\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_success_managers\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_user_counts\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_sms_subscribers_count\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_industries\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_churn_dates\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_store_revenue_attributes\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_api_enablement\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_first_payment_value_mrr\" USING (drip_subscription_id)\n    LEFT JOIN \"dumps\".\"dev\".\"store_revenue_stats\" ON drip_subscription_id = store_revenue_stats.subscription_id\n    LEFT JOIN \"dumps\".\"dev\".\"onsite_campaign_totals\" ON drip_account_id = onsite_campaign_totals.account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"segment_subscription_properties\""}, "model.drip_data_intelligence.segment_user_group_mapping": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.segment_filtered_users_recently_not_churned", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.memberships", "model.drip_data_intelligence.users"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "segment_user_group_mapping"], "unique_id": "model.drip_data_intelligence.segment_user_group_mapping", "raw_code": "SELECT a.public_id account_public_id\n     , u.public_id user_public_id\n  FROM {{ ref('segment_filtered_users_recently_not_churned') }} sfurnc\n      LEFT JOIN {{ ref('accounts') }} a ON sfurnc.drip_subscription_id = a.subscription_id\n      LEFT JOIN {{ ref('memberships') }} m ON a.id = m.account_id\n      LEFT JOIN {{ ref('users') }} u ON m.user_id = u.id\n WHERE u.public_id IS NOT NULL\n   AND m.status = 'active'", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/segment_user_group_mapping.sql", "original_file_path": "models/segment/segment_user_group_mapping.sql", "name": "segment_user_group_mapping", "alias": "segment_user_group_mapping", "checksum": {"name": "sha256", "checksum": "92c05bd0f518264d2837c6050c0bdb3ef3642b6b383101bd4a893b49241e0062"}, "tags": [], "refs": [["segment_filtered_users_recently_not_churned"], ["accounts"], ["memberships"], ["users"]], "sources": [], "metrics": [], "description": "Mapping of Segment users to groups. For pertinent Drip accounts, ties all users to all accounts they are a member of.\n", "columns": {"user_public_id": {"name": "user_public_id", "description": "The unique identifier for the user. This is the user's public_id in the Monolith.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_public_id": {"name": "account_public_id", "description": "The unique identifier for the group. This is the account's public_id in the Monolith.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/segment/segment.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment_user_group_mapping.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "segment", "bind": false}, "created_at": 1674498298.3806899, "compiled_code": "SELECT a.public_id account_public_id\n     , u.public_id user_public_id\n  FROM \"dumps\".\"dev\".\"segment_filtered_users_recently_not_churned\" sfurnc\n      LEFT JOIN \"dumps\".\"dev\".\"accounts\" a ON sfurnc.drip_subscription_id = a.subscription_id\n      LEFT JOIN \"dumps\".\"dev\".\"memberships\" m ON a.id = m.account_id\n      LEFT JOIN \"dumps\".\"dev\".\"users\" u ON m.user_id = u.id\n WHERE u.public_id IS NOT NULL\n   AND m.status = 'active'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"segment_user_group_mapping\""}, "model.drip_data_intelligence.segment_groups": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.segment_user_group_mapping", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.subscriptions_with_current_mrr", "model.drip_data_intelligence.memberships", "model.drip_data_intelligence.users", "model.drip_data_intelligence.users", "model.drip_data_intelligence.onsite_campaign_totals", "model.drip_data_intelligence.store_revenue_stats", "model.drip_data_intelligence.marketing_subscription_status", "model.drip_data_intelligence.subscriptions_with_list_size", "model.drip_data_intelligence.accounts_with_oms_connected_provider", "model.drip_data_intelligence.accounts_with_legacy_form_activated_events", "model.drip_data_intelligence.legacy_form_totals"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "segment_groups"], "unique_id": "model.drip_data_intelligence.segment_groups", "raw_code": "-- WARNING: Column names and values are directly reflected in `group` calls made to Segment\n--   Don't change anything unless you're super sure you know what you're doing\n  WITH account_public_ids AS (\n     SELECT DISTINCT account_public_id\n     FROM {{ ref('segment_user_group_mapping')}} sgum\n  )\n  , amc AS (\n   SELECT DISTINCT -- TODO: this is an evil kludge. AMC has duplicates and shouldn't. We need to move that to dbt and fix it\n      account_id\n      , total_billable_subscribers\n      , estimated_mrr\n   FROM {{ ref('account_metrics_current') }}\n  )\n  , sba AS (\n   SELECT DISTINCT -- TODO: Kludge. SBA really should be 1:1 with subscriptions. https://getdrip.slack.com/archives/C011JR7BA6A/p1668731978649909\n      subscription_id\n      , agency\n   FROM current.subscription_billing_attributes\n  )\n  , feature_flags AS (\n   SELECT\n      account_id\n      , listagg(flag_name, ',') AS flags\n   FROM current.feature_flags\n   GROUP BY account_id\n  )\nSELECT a.public_id                                                      account_public_id\n     , a.public_id                                                      id\n     , amc.total_billable_subscribers                                   account_total_email_subscribers\n     , a.created_at\n     , a.default_postal_address                                         address\n     , amc.estimated_mrr                                                estimated_account_mrr\n     , a.name\n     , u.email\n     , s.plan_id                                                        plan\n     , s.public_id                                                      subscription_public_id\n     , swcm.drip_current_mrr * 100                                      subscription_mrr\n     , subscription_owner_user.public_id                                subscription_owner_public_id\n     , swls.drip_email_list_size                                        subscription_total_email_subscribers\n     , a.url                                                            website\n     , COALESCE(u.public_id, subscription_owner_user.public_id)         user_public_id\n     , sba.agency                                                       agency_managed -- TODO: get this from PartnerStack when we can\n     , onsite_campaign_totals.onsite_campaigns_active_current\n     , onsite_campaign_totals.onsite_campaigns_total\n     , revenue_account_monthly_average_usd\n     , revenue_subscription_monthly_average_usd\n     , revenue_account_ytd_usd\n     , revenue_subscription_ytd_usd\n     , a.status                                                         account_monolith_status\n     , s.status                                                         subscription_monolith_status\n     , mss.subscription_status                                          subscription_marketing_status\n     , ('https://www.getdrip.com/faucet/accounts/' || a.public_id)      account_faucet_link\n     , ('https://www.getdrip.com/faucet/subscriptions/' || s.public_id) subscription_faucet_link\n     , feature_flags.flags                                              feature_flags\n     , (oms.drip_oms_connected_provider IS NOT NULL)                    oms_connected\n     , oms.drip_oms_connected_provider                                  oms_connected_provider\n     , legacy_form_events.has_legacy_form_activated_event\n     , legacy_form_totals.legacy_forms_active_current\n     , legacy_form_totals.legacy_forms_total\n  FROM account_public_ids\n     LEFT JOIN {{ ref('accounts') }} a ON account_public_ids.account_public_id = a.public_id\n     LEFT JOIN {{ ref('subscriptions') }} s ON a.subscription_id = s.id\n     LEFT JOIN {{ ref(\"subscriptions_with_current_mrr\") }} swcm ON s.id = swcm.drip_subscription_id\n     LEFT JOIN amc ON a.id = amc.account_id\n     LEFT JOIN {{ ref('memberships') }} m ON a.id = m.account_id AND m.role = 'owner'\n     LEFT JOIN {{ ref('users') }} u ON m.user_id = u.id\n     LEFT JOIN {{ ref('users') }} subscription_owner_user ON s.user_id = subscription_owner_user.id\n     LEFT JOIN sba ON s.id = sba.subscription_id\n     LEFT JOIN {{ ref('onsite_campaign_totals') }} ON a.id = onsite_campaign_totals.account_id\n     LEFT JOIN {{ ref('store_revenue_stats') }} srs ON a.id = srs.account_id\n     LEFT JOIN {{ ref('marketing_subscription_status') }} mss ON s.id = mss.drip_subscription_id\n     LEFT JOIN {{ ref('subscriptions_with_list_size') }} swls ON s.id = swls.drip_subscription_id\n     LEFT JOIN feature_flags ON a.id = feature_flags.account_id\n     LEFT JOIN {{ ref('accounts_with_oms_connected_provider') }} oms ON a.id = oms.drip_account_id\n     LEFT JOIN {{ ref('accounts_with_legacy_form_activated_events') }} legacy_form_events ON a.id = legacy_form_events.account_id\n     LEFT JOIN {{ ref('legacy_form_totals') }} ON a.id = legacy_form_totals.account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/segment_groups.sql", "original_file_path": "models/segment/segment_groups.sql", "name": "segment_groups", "alias": "segment_groups", "checksum": {"name": "sha256", "checksum": "cb345a6a471d70e0ee90e05590f22fdae5f0e14edfc0d560127c0ba035c01fc2"}, "tags": [], "refs": [["segment_user_group_mapping"], ["account_metrics_current"], ["accounts"], ["subscriptions"], ["subscriptions_with_current_mrr"], ["memberships"], ["users"], ["users"], ["onsite_campaign_totals"], ["store_revenue_stats"], ["marketing_subscription_status"], ["subscriptions_with_list_size"], ["accounts_with_oms_connected_provider"], ["accounts_with_legacy_form_activated_events"], ["legacy_form_totals"]], "sources": [], "metrics": [], "description": "Our accounts formatted as Segment groups NOTE: There is no entity in Segment that maps to our subscriptions, so we just apply Subscription-\n  level traits to all accounts in the subscription.\n", "columns": {"account_public_id": {"name": "account_public_id", "description": "The unique identifier for the group. This is the account's public_id in the Monolith.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_public_id": {"name": "subscription_public_id", "description": "Public id of the account's subscription.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/segment/segment.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment_groups.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "segment", "bind": false}, "created_at": 1674498298.378421, "compiled_code": "-- WARNING: Column names and values are directly reflected in `group` calls made to Segment\n--   Don't change anything unless you're super sure you know what you're doing\n  WITH account_public_ids AS (\n     SELECT DISTINCT account_public_id\n     FROM \"dumps\".\"dev\".\"segment_user_group_mapping\" sgum\n  )\n  , amc AS (\n   SELECT DISTINCT -- TODO: this is an evil kludge. AMC has duplicates and shouldn't. We need to move that to dbt and fix it\n      account_id\n      , total_billable_subscribers\n      , estimated_mrr\n   FROM \"dumps\".\"dev\".\"account_metrics_current\"\n  )\n  , sba AS (\n   SELECT DISTINCT -- TODO: Kludge. SBA really should be 1:1 with subscriptions. https://getdrip.slack.com/archives/C011JR7BA6A/p1668731978649909\n      subscription_id\n      , agency\n   FROM current.subscription_billing_attributes\n  )\n  , feature_flags AS (\n   SELECT\n      account_id\n      , listagg(flag_name, ',') AS flags\n   FROM current.feature_flags\n   GROUP BY account_id\n  )\nSELECT a.public_id                                                      account_public_id\n     , a.public_id                                                      id\n     , amc.total_billable_subscribers                                   account_total_email_subscribers\n     , a.created_at\n     , a.default_postal_address                                         address\n     , amc.estimated_mrr                                                estimated_account_mrr\n     , a.name\n     , u.email\n     , s.plan_id                                                        plan\n     , s.public_id                                                      subscription_public_id\n     , swcm.drip_current_mrr * 100                                      subscription_mrr\n     , subscription_owner_user.public_id                                subscription_owner_public_id\n     , swls.drip_email_list_size                                        subscription_total_email_subscribers\n     , a.url                                                            website\n     , COALESCE(u.public_id, subscription_owner_user.public_id)         user_public_id\n     , sba.agency                                                       agency_managed -- TODO: get this from PartnerStack when we can\n     , onsite_campaign_totals.onsite_campaigns_active_current\n     , onsite_campaign_totals.onsite_campaigns_total\n     , revenue_account_monthly_average_usd\n     , revenue_subscription_monthly_average_usd\n     , revenue_account_ytd_usd\n     , revenue_subscription_ytd_usd\n     , a.status                                                         account_monolith_status\n     , s.status                                                         subscription_monolith_status\n     , mss.subscription_status                                          subscription_marketing_status\n     , ('https://www.getdrip.com/faucet/accounts/' || a.public_id)      account_faucet_link\n     , ('https://www.getdrip.com/faucet/subscriptions/' || s.public_id) subscription_faucet_link\n     , feature_flags.flags                                              feature_flags\n     , (oms.drip_oms_connected_provider IS NOT NULL)                    oms_connected\n     , oms.drip_oms_connected_provider                                  oms_connected_provider\n     , legacy_form_events.has_legacy_form_activated_event\n     , legacy_form_totals.legacy_forms_active_current\n     , legacy_form_totals.legacy_forms_total\n  FROM account_public_ids\n     LEFT JOIN \"dumps\".\"dev\".\"accounts\" a ON account_public_ids.account_public_id = a.public_id\n     LEFT JOIN \"dumps\".\"dev\".\"subscriptions\" s ON a.subscription_id = s.id\n     LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_current_mrr\" swcm ON s.id = swcm.drip_subscription_id\n     LEFT JOIN amc ON a.id = amc.account_id\n     LEFT JOIN \"dumps\".\"dev\".\"memberships\" m ON a.id = m.account_id AND m.role = 'owner'\n     LEFT JOIN \"dumps\".\"dev\".\"users\" u ON m.user_id = u.id\n     LEFT JOIN \"dumps\".\"dev\".\"users\" subscription_owner_user ON s.user_id = subscription_owner_user.id\n     LEFT JOIN sba ON s.id = sba.subscription_id\n     LEFT JOIN \"dumps\".\"dev\".\"onsite_campaign_totals\" ON a.id = onsite_campaign_totals.account_id\n     LEFT JOIN \"dumps\".\"dev\".\"store_revenue_stats\" srs ON a.id = srs.account_id\n     LEFT JOIN \"dumps\".\"dev\".\"marketing_subscription_status\" mss ON s.id = mss.drip_subscription_id\n     LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_list_size\" swls ON s.id = swls.drip_subscription_id\n     LEFT JOIN feature_flags ON a.id = feature_flags.account_id\n     LEFT JOIN \"dumps\".\"dev\".\"accounts_with_oms_connected_provider\" oms ON a.id = oms.drip_account_id\n     LEFT JOIN \"dumps\".\"dev\".\"accounts_with_legacy_form_activated_events\" legacy_form_events ON a.id = legacy_form_events.account_id\n     LEFT JOIN \"dumps\".\"dev\".\"legacy_form_totals\" ON a.id = legacy_form_totals.account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"segment_groups\""}, "model.drip_data_intelligence.segment_users": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.segment_user_group_mapping", "model.drip_data_intelligence.users"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "segment_users"], "unique_id": "model.drip_data_intelligence.segment_users", "raw_code": "SELECT DISTINCT\n      users.public_id                                              user_public_id\n    , users.public_id                                              id\n    , users.name\n    , users.first_name\n    , users.last_name\n    , users.created_at\n    , users.email\n    , ('https://www.getdrip.com/faucet/users/' || users.public_id) user_faucet_link\nFROM {{ ref('segment_user_group_mapping') }}\n      LEFT JOIN {{ ref('users') }} ON segment_user_group_mapping.user_public_id = users.public_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/segment_users.sql", "original_file_path": "models/segment/segment_users.sql", "name": "segment_users", "alias": "segment_users", "checksum": {"name": "sha256", "checksum": "ffad9a2882d99abdea0d56040ea0b4dfe04ef4f437622756e23a0fcdc61997b3"}, "tags": [], "refs": [["segment_user_group_mapping"], ["users"]], "sources": [], "metrics": [], "description": "Our users formatted as Segment users\n", "columns": {"user_public_id": {"name": "user_public_id", "description": "The unique identifier for the user. This is the user's public_id in the Monolith.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/segment/segment.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "segment", "bind": false}, "created_at": 1674498298.3793721, "compiled_code": "SELECT DISTINCT\n      users.public_id                                              user_public_id\n    , users.public_id                                              id\n    , users.name\n    , users.first_name\n    , users.last_name\n    , users.created_at\n    , users.email\n    , ('https://www.getdrip.com/faucet/users/' || users.public_id) user_faucet_link\nFROM \"dumps\".\"dev\".\"segment_user_group_mapping\"\n      LEFT JOIN \"dumps\".\"dev\".\"users\" ON segment_user_group_mapping.user_public_id = users.public_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"segment_users\""}, "model.drip_data_intelligence.subscriptions_with_api_enablement": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_api_enablement"], "unique_id": "model.drip_data_intelligence.subscriptions_with_api_enablement", "raw_code": "SELECT\n  id as drip_subscription_id\n  , enable_api_access AS drip_has_api_enabled\nFROM\n  current.subscriptions s", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_api_enablement.sql", "original_file_path": "models/segment/components/subscriptions_with_api_enablement.sql", "name": "subscriptions_with_api_enablement", "alias": "subscriptions_with_api_enablement", "checksum": {"name": "sha256", "checksum": "7f7962db2eb71b93bd2f7f2299fc0afed38a2f6bce569ad74592950edafbbda7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_api_enablement.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.777775, "compiled_code": "SELECT\n  id as drip_subscription_id\n  , enable_api_access AS drip_has_api_enabled\nFROM\n  current.subscriptions s", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_api_enablement\""}, "model.drip_data_intelligence.subscriptions_with_churn_dates": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_churn_dates"], "unique_id": "model.drip_data_intelligence.subscriptions_with_churn_dates", "raw_code": "with subscription_dates as\n         (\n             select distinct\n                    id,\n                    cancelled_at,\n                    pending_cancellation_at\n               from {{ ref(\"subscriptions\") }}\n         ),\n     delinquent_date as\n         (\n             select id,\n                    created_at drip_delinquent_date\n               from data_intelligence.subscription_state_transitions\n              where \"to\" = 'delinquent'\n                and subject_type = 'Subscription'\n                and \"from\" = 'active'\n         )\nselect id drip_subscription_id,\n       cancelled_at drip_churn_date,\n       pending_cancellation_at drip_pending_cancellation_date,\n       drip_delinquent_date\n  from subscription_dates\n  full outer join delinquent_date using (id)\nwhere cancelled_at is not null or pending_cancellation_at is not null or drip_delinquent_date is not null", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_churn_dates.sql", "original_file_path": "models/segment/components/subscriptions_with_churn_dates.sql", "name": "subscriptions_with_churn_dates", "alias": "subscriptions_with_churn_dates", "checksum": {"name": "sha256", "checksum": "1c9b1afc133d3b411d5b4612085c21c59da698f37e5d622f866305c1673a80d1"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_churn_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.780372, "compiled_code": "with subscription_dates as\n         (\n             select distinct\n                    id,\n                    cancelled_at,\n                    pending_cancellation_at\n               from \"dumps\".\"dev\".\"subscriptions\"\n         ),\n     delinquent_date as\n         (\n             select id,\n                    created_at drip_delinquent_date\n               from data_intelligence.subscription_state_transitions\n              where \"to\" = 'delinquent'\n                and subject_type = 'Subscription'\n                and \"from\" = 'active'\n         )\nselect id drip_subscription_id,\n       cancelled_at drip_churn_date,\n       pending_cancellation_at drip_pending_cancellation_date,\n       drip_delinquent_date\n  from subscription_dates\n  full outer join delinquent_date using (id)\nwhere cancelled_at is not null or pending_cancellation_at is not null or drip_delinquent_date is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_churn_dates\""}, "model.drip_data_intelligence.subscriptions_with_trial_weeks": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.current.subscription_details"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_trial_weeks"], "unique_id": "model.drip_data_intelligence.subscriptions_with_trial_weeks", "raw_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    trial_week_cohort AS drip_trial_cohort_week\nFROM\n    {{ source('current', 'subscription_details') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_trial_weeks.sql", "original_file_path": "models/segment/components/subscriptions_with_trial_weeks.sql", "name": "subscriptions_with_trial_weeks", "alias": "subscriptions_with_trial_weeks", "checksum": {"name": "sha256", "checksum": "9e5abfe1cc2be444bfa60f8b11c3ba09abb8915b3ecbe352429f950e16c9ab24"}, "tags": [], "refs": [], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_trial_weeks.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.7830799, "compiled_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    trial_week_cohort AS drip_trial_cohort_week\nFROM\n    \"dumps\".\"current\".\"subscription_details\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_trial_weeks\""}, "model.drip_data_intelligence.accounts_with_first_sms_sent": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.account_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_first_sms_sent"], "unique_id": "model.drip_data_intelligence.accounts_with_first_sms_sent", "raw_code": "SELECT\n    account_id AS drip_account_id,\n    has_sent_sms AS drip_sent_first_sms\nFROM\n    {{ ref(\"account_metrics_current\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_first_sms_sent.sql", "original_file_path": "models/segment/components/accounts_with_first_sms_sent.sql", "name": "accounts_with_first_sms_sent", "alias": "accounts_with_first_sms_sent", "checksum": {"name": "sha256", "checksum": "813ab8ca84a59b0ab561928e197b8aa017a6391faa663093bdfbcd9356b53a5b"}, "tags": [], "refs": [["account_metrics_current"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_first_sms_sent.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.786175, "compiled_code": "SELECT\n    account_id AS drip_account_id,\n    has_sent_sms AS drip_sent_first_sms\nFROM\n    \"dumps\".\"dev\".\"account_metrics_current\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_first_sms_sent\""}, "model.drip_data_intelligence.subscriptions_with_trial_end_date": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_trial_end_date"], "unique_id": "model.drip_data_intelligence.subscriptions_with_trial_end_date", "raw_code": "SELECT\n    subject_id as drip_subscription_id,\n    MIN(created_at) as drip_trial_end_date\nFROM\n    data_intelligence.subscription_state_transitions\nWHERE\n    1 = 1\n    AND \"to\" = 'trial_expired'\nGROUP BY\n    drip_subscription_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_trial_end_date.sql", "original_file_path": "models/segment/components/subscriptions_with_trial_end_date.sql", "name": "subscriptions_with_trial_end_date", "alias": "subscriptions_with_trial_end_date", "checksum": {"name": "sha256", "checksum": "e8d4fa42c1b0329945584fc69ac647f7dc18a78902ed7883cef7d7a2e0d8686c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_trial_end_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.788835, "compiled_code": "SELECT\n    subject_id as drip_subscription_id,\n    MIN(created_at) as drip_trial_end_date\nFROM\n    data_intelligence.subscription_state_transitions\nWHERE\n    1 = 1\n    AND \"to\" = 'trial_expired'\nGROUP BY\n    drip_subscription_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_trial_end_date\""}, "model.drip_data_intelligence.accounts_with_oms_connected_provider": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_oms_connected_provider"], "unique_id": "model.drip_data_intelligence.accounts_with_oms_connected_provider", "raw_code": "WITH oms_provider_integrations AS (\n  SELECT\n    acc.id AS drip_account_id,\n    inte.account_param,\n    inte.created_at,\n    CASE\n      WHEN provider_param = 'drip_woocommerce' THEN 'woocommerce'\n      ELSE provider_param\n    END AS drip_oms_connected_provider\n  FROM\n    current.integrations AS inte\n    JOIN {{ ref(\"accounts\") }} AS acc\n    ON inte.account_param = acc.public_id\n  WHERE\n    1 = 1\n    AND provider_param IN (\n      'magento',\n      'bigcommerce',\n      'drip_woocommerce',\n      'shopify'\n    )\n    AND inte.deleted_at IS NULL\n),\noms_provider_integrations_ranked AS (\n  SELECT\n    drip_account_id,\n    account_param,\n    drip_oms_connected_provider,\n    created_at,\n    DENSE_RANK() OVER (\n      PARTITION BY drip_account_id\n      ORDER BY\n        created_at DESC\n    ) AS drip_oms_connected_provider_rank\n  FROM\n    oms_provider_integrations\n)\nSELECT\n  drip_account_id,\n  drip_oms_connected_provider\nFROM\n  oms_provider_integrations_ranked\nWHERE\n  drip_oms_connected_provider_rank = 1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_oms_connected_provider.sql", "original_file_path": "models/segment/components/accounts_with_oms_connected_provider.sql", "name": "accounts_with_oms_connected_provider", "alias": "accounts_with_oms_connected_provider", "checksum": {"name": "sha256", "checksum": "1e3396a8b3f8b476269b0abee5bae912bc23c5850eb1265a591cd2f615bf9f16"}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_oms_connected_provider.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.791563, "compiled_code": "WITH oms_provider_integrations AS (\n  SELECT\n    acc.id AS drip_account_id,\n    inte.account_param,\n    inte.created_at,\n    CASE\n      WHEN provider_param = 'drip_woocommerce' THEN 'woocommerce'\n      ELSE provider_param\n    END AS drip_oms_connected_provider\n  FROM\n    current.integrations AS inte\n    JOIN \"dumps\".\"dev\".\"accounts\" AS acc\n    ON inte.account_param = acc.public_id\n  WHERE\n    1 = 1\n    AND provider_param IN (\n      'magento',\n      'bigcommerce',\n      'drip_woocommerce',\n      'shopify'\n    )\n    AND inte.deleted_at IS NULL\n),\noms_provider_integrations_ranked AS (\n  SELECT\n    drip_account_id,\n    account_param,\n    drip_oms_connected_provider,\n    created_at,\n    DENSE_RANK() OVER (\n      PARTITION BY drip_account_id\n      ORDER BY\n        created_at DESC\n    ) AS drip_oms_connected_provider_rank\n  FROM\n    oms_provider_integrations\n)\nSELECT\n  drip_account_id,\n  drip_oms_connected_provider\nFROM\n  oms_provider_integrations_ranked\nWHERE\n  drip_oms_connected_provider_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_oms_connected_provider\""}, "model.drip_data_intelligence.accounts_with_api_purchases": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.purchases", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_api_purchases"], "unique_id": "model.drip_data_intelligence.accounts_with_api_purchases", "raw_code": "WITH accounts_with_api_purchase AS (\n    SELECT\n        distinct account_id AS id\n        , 1 AS has_api_purchase\n    FROM {{ ref(\"purchases\") }}\n    WHERE TRUE\n        AND source = 'shopper_activity'\n)\nSELECT\n\tacc.id AS drip_account_id\n\t, CASE WHEN has_api_purchase = 1 THEN TRUE ELSE FALSE END AS drip_has_api_purchase\nFROM {{ ref(\"accounts\") }} acc\nLEFT JOIN accounts_with_api_purchase USING (id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_api_purchases.sql", "original_file_path": "models/segment/components/accounts_with_api_purchases.sql", "name": "accounts_with_api_purchases", "alias": "accounts_with_api_purchases", "checksum": {"name": "sha256", "checksum": "9c12f71132e3641f17b90b300fcd2256364a6b9364e8faf49efc421a3840abc0"}, "tags": [], "refs": [["purchases"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_api_purchases.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.794407, "compiled_code": "WITH accounts_with_api_purchase AS (\n    SELECT\n        distinct account_id AS id\n        , 1 AS has_api_purchase\n    FROM \"dumps\".\"dev\".\"purchases\"\n    WHERE TRUE\n        AND source = 'shopper_activity'\n)\nSELECT\n\tacc.id AS drip_account_id\n\t, CASE WHEN has_api_purchase = 1 THEN TRUE ELSE FALSE END AS drip_has_api_purchase\nFROM \"dumps\".\"dev\".\"accounts\" acc\nLEFT JOIN accounts_with_api_purchase USING (id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_api_purchases\""}, "model.drip_data_intelligence.segment_filtered_users": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.users", "model.drip_data_intelligence.marketing_subscription_status", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.marketing_subscription_status", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.users"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "segment_filtered_users"], "unique_id": "model.drip_data_intelligence.segment_filtered_users", "raw_code": "WITH active_accounts_ranked_by_date AS (\n    SELECT\n        id,\n        public_id,\n        subscription_id,\n        DENSE_RANK() over (\n            PARTITION BY subscription_id\n            ORDER BY\n                created_at\n        ) AS account_creation_order\n    FROM\n        {{ ref(\"accounts\") }}\n),\nfirst_active_account AS (\n    SELECT\n        id,\n        public_id,\n        subscription_id\n    FROM\n        active_accounts_ranked_by_date\n    WHERE\n        TRUE\n        AND account_creation_order = 1\n),\nowners AS (\n    SELECT\n        faa.id AS drip_account_id,\n        s.user_id AS drip_user_id,\n        faa.public_id AS drip_public_account_id,\n        s.id AS drip_subscription_id,\n        u.email AS email,\n        s.token AS drip_subscription_token,\n        s.updated_at AS updated_at\n    FROM\n        {{ ref(\"subscriptions\") }} s\n        JOIN {{ ref(\"users\") }} u\n        ON s.user_id = u.id\n        JOIN first_active_account faa\n        ON faa.subscription_id = s.id\n),\npaid_statuses AS (\n    SELECT\n        distinct drip_subscription_id,\n        subscription_status AS paid_status,\n        status_last_changed_at\n    FROM\n        {{ ref('marketing_subscription_status') }}\n    WHERE\n        subscription_status IN (\n            'active',\n            'churned',\n            'delinquent',\n            'pending_cancellation'\n        )\n),\nsubscriptions_post_2020 AS (\n    SELECT\n        id AS drip_subscription_id\n    FROM\n        {{ ref(\"subscriptions\") }}\n    WHERE\n        created_at > '2021-01-01'\n),\nstatuses_post_2020 AS (\n    SELECT\n        distinct drip_subscription_id,\n        subscription_status AS post_2020_status,\n        status_last_changed_at\n    FROM\n        {{ ref('marketing_subscription_status') }}\n        JOIN subscriptions_post_2020 USING (drip_subscription_id)\n),\ndrip_employee_check AS (\n    SELECT\n        id AS drip_subscription_id,\n        primary_email LIKE '%@drip.com'\n        OR comped = 't' AS created_by_drip_employee\n    FROM\n        {{ ref(\"subscriptions\") }}\n        INNER JOIN (\n            SELECT\n                id AS user_id,\n                email AS primary_email\n            FROM\n                {{ ref(\"users\") }}\n        ) USING (user_id)\n)\nSELECT\n    owners.drip_account_id,\n    owners.drip_user_id,\n    owners.drip_public_account_id,\n    owners.drip_subscription_id,\n    owners.email,\n    owners.drip_subscription_token,\n    COALESCE(\n        ps.paid_status,\n        sp2020.post_2020_status\n    ) AS subscription_status,\n    COALESCE(\n        drec.created_by_drip_employee,\n        false\n    ) AS created_by_drip_employee,\n    owners.updated_at,\n    COALESCE(\n        ps.status_last_changed_at,\n        sp2020.status_last_changed_at\n    ) AS status_last_changed_at\nFROM\n    owners\n    LEFT JOIN paid_statuses ps USING (drip_subscription_id)\n    LEFT JOIN statuses_post_2020 sp2020 USING (drip_subscription_id)\n    LEFT JOIN drip_employee_check drec USING (drip_subscription_id)\nWHERE\n    TRUE\n    AND subscription_status IS NOT NULL", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/segment_filtered_users.sql", "original_file_path": "models/segment/components/segment_filtered_users.sql", "name": "segment_filtered_users", "alias": "segment_filtered_users", "checksum": {"name": "sha256", "checksum": "3da009fd8f7a837397f804155c9564219886475ca45cd20761c0abb4816d679d"}, "tags": [], "refs": [["accounts"], ["subscriptions"], ["users"], ["marketing_subscription_status"], ["subscriptions"], ["marketing_subscription_status"], ["subscriptions"], ["users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/segment_filtered_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "segment", "bind": false}, "created_at": 1674498297.797179, "compiled_code": "WITH active_accounts_ranked_by_date AS (\n    SELECT\n        id,\n        public_id,\n        subscription_id,\n        DENSE_RANK() over (\n            PARTITION BY subscription_id\n            ORDER BY\n                created_at\n        ) AS account_creation_order\n    FROM\n        \"dumps\".\"dev\".\"accounts\"\n),\nfirst_active_account AS (\n    SELECT\n        id,\n        public_id,\n        subscription_id\n    FROM\n        active_accounts_ranked_by_date\n    WHERE\n        TRUE\n        AND account_creation_order = 1\n),\nowners AS (\n    SELECT\n        faa.id AS drip_account_id,\n        s.user_id AS drip_user_id,\n        faa.public_id AS drip_public_account_id,\n        s.id AS drip_subscription_id,\n        u.email AS email,\n        s.token AS drip_subscription_token,\n        s.updated_at AS updated_at\n    FROM\n        \"dumps\".\"dev\".\"subscriptions\" s\n        JOIN \"dumps\".\"dev\".\"users\" u\n        ON s.user_id = u.id\n        JOIN first_active_account faa\n        ON faa.subscription_id = s.id\n),\npaid_statuses AS (\n    SELECT\n        distinct drip_subscription_id,\n        subscription_status AS paid_status,\n        status_last_changed_at\n    FROM\n        \"dumps\".\"dev\".\"marketing_subscription_status\"\n    WHERE\n        subscription_status IN (\n            'active',\n            'churned',\n            'delinquent',\n            'pending_cancellation'\n        )\n),\nsubscriptions_post_2020 AS (\n    SELECT\n        id AS drip_subscription_id\n    FROM\n        \"dumps\".\"dev\".\"subscriptions\"\n    WHERE\n        created_at > '2021-01-01'\n),\nstatuses_post_2020 AS (\n    SELECT\n        distinct drip_subscription_id,\n        subscription_status AS post_2020_status,\n        status_last_changed_at\n    FROM\n        \"dumps\".\"dev\".\"marketing_subscription_status\"\n        JOIN subscriptions_post_2020 USING (drip_subscription_id)\n),\ndrip_employee_check AS (\n    SELECT\n        id AS drip_subscription_id,\n        primary_email LIKE '%@drip.com'\n        OR comped = 't' AS created_by_drip_employee\n    FROM\n        \"dumps\".\"dev\".\"subscriptions\"\n        INNER JOIN (\n            SELECT\n                id AS user_id,\n                email AS primary_email\n            FROM\n                \"dumps\".\"dev\".\"users\"\n        ) USING (user_id)\n)\nSELECT\n    owners.drip_account_id,\n    owners.drip_user_id,\n    owners.drip_public_account_id,\n    owners.drip_subscription_id,\n    owners.email,\n    owners.drip_subscription_token,\n    COALESCE(\n        ps.paid_status,\n        sp2020.post_2020_status\n    ) AS subscription_status,\n    COALESCE(\n        drec.created_by_drip_employee,\n        false\n    ) AS created_by_drip_employee,\n    owners.updated_at,\n    COALESCE(\n        ps.status_last_changed_at,\n        sp2020.status_last_changed_at\n    ) AS status_last_changed_at\nFROM\n    owners\n    LEFT JOIN paid_statuses ps USING (drip_subscription_id)\n    LEFT JOIN statuses_post_2020 sp2020 USING (drip_subscription_id)\n    LEFT JOIN drip_employee_check drec USING (drip_subscription_id)\nWHERE\n    TRUE\n    AND subscription_status IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"segment_filtered_users\""}, "model.drip_data_intelligence.accounts_with_installed_snippet_action": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.account_events"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_installed_snippet_action"], "unique_id": "model.drip_data_intelligence.accounts_with_installed_snippet_action", "raw_code": "SELECT\n    account_id AS drip_account_id,\n    action\nFROM\n    {{ ref(\"account_events\") }}\nWHERE\n    1 = 1\n    and action ILIKE 'Installed Snippet'", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_installed_snippet_action.sql", "original_file_path": "models/segment/components/accounts_with_installed_snippet_action.sql", "name": "accounts_with_installed_snippet_action", "alias": "accounts_with_installed_snippet_action", "checksum": {"name": "sha256", "checksum": "5f3f8ac388c808edd6bfee99ffacd2462f05f75c761b6a5f9c59283605fd2e81"}, "tags": [], "refs": [["account_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_installed_snippet_action.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.800344, "compiled_code": "SELECT\n    account_id AS drip_account_id,\n    action\nFROM\n    \"dumps\".\"dev\".\"account_events\"\nWHERE\n    1 = 1\n    and action ILIKE 'Installed Snippet'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_installed_snippet_action\""}, "model.drip_data_intelligence.subscriptions_with_first_payment_value_mrr": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_first_payment_value_mrr"], "unique_id": "model.drip_data_intelligence.subscriptions_with_first_payment_value_mrr", "raw_code": "WITH subscription_transactions_ordered_chronologically AS (\n\tSELECT\n\t\tsubscription_id AS drip_subscription_id\n\t\t, ROUND(amount::NUMERIC / 100, 2) AS drip_first_payment_value_mrr\n\t    , ROUND(amount_refunded::NUMERIC / 100, 2) AS drip_amount_refunded\n\t\t, DENSE_RANK() OVER (PARTITION BY subscription_id ORDER BY id) AS chronological_transaction_rank\n\tFROM {{ ref(\"transactions\") }}\n\tWHERE TRUE\n\tAND category = 'monthly'\n\tAND amount > 0\n)\n\n, substract_partial_and_full_refunds AS (\n    SELECT\n\t    drip_subscription_id\n        , drip_first_payment_value_mrr\n\t    , CASE\n\t       WHEN (drip_first_payment_value_mrr = drip_amount_refunded AND chronological_transaction_rank = 1\n\t            AND LEAD(drip_first_payment_value_mrr) OVER (PARTITION BY drip_subscription_id ORDER BY chronological_transaction_rank) IS NOT NULL)\n\t            OR\n\t            ((drip_first_payment_value_mrr - drip_amount_refunded) < 10 AND chronological_transaction_rank = 1\n                AND LEAD(drip_first_payment_value_mrr) OVER (PARTITION BY drip_subscription_id ORDER BY chronological_transaction_rank) IS NOT NULL)\n                THEN LEAD(drip_first_payment_value_mrr) OVER (PARTITION BY drip_subscription_id ORDER BY chronological_transaction_rank)\n           WHEN drip_first_payment_value_mrr > drip_amount_refunded AND drip_amount_refunded > 0 AND chronological_transaction_rank = 1\n                THEN drip_first_payment_value_mrr - drip_amount_refunded\n           WHEN drip_amount_refunded = 0 AND chronological_transaction_rank = 1\n\t            THEN drip_first_payment_value_mrr\n\t        ELSE NULL\n          END AS drip_first_paymant_value_mrr_2nd\n        , drip_amount_refunded\n        , chronological_transaction_rank\n\nFROM subscription_transactions_ordered_chronologically\nWHERE TRUE\n)\n\nSELECT\n    drip_subscription_id\n    , CASE\n        WHEN drip_first_paymant_value_mrr_2nd IS NULL\n            THEN 0\n        WHEN drip_first_paymant_value_mrr_2nd = 1\n            THEN 0\n        ELSE drip_first_paymant_value_mrr_2nd\n      END as drip_first_payment_value_mrr\nFROM substract_partial_and_full_refunds\nWHERE TRUE\nAND chronological_transaction_rank = 1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_first_payment_value_mrr.sql", "original_file_path": "models/segment/components/subscriptions_with_first_payment_value_mrr.sql", "name": "subscriptions_with_first_payment_value_mrr", "alias": "subscriptions_with_first_payment_value_mrr", "checksum": {"name": "sha256", "checksum": "eb80ecb3159299634021346937d70603a4395903c6ae2e9022fd1b2b4b61533e"}, "tags": [], "refs": [["transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_first_payment_value_mrr.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.802971, "compiled_code": "WITH subscription_transactions_ordered_chronologically AS (\n\tSELECT\n\t\tsubscription_id AS drip_subscription_id\n\t\t, ROUND(amount::NUMERIC / 100, 2) AS drip_first_payment_value_mrr\n\t    , ROUND(amount_refunded::NUMERIC / 100, 2) AS drip_amount_refunded\n\t\t, DENSE_RANK() OVER (PARTITION BY subscription_id ORDER BY id) AS chronological_transaction_rank\n\tFROM \"dumps\".\"dev\".\"transactions\"\n\tWHERE TRUE\n\tAND category = 'monthly'\n\tAND amount > 0\n)\n\n, substract_partial_and_full_refunds AS (\n    SELECT\n\t    drip_subscription_id\n        , drip_first_payment_value_mrr\n\t    , CASE\n\t       WHEN (drip_first_payment_value_mrr = drip_amount_refunded AND chronological_transaction_rank = 1\n\t            AND LEAD(drip_first_payment_value_mrr) OVER (PARTITION BY drip_subscription_id ORDER BY chronological_transaction_rank) IS NOT NULL)\n\t            OR\n\t            ((drip_first_payment_value_mrr - drip_amount_refunded) < 10 AND chronological_transaction_rank = 1\n                AND LEAD(drip_first_payment_value_mrr) OVER (PARTITION BY drip_subscription_id ORDER BY chronological_transaction_rank) IS NOT NULL)\n                THEN LEAD(drip_first_payment_value_mrr) OVER (PARTITION BY drip_subscription_id ORDER BY chronological_transaction_rank)\n           WHEN drip_first_payment_value_mrr > drip_amount_refunded AND drip_amount_refunded > 0 AND chronological_transaction_rank = 1\n                THEN drip_first_payment_value_mrr - drip_amount_refunded\n           WHEN drip_amount_refunded = 0 AND chronological_transaction_rank = 1\n\t            THEN drip_first_payment_value_mrr\n\t        ELSE NULL\n          END AS drip_first_paymant_value_mrr_2nd\n        , drip_amount_refunded\n        , chronological_transaction_rank\n\nFROM subscription_transactions_ordered_chronologically\nWHERE TRUE\n)\n\nSELECT\n    drip_subscription_id\n    , CASE\n        WHEN drip_first_paymant_value_mrr_2nd IS NULL\n            THEN 0\n        WHEN drip_first_paymant_value_mrr_2nd = 1\n            THEN 0\n        ELSE drip_first_paymant_value_mrr_2nd\n      END as drip_first_payment_value_mrr\nFROM substract_partial_and_full_refunds\nWHERE TRUE\nAND chronological_transaction_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_first_payment_value_mrr\""}, "model.drip_data_intelligence.subscriptions_with_sms_subscribers_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.account_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_sms_subscribers_count"], "unique_id": "model.drip_data_intelligence.subscriptions_with_sms_subscribers_count", "raw_code": "SELECT\n  subscription_id AS drip_subscription_id,\n  COALESCE(SUM(n_sms_people), 0) AS drip_sms_subscriber_count\nFROM\n  {{ ref(\"account_metrics_current\") }} acm\nGROUP BY\n  subscription_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_sms_subscribers_count.sql", "original_file_path": "models/segment/components/subscriptions_with_sms_subscribers_count.sql", "name": "subscriptions_with_sms_subscribers_count", "alias": "subscriptions_with_sms_subscribers_count", "checksum": {"name": "sha256", "checksum": "87a2a6b58c8aff693f0305f101c89dd1be8f2a4f8848dc07ca9b7ffa18b37fbe"}, "tags": [], "refs": [["account_metrics_current"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_sms_subscribers_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.805614, "compiled_code": "SELECT\n  subscription_id AS drip_subscription_id,\n  COALESCE(SUM(n_sms_people), 0) AS drip_sms_subscriber_count\nFROM\n  \"dumps\".\"dev\".\"account_metrics_current\" acm\nGROUP BY\n  subscription_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_sms_subscribers_count\""}, "model.drip_data_intelligence.subscriptions_with_list_size": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.drip_data_intelligence.run_date"], "nodes": ["model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_list_size"], "unique_id": "model.drip_data_intelligence.subscriptions_with_list_size", "raw_code": "WITH todays_stats AS (\n  SELECT\n    account_id AS id,\n    billable_subscribers_v2\n  FROM\n    current.account_daily_usage_stats\n  WHERE\n    TRUE\n    AND created_at :: DATE = ({{ run_date() }} - INTERVAL '1 DAY') :: DATE\n)\nSELECT\n  a.subscription_id AS drip_subscription_id,\n  SUM(billable_subscribers_v2) AS drip_email_list_size\nFROM\n  {{ ref(\"accounts\") }} a\n  JOIN todays_stats USING (id)\nGROUP BY\n  1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_list_size.sql", "original_file_path": "models/segment/components/subscriptions_with_list_size.sql", "name": "subscriptions_with_list_size", "alias": "subscriptions_with_list_size", "checksum": {"name": "sha256", "checksum": "e6e31cff6b7f0b97695428fee679ec8cb96b3caec7893408e82fe0fdd9df91b7"}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_list_size.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.808224, "compiled_code": "WITH todays_stats AS (\n  SELECT\n    account_id AS id,\n    billable_subscribers_v2\n  FROM\n    current.account_daily_usage_stats\n  WHERE\n    TRUE\n    AND created_at :: DATE = (\n    \n\n    \n        CURRENT_DATE\n    \n - INTERVAL '1 DAY') :: DATE\n)\nSELECT\n  a.subscription_id AS drip_subscription_id,\n  SUM(billable_subscribers_v2) AS drip_email_list_size\nFROM\n  \"dumps\".\"dev\".\"accounts\" a\n  JOIN todays_stats USING (id)\nGROUP BY\n  1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_list_size\""}, "model.drip_data_intelligence.subscriptions_with_store_revenue_attributes": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.account_attributed_revenue", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_store_revenue_attributes"], "unique_id": "model.drip_data_intelligence.subscriptions_with_store_revenue_attributes", "raw_code": "WITH total_account_attributed_revenue AS (\n\tSELECT\n\t\taccount_id AS id\n\t\t, SUM(email_attributed_revenue_USD) AS total_email_attributed_revenue_USD\n\t\t, SUM(sms_attributed_revenue_USD) AS total_sms_attributed_revenue_USD\n\t\t, SUM(total_revenue_USD) AS total_revenue_USD\n\tFROM {{ ref(\"account_attributed_revenue\") }}\n\tGROUP BY account_id\n)\nSELECT\n\ta.subscription_id AS drip_subscription_id\n\t, SUM(total_email_attributed_revenue_USD) AS drip_revenue_rate_attributed_email\n\t, SUM(total_sms_attributed_revenue_USD) AS drip_revenue_rate_attributed_sms\n\t, SUM(total_revenue_USD) AS drip_total_store_revenue\n\t, (drip_revenue_rate_attributed_email + drip_revenue_rate_attributed_sms > 0) AS drip_has_attributed_revenue\n\t, drip_total_store_revenue > 0 AS drip_has_revenue\nFROM {{ ref(\"accounts\") }} a\nJOIN total_account_attributed_revenue USING (id)\nGROUP BY a.subscription_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_store_revenue_attributes.sql", "original_file_path": "models/segment/components/subscriptions_with_store_revenue_attributes.sql", "name": "subscriptions_with_store_revenue_attributes", "alias": "subscriptions_with_store_revenue_attributes", "checksum": {"name": "sha256", "checksum": "f51bc7f35a8469e93d0f3f82b5ef5998a3afee1d8cfb41c7c9b47c552759c037"}, "tags": [], "refs": [["account_attributed_revenue"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_store_revenue_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.814365, "compiled_code": "WITH total_account_attributed_revenue AS (\n\tSELECT\n\t\taccount_id AS id\n\t\t, SUM(email_attributed_revenue_USD) AS total_email_attributed_revenue_USD\n\t\t, SUM(sms_attributed_revenue_USD) AS total_sms_attributed_revenue_USD\n\t\t, SUM(total_revenue_USD) AS total_revenue_USD\n\tFROM \"dumps\".\"dev\".\"account_attributed_revenue\"\n\tGROUP BY account_id\n)\nSELECT\n\ta.subscription_id AS drip_subscription_id\n\t, SUM(total_email_attributed_revenue_USD) AS drip_revenue_rate_attributed_email\n\t, SUM(total_sms_attributed_revenue_USD) AS drip_revenue_rate_attributed_sms\n\t, SUM(total_revenue_USD) AS drip_total_store_revenue\n\t, (drip_revenue_rate_attributed_email + drip_revenue_rate_attributed_sms > 0) AS drip_has_attributed_revenue\n\t, drip_total_store_revenue > 0 AS drip_has_revenue\nFROM \"dumps\".\"dev\".\"accounts\" a\nJOIN total_account_attributed_revenue USING (id)\nGROUP BY a.subscription_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_store_revenue_attributes\""}, "model.drip_data_intelligence.accounts_with_first_registration_date": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.account_events"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_first_registration_date"], "unique_id": "model.drip_data_intelligence.accounts_with_first_registration_date", "raw_code": "SELECT\n    account_id AS drip_account_id,\n    occurred_at :: DATE AS drip_registration_date\nFROM\n    {{ ref(\"account_events\") }}\nWHERE\n    TRUE\n    AND action = 'Registration completed'", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_first_registration_date.sql", "original_file_path": "models/segment/components/accounts_with_first_registration_date.sql", "name": "accounts_with_first_registration_date", "alias": "accounts_with_first_registration_date", "checksum": {"name": "sha256", "checksum": "4a0c039d2832635966b816e3ed632e72f02b3935dc6da5e1302d0e7b6791716e"}, "tags": [], "refs": [["account_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_first_registration_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.817059, "compiled_code": "SELECT\n    account_id AS drip_account_id,\n    occurred_at :: DATE AS drip_registration_date\nFROM\n    \"dumps\".\"dev\".\"account_events\"\nWHERE\n    TRUE\n    AND action = 'Registration completed'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_first_registration_date\""}, "model.drip_data_intelligence.subscriptions_with_trial_start_at": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_trial_start_at"], "unique_id": "model.drip_data_intelligence.subscriptions_with_trial_start_at", "raw_code": "SELECT\n    id AS drip_subscription_id,\n    started_at AS drip_trial_start_date\nFROM\n    {{ ref(\"subscriptions\") }}\nWHERE\n    1 = 1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_trial_start_at.sql", "original_file_path": "models/segment/components/subscriptions_with_trial_start_at.sql", "name": "subscriptions_with_trial_start_at", "alias": "subscriptions_with_trial_start_at", "checksum": {"name": "sha256", "checksum": "efad4f4a3df95df40fcff4c98e02f1282fdfd6e3232588d4bf87c1776a7814e7"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_trial_start_at.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.819998, "compiled_code": "SELECT\n    id AS drip_subscription_id,\n    started_at AS drip_trial_start_date\nFROM\n    \"dumps\".\"dev\".\"subscriptions\"\nWHERE\n    1 = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_trial_start_at\""}, "model.drip_data_intelligence.segment_filtered_users_recently_not_churned": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.drip_data_intelligence.run_date"], "nodes": ["model.drip_data_intelligence.segment_filtered_users"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "segment_filtered_users_recently_not_churned"], "unique_id": "model.drip_data_intelligence.segment_filtered_users_recently_not_churned", "raw_code": "SELECT *\n  FROM {{ ref(\"segment_filtered_users\") }}\n WHERE TRUE\n   AND (\n         segment_filtered_users.subscription_status <> 'churned'\n\n         -- Include churned users who have had a status change in the last 31 days\n         -- All subscriptions eventually get set to `cancelled` in the Monolith and\n         -- we want to make sure that gets overwritten with `churned`\n         OR segment_filtered_users.status_last_changed_at >= {{ run_date() }} - INTERVAL '31 DAYS'\n     )\n   AND segment_filtered_users.created_by_drip_employee = FALSE", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/segment_filtered_users_recently_not_churned.sql", "original_file_path": "models/segment/components/segment_filtered_users_recently_not_churned.sql", "name": "segment_filtered_users_recently_not_churned", "alias": "segment_filtered_users_recently_not_churned", "checksum": {"name": "sha256", "checksum": "d3d24d5e3c86b94f3460a98133faecb5b4a8f400299cf36c956290e7811045ce"}, "tags": [], "refs": [["segment_filtered_users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/segment_filtered_users_recently_not_churned.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.822572, "compiled_code": "SELECT *\n  FROM \"dumps\".\"dev\".\"segment_filtered_users\"\n WHERE TRUE\n   AND (\n         segment_filtered_users.subscription_status <> 'churned'\n\n         -- Include churned users who have had a status change in the last 31 days\n         -- All subscriptions eventually get set to `cancelled` in the Monolith and\n         -- we want to make sure that gets overwritten with `churned`\n         OR segment_filtered_users.status_last_changed_at >= \n    \n\n    \n        CURRENT_DATE\n    \n - INTERVAL '31 DAYS'\n     )\n   AND segment_filtered_users.created_by_drip_employee = FALSE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"segment_filtered_users_recently_not_churned\""}, "model.drip_data_intelligence.accounts_with_legacy_form_activated_events": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.account_events", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_legacy_form_activated_events"], "unique_id": "model.drip_data_intelligence.accounts_with_legacy_form_activated_events", "raw_code": "WITH legacy_form_activated_events AS (\n    SELECT account_id\n         , action\n    FROM {{ ref(\"account_events\") }}\n    WHERE 1 = 1\n      AND action IN (\n                     'Embedded form activated',\n                     'Exit intent form activated',\n                     'Popup form activated',\n                     'SMS form activated',\n                     'Side tab form activated'\n        )\n    )\nSELECT DISTINCT\n     a.id                      account_id\n   , (lfae.action IS NOT NULL) has_legacy_form_activated_event\nFROM {{ ref(\"accounts\") }} a\n     LEFT JOIN legacy_form_activated_events lfae ON a.id = lfae.account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_legacy_form_activated_events.sql", "original_file_path": "models/segment/components/accounts_with_legacy_form_activated_events.sql", "name": "accounts_with_legacy_form_activated_events", "alias": "accounts_with_legacy_form_activated_events", "checksum": {"name": "sha256", "checksum": "dea860a43a99b1d8ecc9800c0d940843d15187fc5c8ea245573e36932d413c0d"}, "tags": [], "refs": [["account_events"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_legacy_form_activated_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.828049, "compiled_code": "WITH legacy_form_activated_events AS (\n    SELECT account_id\n         , action\n    FROM \"dumps\".\"dev\".\"account_events\"\n    WHERE 1 = 1\n      AND action IN (\n                     'Embedded form activated',\n                     'Exit intent form activated',\n                     'Popup form activated',\n                     'SMS form activated',\n                     'Side tab form activated'\n        )\n    )\nSELECT DISTINCT\n     a.id                      account_id\n   , (lfae.action IS NOT NULL) has_legacy_form_activated_event\nFROM \"dumps\".\"dev\".\"accounts\" a\n     LEFT JOIN legacy_form_activated_events lfae ON a.id = lfae.account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_legacy_form_activated_events\""}, "model.drip_data_intelligence.subscriptions_with_active_workflows": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.workflows", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_active_workflows"], "unique_id": "model.drip_data_intelligence.subscriptions_with_active_workflows", "raw_code": "SELECT\n  subscription_id as drip_subscription_id,\n  count(*) AS drip_active_workflows\nFROM\n  {{ ref(\"workflows\") }} w\n  JOIN {{ ref(\"accounts\") }} a\n  ON w.account_id = a.id\nWHERE\n  TRUE\n  AND w.status = 'active'\nGROUP BY\n  subscription_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_active_workflows.sql", "original_file_path": "models/segment/components/subscriptions_with_active_workflows.sql", "name": "subscriptions_with_active_workflows", "alias": "subscriptions_with_active_workflows", "checksum": {"name": "sha256", "checksum": "c9079e0748fdba3b324c76a572021c9ebc87271fb8492f8401a42a7253d1bed8"}, "tags": [], "refs": [["workflows"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_active_workflows.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.830955, "compiled_code": "SELECT\n  subscription_id as drip_subscription_id,\n  count(*) AS drip_active_workflows\nFROM\n  \"dumps\".\"dev\".\"workflows\" w\n  JOIN \"dumps\".\"dev\".\"accounts\" a\n  ON w.account_id = a.id\nWHERE\n  TRUE\n  AND w.status = 'active'\nGROUP BY\n  subscription_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_active_workflows\""}, "model.drip_data_intelligence.subscriptions_with_current_mrr": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_current_mrr"], "unique_id": "model.drip_data_intelligence.subscriptions_with_current_mrr", "raw_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    ROUND(current_mrr :: NUMERIC / 100, 2) AS drip_current_mrr\nFROM\n    public.subscription_metrics_current", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_current_mrr.sql", "original_file_path": "models/segment/components/subscriptions_with_current_mrr.sql", "name": "subscriptions_with_current_mrr", "alias": "subscriptions_with_current_mrr", "checksum": {"name": "sha256", "checksum": "f6fb7c40707d7ac984f005a9a29b418a74c2c72870aa20eb7a0c07b0d1d5ecab"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_current_mrr.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.833678, "compiled_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    ROUND(current_mrr :: NUMERIC / 100, 2) AS drip_current_mrr\nFROM\n    public.subscription_metrics_current", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_current_mrr\""}, "model.drip_data_intelligence.subscriptions_with_success_managers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_success_managers"], "unique_id": "model.drip_data_intelligence.subscriptions_with_success_managers", "raw_code": "SELECT\n  s.id AS drip_subscription_id,\n  CASE\n    WHEN account_manager_id IS NULL THEN FALSE\n    ELSE TRUE\n  END AS drip_success_manager,\n  COALESCE(a.name, 'none') AS drip_success_manager_name\nFROM\n  {{ ref(\"subscriptions\") }} s\n  LEFT JOIN current.admins a\n  ON s.account_manager_id = a.id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_success_managers.sql", "original_file_path": "models/segment/components/subscriptions_with_success_managers.sql", "name": "subscriptions_with_success_managers", "alias": "subscriptions_with_success_managers", "checksum": {"name": "sha256", "checksum": "2d1149dab2fa3d280ff6871e48d0c8bb4a70ff66b8385edafc4fc6ae1c5fbce9"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_success_managers.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.836262, "compiled_code": "SELECT\n  s.id AS drip_subscription_id,\n  CASE\n    WHEN account_manager_id IS NULL THEN FALSE\n    ELSE TRUE\n  END AS drip_success_manager,\n  COALESCE(a.name, 'none') AS drip_success_manager_name\nFROM\n  \"dumps\".\"dev\".\"subscriptions\" s\n  LEFT JOIN current.admins a\n  ON s.account_manager_id = a.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_success_managers\""}, "model.drip_data_intelligence.subscriptions_with_activation_dates": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.current.subscription_details"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_activation_dates"], "unique_id": "model.drip_data_intelligence.subscriptions_with_activation_dates", "raw_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    activated_at :: DATE AS drip_activation_date,\n    activated_week_cohort AS drip_activation_date_cohort_week\nFROM\n    {{ source('current', 'subscription_details') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_activation_dates.sql", "original_file_path": "models/segment/components/subscriptions_with_activation_dates.sql", "name": "subscriptions_with_activation_dates", "alias": "subscriptions_with_activation_dates", "checksum": {"name": "sha256", "checksum": "5a244705c426c7978555d76d80aa17395b103565bbe0acacabeddcc43f1503dc"}, "tags": [], "refs": [], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_activation_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.839472, "compiled_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    activated_at :: DATE AS drip_activation_date,\n    activated_week_cohort AS drip_activation_date_cohort_week\nFROM\n    \"dumps\".\"current\".\"subscription_details\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_activation_dates\""}, "model.drip_data_intelligence.accounts_with_sms_campaigns_sent": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_sms_campaigns_sent"], "unique_id": "model.drip_data_intelligence.accounts_with_sms_campaigns_sent", "raw_code": "WITH sms_campaigns_with_recency AS (\n  SELECT\n    id,\n    account_id,\n    sent_at,\n    (\n      SELECT\n        MAX(sent_at)\n      FROM\n        \"current\".sms_campaigns\n    ) AS max_sent_at,\n    (\n      sent_at > max_sent_at - 30\n    ) AS was_sent_last_30_days,\n    (\n      sent_at > max_sent_at - 7\n    ) AS was_sent_last_7_days\n  FROM\n    \"current\".sms_campaigns\n  WHERE\n    1 = 1\n    AND sent_at IS NOT NULL\n)\nSELECT\n  account_id AS drip_account_id,\n  COUNT(*) AS drip_sms_campaigns_sent_all_time,\n  SUM(\n    was_sent_last_30_days :: INTEGER\n  ) AS drip_sms_campaigns_sent_last_30_days,\n  SUM(\n    was_sent_last_7_days :: INTEGER\n  ) AS drip_sms_campaigns_sent_last_7_days\nFROM\n  sms_campaigns_with_recency\nGROUP BY\n  account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_sms_campaigns_sent.sql", "original_file_path": "models/segment/components/accounts_with_sms_campaigns_sent.sql", "name": "accounts_with_sms_campaigns_sent", "alias": "accounts_with_sms_campaigns_sent", "checksum": {"name": "sha256", "checksum": "f25aec23ba5cd235421b7e1df3b5f515548c75cb31e78d117f6111bc4371d99b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_sms_campaigns_sent.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.842454, "compiled_code": "WITH sms_campaigns_with_recency AS (\n  SELECT\n    id,\n    account_id,\n    sent_at,\n    (\n      SELECT\n        MAX(sent_at)\n      FROM\n        \"current\".sms_campaigns\n    ) AS max_sent_at,\n    (\n      sent_at > max_sent_at - 30\n    ) AS was_sent_last_30_days,\n    (\n      sent_at > max_sent_at - 7\n    ) AS was_sent_last_7_days\n  FROM\n    \"current\".sms_campaigns\n  WHERE\n    1 = 1\n    AND sent_at IS NOT NULL\n)\nSELECT\n  account_id AS drip_account_id,\n  COUNT(*) AS drip_sms_campaigns_sent_all_time,\n  SUM(\n    was_sent_last_30_days :: INTEGER\n  ) AS drip_sms_campaigns_sent_last_30_days,\n  SUM(\n    was_sent_last_7_days :: INTEGER\n  ) AS drip_sms_campaigns_sent_last_7_days\nFROM\n  sms_campaigns_with_recency\nGROUP BY\n  account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_sms_campaigns_sent\""}, "model.drip_data_intelligence.subscriptions_with_sku_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_sku_count"], "unique_id": "model.drip_data_intelligence.subscriptions_with_sku_count", "raw_code": "SELECT\n  a.subscription_id AS drip_subscription_id,\n  count(*) AS drip_sku_count\nFROM\n  current.products p\n  JOIN {{ ref(\"accounts\") }} a\n  ON p.account_id = a.public_id\nGROUP BY\n  a.subscription_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_sku_count.sql", "original_file_path": "models/segment/components/subscriptions_with_sku_count.sql", "name": "subscriptions_with_sku_count", "alias": "subscriptions_with_sku_count", "checksum": {"name": "sha256", "checksum": "19df309e6761e1029ed4447f0f5d4d6026d1673af28eb0a2c7a22b93093bffa3"}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_sku_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.845052, "compiled_code": "SELECT\n  a.subscription_id AS drip_subscription_id,\n  count(*) AS drip_sku_count\nFROM\n  current.products p\n  JOIN \"dumps\".\"dev\".\"accounts\" a\n  ON p.account_id = a.public_id\nGROUP BY\n  a.subscription_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_sku_count\""}, "model.drip_data_intelligence.marketing_subscription_status": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.marketing_subscription_status_audit"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "marketing_subscription_status"], "unique_id": "model.drip_data_intelligence.marketing_subscription_status", "raw_code": "SELECT DISTINCT -- TODO: Kludge. Figure out why we're getting duplicates.\n    subject_id AS drip_subscription_id,\n    final_status AS subscription_status,\n    status_last_changed_at\nFROM\n    {{ ref('marketing_subscription_status_audit') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/marketing_subscription_status.sql", "original_file_path": "models/segment/components/marketing_subscription_status.sql", "name": "marketing_subscription_status", "alias": "marketing_subscription_status", "checksum": {"name": "sha256", "checksum": "448cf8a0ef074221667d312169e0cd55c6d235694a890ce546629a1e3a2ab49b"}, "tags": [], "refs": [["marketing_subscription_status_audit"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/marketing_subscription_status.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.847657, "compiled_code": "SELECT DISTINCT -- TODO: Kludge. Figure out why we're getting duplicates.\n    subject_id AS drip_subscription_id,\n    final_status AS subscription_status,\n    status_last_changed_at\nFROM\n    \"dumps\".\"dev\".\"marketing_subscription_status_audit\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"marketing_subscription_status\""}, "model.drip_data_intelligence.accounts_with_first_email_sent": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_first_email_sent"], "unique_id": "model.drip_data_intelligence.accounts_with_first_email_sent", "raw_code": "SELECT\n    account_id AS drip_account_id,\n    action\nFROM\n    current.delivery_events\nWHERE\n    1 = 1\n    AND action = 'deliver'\n    AND year >= 2021\nGROUP BY\n    account_id,\n    action", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_first_email_sent.sql", "original_file_path": "models/segment/components/accounts_with_first_email_sent.sql", "name": "accounts_with_first_email_sent", "alias": "accounts_with_first_email_sent", "checksum": {"name": "sha256", "checksum": "44b601d83168ee7f3c3689ffa371bfdc1e62697093fa461955179b8b0dd42285"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_first_email_sent.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.8503208, "compiled_code": "SELECT\n    account_id AS drip_account_id,\n    action\nFROM\n    current.delivery_events\nWHERE\n    1 = 1\n    AND action = 'deliver'\n    AND year >= 2021\nGROUP BY\n    account_id,\n    action", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_first_email_sent\""}, "model.drip_data_intelligence.accounts_with_oms_indicated_provider": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.account_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_oms_indicated_provider"], "unique_id": "model.drip_data_intelligence.accounts_with_oms_indicated_provider", "raw_code": "SELECT\n    account_id AS drip_account_id,\n    LOWER(oms_indicated) AS drip_oms_indicated_provider\nFROM\n    {{ ref(\"account_metrics_current\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_oms_indicated_provider.sql", "original_file_path": "models/segment/components/accounts_with_oms_indicated_provider.sql", "name": "accounts_with_oms_indicated_provider", "alias": "accounts_with_oms_indicated_provider", "checksum": {"name": "sha256", "checksum": "f95d2aa176f1ef6ac3765be73437ad8a28b84be30f9bb8b7becb3667a17c6fb0"}, "tags": [], "refs": [["account_metrics_current"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_oms_indicated_provider.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.852984, "compiled_code": "SELECT\n    account_id AS drip_account_id,\n    LOWER(oms_indicated) AS drip_oms_indicated_provider\nFROM\n    \"dumps\".\"dev\".\"account_metrics_current\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_oms_indicated_provider\""}, "model.drip_data_intelligence.subscriptions_with_user_counts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.memberships"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_user_counts"], "unique_id": "model.drip_data_intelligence.subscriptions_with_user_counts", "raw_code": "SELECT\n  s.id AS drip_subscription_id,\n  count(\n    distinct m.account_id\n  ) AS drip_users_count\nFROM\n  {{ ref(\"subscriptions\") }} s\n  LEFT JOIN {{ ref(\"memberships\") }} m\n  ON s.user_id = m.user_id\nGROUP BY\n  s.id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_user_counts.sql", "original_file_path": "models/segment/components/subscriptions_with_user_counts.sql", "name": "subscriptions_with_user_counts", "alias": "subscriptions_with_user_counts", "checksum": {"name": "sha256", "checksum": "d81d88c76c18ea3f9a4ad4c375620377a6c4760b1a338dedec736de83da1326b"}, "tags": [], "refs": [["subscriptions"], ["memberships"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_user_counts.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.8557792, "compiled_code": "SELECT\n  s.id AS drip_subscription_id,\n  count(\n    distinct m.account_id\n  ) AS drip_users_count\nFROM\n  \"dumps\".\"dev\".\"subscriptions\" s\n  LEFT JOIN \"dumps\".\"dev\".\"memberships\" m\n  ON s.user_id = m.user_id\nGROUP BY\n  s.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_user_counts\""}, "model.drip_data_intelligence.num_accounts_connected_to_subscription": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "num_accounts_connected_to_subscription"], "unique_id": "model.drip_data_intelligence.num_accounts_connected_to_subscription", "raw_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    count(id) AS drip_accounts_connected_subscription\nFROM\n    {{ ref(\"accounts\") }}\nGROUP BY\n    drip_subscription_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/num_accounts_connected_to_subscription.sql", "original_file_path": "models/segment/components/num_accounts_connected_to_subscription.sql", "name": "num_accounts_connected_to_subscription", "alias": "num_accounts_connected_to_subscription", "checksum": {"name": "sha256", "checksum": "c6a19664cb228ebadd610ee1431fec876da01bab7f7211810067e6efeb53e550"}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/num_accounts_connected_to_subscription.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.8585112, "compiled_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    count(id) AS drip_accounts_connected_subscription\nFROM\n    \"dumps\".\"dev\".\"accounts\"\nGROUP BY\n    drip_subscription_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"num_accounts_connected_to_subscription\""}, "model.drip_data_intelligence.marketing_subscription_status_audit": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "marketing_subscription_status_audit"], "unique_id": "model.drip_data_intelligence.marketing_subscription_status_audit", "raw_code": "WITH setting_up_subscriptions AS (\n    SELECT\n        id AS subject_id,\n        NULL AS \"from\",\n        'setting_up' AS \"to\",\n        created_at\n    FROM\n        {{ ref(\"subscriptions\") }}\n    WHERE\n        TRUE\n        AND status = 'setting_up'\n),\nstate_transitions_combined AS (\n    SELECT\n        subject_id,\n        \"from\",\n        \"to\",\n        created_at\n    FROM\n        data_intelligence.subscription_state_transitions\n    WHERE\n        TRUE\n        AND \"to\" NOT LIKE 'trust%'\n        AND \"from\" NOT LIKE 'trust%'\n    UNION\n    ALL\n    SELECT\n        *\n    FROM\n        setting_up_subscriptions\n),\nstate_transitions_ranked AS (\n    SELECT\n        subject_id,\n        \"to\",\n        \"from\",\n        created_at,\n        DENSE_RANK() OVER (\n            PARTITION BY subject_id\n            ORDER BY\n                created_at DESC\n        ) AS state_transitions_order\n    FROM\n        state_transitions_combined\n),\ntrust_statuses_ranked AS (\n    SELECT\n        subject_id,\n        \"to\",\n        \"from\",\n        created_at,\n        DENSE_RANK() OVER (\n            PARTITION BY subject_id\n            ORDER BY\n                created_at DESC\n        ) AS trust_status_order\n    FROM\n        data_intelligence.subscription_state_transitions\n    WHERE\n        TRUE\n        AND \"to\" LIKE 'trust%'\n        AND \"from\" LIKE 'trust%'\n),\nlast_state_transition AS (\n    SELECT\n        subject_id,\n        \"from\" AS last_status_from,\n        \"to\" AS last_status_to,\n        created_at\n    FROM\n        state_transitions_ranked\n    WHERE\n        TRUE\n        AND state_transitions_order = 1\n),\nlast_trust_transition AS (\n    SELECT\n        subject_id,\n        created_at,\n        \"from\" AS last_trust_status_from,\n        \"to\" AS last_trust_status_to\n    FROM\n        trust_statuses_ranked\n    WHERE\n        TRUE\n        AND trust_status_order = 1\n),\ndays_between_penultimate_and_ultimate_state_transition AS (\n    SELECT\n        subject_id,\n        DATEDIFF(\n            'day',\n            penultimate.created_at,\n            ultimate.created_at\n        ) AS days_between_state_change\n    FROM\n        last_state_transition AS ultimate\n        JOIN (\n            SELECT\n                subject_id,\n                \"from\" AS last_status_from,\n                \"to\" AS last_status_to,\n                created_at\n            FROM\n                state_transitions_ranked\n            WHERE\n                TRUE\n                AND state_transitions_order = 2\n        ) AS penultimate USING (subject_id)\n),\ndays_between_penultimate_and_ultimate_trust_transition AS (\n    SELECT\n        subject_id,\n        DATEDIFF(\n            'day',\n            penultimate.created_at,\n            ultimate.created_at\n        ) AS days_between_trust_change\n    FROM\n        last_trust_transition AS ultimate\n        JOIN (\n            SELECT\n                subject_id,\n                \"from\" AS last_status_from,\n                \"to\" AS last_status_to,\n                created_at\n            FROM\n                trust_statuses_ranked\n            WHERE\n                TRUE\n                AND trust_status_order = 2\n        ) AS penultimate USING (subject_id)\n)\nSELECT\n    subject_id,\n    last_status_from,\n    last_status_to,\n    lst.created_at as status_last_changed_at,\n    last_trust_status_from,\n    last_trust_status_to,\n    days_between_state_change,\n    days_between_trust_change,\n    CASE\n        WHEN (\n            last_trust_status_to = 'trust.banned'\n            OR last_trust_status_to = 'trust.blocked'\n        )\n        AND days_between_trust_change NOT IN (89, 90, 91) THEN -- Check for 90 day block/ban\n        'banned'\n        ELSE NULL\n    END AS is_banned_or_blocked -- Anyone legitimately banned or blocked should have a status of 'banned' (COALESCE BELOW)\n,\n    CASE\n        WHEN last_status_from = 'trial_expired'\n        AND last_status_to = 'cancelled'\n        AND days_between_state_change IN(13, 14, 15) THEN -- check for 14 day auto cancellation\n        'trial_expired'\n        ELSE NULL\n    END AS had_trial_expire -- If they aren't banned and the last legitimate status was trial_expired, they are trial expired (COALESCE BELOW)\n,\n    CASE\n        WHEN last_status_to = 'cancelled' THEN 'churned'\n        ELSE last_status_to\n    END AS cancelled_to_churned,\n    COALESCE(\n        is_banned_or_blocked,\n        had_trial_expire,\n        cancelled_to_churned\n    ) AS final_status\nFROM\n    last_state_transition lst\n    LEFT JOIN last_trust_transition ltt USING (subject_id)\n    LEFT JOIN days_between_penultimate_and_ultimate_state_transition USING (subject_id)\n    LEFT JOIN days_between_penultimate_and_ultimate_trust_transition USING (subject_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/marketing_subscription_status_audit.sql", "original_file_path": "models/segment/components/marketing_subscription_status_audit.sql", "name": "marketing_subscription_status_audit", "alias": "marketing_subscription_status_audit", "checksum": {"name": "sha256", "checksum": "0b088a3097707717d5a4727a3648abb0dd7366862c501db8b0747ac52b74c064"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/marketing_subscription_status_audit.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.861123, "compiled_code": "WITH setting_up_subscriptions AS (\n    SELECT\n        id AS subject_id,\n        NULL AS \"from\",\n        'setting_up' AS \"to\",\n        created_at\n    FROM\n        \"dumps\".\"dev\".\"subscriptions\"\n    WHERE\n        TRUE\n        AND status = 'setting_up'\n),\nstate_transitions_combined AS (\n    SELECT\n        subject_id,\n        \"from\",\n        \"to\",\n        created_at\n    FROM\n        data_intelligence.subscription_state_transitions\n    WHERE\n        TRUE\n        AND \"to\" NOT LIKE 'trust%'\n        AND \"from\" NOT LIKE 'trust%'\n    UNION\n    ALL\n    SELECT\n        *\n    FROM\n        setting_up_subscriptions\n),\nstate_transitions_ranked AS (\n    SELECT\n        subject_id,\n        \"to\",\n        \"from\",\n        created_at,\n        DENSE_RANK() OVER (\n            PARTITION BY subject_id\n            ORDER BY\n                created_at DESC\n        ) AS state_transitions_order\n    FROM\n        state_transitions_combined\n),\ntrust_statuses_ranked AS (\n    SELECT\n        subject_id,\n        \"to\",\n        \"from\",\n        created_at,\n        DENSE_RANK() OVER (\n            PARTITION BY subject_id\n            ORDER BY\n                created_at DESC\n        ) AS trust_status_order\n    FROM\n        data_intelligence.subscription_state_transitions\n    WHERE\n        TRUE\n        AND \"to\" LIKE 'trust%'\n        AND \"from\" LIKE 'trust%'\n),\nlast_state_transition AS (\n    SELECT\n        subject_id,\n        \"from\" AS last_status_from,\n        \"to\" AS last_status_to,\n        created_at\n    FROM\n        state_transitions_ranked\n    WHERE\n        TRUE\n        AND state_transitions_order = 1\n),\nlast_trust_transition AS (\n    SELECT\n        subject_id,\n        created_at,\n        \"from\" AS last_trust_status_from,\n        \"to\" AS last_trust_status_to\n    FROM\n        trust_statuses_ranked\n    WHERE\n        TRUE\n        AND trust_status_order = 1\n),\ndays_between_penultimate_and_ultimate_state_transition AS (\n    SELECT\n        subject_id,\n        DATEDIFF(\n            'day',\n            penultimate.created_at,\n            ultimate.created_at\n        ) AS days_between_state_change\n    FROM\n        last_state_transition AS ultimate\n        JOIN (\n            SELECT\n                subject_id,\n                \"from\" AS last_status_from,\n                \"to\" AS last_status_to,\n                created_at\n            FROM\n                state_transitions_ranked\n            WHERE\n                TRUE\n                AND state_transitions_order = 2\n        ) AS penultimate USING (subject_id)\n),\ndays_between_penultimate_and_ultimate_trust_transition AS (\n    SELECT\n        subject_id,\n        DATEDIFF(\n            'day',\n            penultimate.created_at,\n            ultimate.created_at\n        ) AS days_between_trust_change\n    FROM\n        last_trust_transition AS ultimate\n        JOIN (\n            SELECT\n                subject_id,\n                \"from\" AS last_status_from,\n                \"to\" AS last_status_to,\n                created_at\n            FROM\n                trust_statuses_ranked\n            WHERE\n                TRUE\n                AND trust_status_order = 2\n        ) AS penultimate USING (subject_id)\n)\nSELECT\n    subject_id,\n    last_status_from,\n    last_status_to,\n    lst.created_at as status_last_changed_at,\n    last_trust_status_from,\n    last_trust_status_to,\n    days_between_state_change,\n    days_between_trust_change,\n    CASE\n        WHEN (\n            last_trust_status_to = 'trust.banned'\n            OR last_trust_status_to = 'trust.blocked'\n        )\n        AND days_between_trust_change NOT IN (89, 90, 91) THEN -- Check for 90 day block/ban\n        'banned'\n        ELSE NULL\n    END AS is_banned_or_blocked -- Anyone legitimately banned or blocked should have a status of 'banned' (COALESCE BELOW)\n,\n    CASE\n        WHEN last_status_from = 'trial_expired'\n        AND last_status_to = 'cancelled'\n        AND days_between_state_change IN(13, 14, 15) THEN -- check for 14 day auto cancellation\n        'trial_expired'\n        ELSE NULL\n    END AS had_trial_expire -- If they aren't banned and the last legitimate status was trial_expired, they are trial expired (COALESCE BELOW)\n,\n    CASE\n        WHEN last_status_to = 'cancelled' THEN 'churned'\n        ELSE last_status_to\n    END AS cancelled_to_churned,\n    COALESCE(\n        is_banned_or_blocked,\n        had_trial_expire,\n        cancelled_to_churned\n    ) AS final_status\nFROM\n    last_state_transition lst\n    LEFT JOIN last_trust_transition ltt USING (subject_id)\n    LEFT JOIN days_between_penultimate_and_ultimate_state_transition USING (subject_id)\n    LEFT JOIN days_between_penultimate_and_ultimate_trust_transition USING (subject_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"marketing_subscription_status_audit\""}, "model.drip_data_intelligence.subscriptions_with_financial_statuses": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.drip_data_intelligence.run_date"], "nodes": ["model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_financial_statuses"], "unique_id": "model.drip_data_intelligence.subscriptions_with_financial_statuses", "raw_code": "WITH transactions_ranked_by_date_desc AS (\n    SELECT\n        s.id,\n        t.created_at,\n        t.amount,\n        DENSE_RANK() OVER (\n            PARTITION BY s.id\n            ORDER BY\n                t.created_at DESC\n        ) as transaction_date_rank_desc\n    FROM\n        {{ ref(\"subscriptions\") }} s\n        JOIN {{ ref(\"transactions\") }} t ON s.id = t.subscription_id\n),\nlast_transaction AS (\n    SELECT\n        id as drip_subscription_id,\n        amount AS last_transaction_amount,\n        created_at AS last_transaction_date\n    FROM\n        transactions_ranked_by_date_desc\n    WHERE\n        TRUE\n        AND transaction_date_rank_desc = 1\n)\nSELECT\n    drip_subscription_id,\n    CASE\n        WHEN last_transaction_date > ({{ run_date() }} - INTERVAL '31 DAYS') THEN TRUE\n        ELSE FALSE\n    END AS paid_in_the_last_30_days,\n    CASE\n        WHEN last_transaction_amount > 0 THEN TRUE\n        ELSE FALSE\n    END AS last_payment_amount_greater_than_0\nFROM\n    last_transaction", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_financial_statuses.sql", "original_file_path": "models/segment/components/subscriptions_with_financial_statuses.sql", "name": "subscriptions_with_financial_statuses", "alias": "subscriptions_with_financial_statuses", "checksum": {"name": "sha256", "checksum": "673fede2740e411817420eb742f1e4809e9f7ecaeaa281118ab59f3dd9c69879"}, "tags": [], "refs": [["subscriptions"], ["transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_financial_statuses.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.863809, "compiled_code": "WITH transactions_ranked_by_date_desc AS (\n    SELECT\n        s.id,\n        t.created_at,\n        t.amount,\n        DENSE_RANK() OVER (\n            PARTITION BY s.id\n            ORDER BY\n                t.created_at DESC\n        ) as transaction_date_rank_desc\n    FROM\n        \"dumps\".\"dev\".\"subscriptions\" s\n        JOIN \"dumps\".\"dev\".\"transactions\" t ON s.id = t.subscription_id\n),\nlast_transaction AS (\n    SELECT\n        id as drip_subscription_id,\n        amount AS last_transaction_amount,\n        created_at AS last_transaction_date\n    FROM\n        transactions_ranked_by_date_desc\n    WHERE\n        TRUE\n        AND transaction_date_rank_desc = 1\n)\nSELECT\n    drip_subscription_id,\n    CASE\n        WHEN last_transaction_date > (\n    \n\n    \n        CURRENT_DATE\n    \n - INTERVAL '31 DAYS') THEN TRUE\n        ELSE FALSE\n    END AS paid_in_the_last_30_days,\n    CASE\n        WHEN last_transaction_amount > 0 THEN TRUE\n        ELSE FALSE\n    END AS last_payment_amount_greater_than_0\nFROM\n    last_transaction", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_financial_statuses\""}, "model.drip_data_intelligence.users_with_last_login_date": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.users"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "users_with_last_login_date"], "unique_id": "model.drip_data_intelligence.users_with_last_login_date", "raw_code": "SELECT\n    id as drip_user_id,\n    DATE_TRUNC('day', last_logged_in_at) as drip_last_login_date\nFROM\n    {{ ref(\"users\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/users_with_last_login_date.sql", "original_file_path": "models/segment/components/users_with_last_login_date.sql", "name": "users_with_last_login_date", "alias": "users_with_last_login_date", "checksum": {"name": "sha256", "checksum": "48e39e8477c3609868f09bf2500463d41faf46514eb01079443ed6163797c1d3"}, "tags": [], "refs": [["users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/users_with_last_login_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.8698702, "compiled_code": "SELECT\n    id as drip_user_id,\n    DATE_TRUNC('day', last_logged_in_at) as drip_last_login_date\nFROM\n    \"dumps\".\"dev\".\"users\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"users_with_last_login_date\""}, "model.drip_data_intelligence.accounts_with_first_person_added": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.account_events"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_first_person_added"], "unique_id": "model.drip_data_intelligence.accounts_with_first_person_added", "raw_code": "SELECT\n    account_id AS drip_account_id,\n    action\nFROM\n    {{ ref(\"account_events\") }}\nWHERE\n    1 = 1\n    and action = 'First person added'", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_first_person_added.sql", "original_file_path": "models/segment/components/accounts_with_first_person_added.sql", "name": "accounts_with_first_person_added", "alias": "accounts_with_first_person_added", "checksum": {"name": "sha256", "checksum": "e481ade80183eefe134cf32d6b1de6ca5f4c6c214426d3804e2688c307e9d8d9"}, "tags": [], "refs": [["account_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_first_person_added.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.872457, "compiled_code": "SELECT\n    account_id AS drip_account_id,\n    action\nFROM\n    \"dumps\".\"dev\".\"account_events\"\nWHERE\n    1 = 1\n    and action = 'First person added'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_first_person_added\""}, "model.drip_data_intelligence.accounts_with_has_ever_connected_oms": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_has_ever_connected_oms"], "unique_id": "model.drip_data_intelligence.accounts_with_has_ever_connected_oms", "raw_code": "WITH accounts_with_oms_integration_events AS (\n    SELECT\n        distinct acc.id\n        , 1 AS has_oms_integration_events\n    FROM current.integrations AS inte\n    JOIN {{ ref(\"accounts\") }} acc\n        ON inte.account_param = acc.public_id\n    WHERE\n        1 = 1\n    AND provider_param IN (\n        'magento',\n        'bigcommerce',\n        'drip_woocommerce',\n        'shopify'\n    )\n)\nSELECT\n    acc.id AS drip_account_id\n    , CASE WHEN has_oms_integration_events = 1 THEN TRUE ELSE FALSE END AS drip_has_ever_connected_oms\nFROM {{ ref(\"accounts\") }} acc\nLEFT JOIN accounts_with_oms_integration_events USING (id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_has_ever_connected_oms.sql", "original_file_path": "models/segment/components/accounts_with_has_ever_connected_oms.sql", "name": "accounts_with_has_ever_connected_oms", "alias": "accounts_with_has_ever_connected_oms", "checksum": {"name": "sha256", "checksum": "850773cb2b764f975d684446f9aaf2a6e75955df63d3808d976942f201d820b8"}, "tags": [], "refs": [["accounts"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_has_ever_connected_oms.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.875245, "compiled_code": "WITH accounts_with_oms_integration_events AS (\n    SELECT\n        distinct acc.id\n        , 1 AS has_oms_integration_events\n    FROM current.integrations AS inte\n    JOIN \"dumps\".\"dev\".\"accounts\" acc\n        ON inte.account_param = acc.public_id\n    WHERE\n        1 = 1\n    AND provider_param IN (\n        'magento',\n        'bigcommerce',\n        'drip_woocommerce',\n        'shopify'\n    )\n)\nSELECT\n    acc.id AS drip_account_id\n    , CASE WHEN has_oms_integration_events = 1 THEN TRUE ELSE FALSE END AS drip_has_ever_connected_oms\nFROM \"dumps\".\"dev\".\"accounts\" acc\nLEFT JOIN accounts_with_oms_integration_events USING (id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_has_ever_connected_oms\""}, "model.drip_data_intelligence.subscriptions_with_trust_status": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_trust_status"], "unique_id": "model.drip_data_intelligence.subscriptions_with_trust_status", "raw_code": "SELECT\n    user_id AS drip_user_id,\n    trust_status AS drip_trust_status\nFROM\n    {{ ref(\"subscriptions\") }}\nWHERE\n    1 = 1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_trust_status.sql", "original_file_path": "models/segment/components/subscriptions_with_trust_status.sql", "name": "subscriptions_with_trust_status", "alias": "subscriptions_with_trust_status", "checksum": {"name": "sha256", "checksum": "5573cf025396e78de9062d63ddff6e17f432d49085acfba3b81bbe74869c2cf5"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_trust_status.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.877971, "compiled_code": "SELECT\n    user_id AS drip_user_id,\n    trust_status AS drip_trust_status\nFROM\n    \"dumps\".\"dev\".\"subscriptions\"\nWHERE\n    1 = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_trust_status\""}, "model.drip_data_intelligence.subscriptions_with_company_information": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.users", "model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_company_information"], "unique_id": "model.drip_data_intelligence.subscriptions_with_company_information", "raw_code": "WITH active_accounts_ranked_by_date AS (\n  SELECT\n    subscription_id,\n    name,\n    url,\n    DENSE_RANK() OVER (\n      PARTITION BY subscription_id\n      ORDER BY\n        created_at\n    ) AS account_creation_order\n  FROM\n    {{ ref(\"accounts\") }}\n),\nfirst_active_account_with_information AS (\n  SELECT\n    subscription_id,\n    name as company,\n    url as website\n  FROM\n    active_accounts_ranked_by_date\n  WHERE\n    TRUE\n    AND account_creation_order = 1\n),\nusers_with_information AS (\n  SELECT\n    id AS user_id,\n    name,\n    split_part(name, ' ', 1) AS firstname,\n    split_part(name, ' ', 2) AS lastname\n  FROM\n    {{ ref(\"users\") }}\n),\nfinal AS (\n  SELECT\n    s.id AS drip_subscription_id,\n    name,\n    firstname,\n    lastname,\n    company,\n    website\n  FROM\n    {{ ref(\"subscriptions\") }} s\n    JOIN users_with_information USING (user_id)\n    JOIN first_active_account_with_information faa ON s.id = faa.subscription_id\n)\nSELECT\n  drip_subscription_id,\n  firstname,\n  lastname,\n  company,\n  website\nFROM\n  final", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_company_information.sql", "original_file_path": "models/segment/components/subscriptions_with_company_information.sql", "name": "subscriptions_with_company_information", "alias": "subscriptions_with_company_information", "checksum": {"name": "sha256", "checksum": "b4e2a384f7a6981a8b040b2ab475c8fad058771d22a5428391eb581dd9d1dc3d"}, "tags": [], "refs": [["accounts"], ["users"], ["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_company_information.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.880565, "compiled_code": "WITH active_accounts_ranked_by_date AS (\n  SELECT\n    subscription_id,\n    name,\n    url,\n    DENSE_RANK() OVER (\n      PARTITION BY subscription_id\n      ORDER BY\n        created_at\n    ) AS account_creation_order\n  FROM\n    \"dumps\".\"dev\".\"accounts\"\n),\nfirst_active_account_with_information AS (\n  SELECT\n    subscription_id,\n    name as company,\n    url as website\n  FROM\n    active_accounts_ranked_by_date\n  WHERE\n    TRUE\n    AND account_creation_order = 1\n),\nusers_with_information AS (\n  SELECT\n    id AS user_id,\n    name,\n    split_part(name, ' ', 1) AS firstname,\n    split_part(name, ' ', 2) AS lastname\n  FROM\n    \"dumps\".\"dev\".\"users\"\n),\nfinal AS (\n  SELECT\n    s.id AS drip_subscription_id,\n    name,\n    firstname,\n    lastname,\n    company,\n    website\n  FROM\n    \"dumps\".\"dev\".\"subscriptions\" s\n    JOIN users_with_information USING (user_id)\n    JOIN first_active_account_with_information faa ON s.id = faa.subscription_id\n)\nSELECT\n  drip_subscription_id,\n  firstname,\n  lastname,\n  company,\n  website\nFROM\n  final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_company_information\""}, "model.drip_data_intelligence.subscriptions_with_industries": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_industries"], "unique_id": "model.drip_data_intelligence.subscriptions_with_industries", "raw_code": "WITH industries_ranked AS (\n    SELECT\n        aic.created_at\n        , subs.id AS drip_subscription_id\n        , subs.user_id\n        , ic.display_name AS drip_manually_enriched_industry\n        , sc.display_name AS drip_manually_enriched_subindustry\n        , ROW_NUMBER() OVER (PARTITION BY drip_subscription_id ORDER BY aic.created_at DESC) AS industry_ranked_by_time_desc\n    FROM current.account_industry_categories aic\n    JOIN current.industry_categories ic\n        ON aic.industry_category_id = ic.id\n    JOIN current.industry_subcategories sc\n        ON aic.industry_category_id = sc.id\n    RIGHT JOIN {{ ref(\"subscriptions\") }} subs\n        ON subs.user_id = aic.user_id\n    WHERE TRUE\n        AND ic.display_name IS NOT NULL\n)\nSELECT\n    drip_subscription_id\n    , user_id\n    , drip_manually_enriched_industry\n    , drip_manually_enriched_subindustry\nFROM industries_ranked\nWHERE TRUE\n    AND industry_ranked_by_time_desc = 1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_industries.sql", "original_file_path": "models/segment/components/subscriptions_with_industries.sql", "name": "subscriptions_with_industries", "alias": "subscriptions_with_industries", "checksum": {"name": "sha256", "checksum": "ee71750825d26e8648d0e3e7e8ba1d0ed8b10788e8702300f49b5a72d66f624b"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_industries.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.883581, "compiled_code": "WITH industries_ranked AS (\n    SELECT\n        aic.created_at\n        , subs.id AS drip_subscription_id\n        , subs.user_id\n        , ic.display_name AS drip_manually_enriched_industry\n        , sc.display_name AS drip_manually_enriched_subindustry\n        , ROW_NUMBER() OVER (PARTITION BY drip_subscription_id ORDER BY aic.created_at DESC) AS industry_ranked_by_time_desc\n    FROM current.account_industry_categories aic\n    JOIN current.industry_categories ic\n        ON aic.industry_category_id = ic.id\n    JOIN current.industry_subcategories sc\n        ON aic.industry_category_id = sc.id\n    RIGHT JOIN \"dumps\".\"dev\".\"subscriptions\" subs\n        ON subs.user_id = aic.user_id\n    WHERE TRUE\n        AND ic.display_name IS NOT NULL\n)\nSELECT\n    drip_subscription_id\n    , user_id\n    , drip_manually_enriched_industry\n    , drip_manually_enriched_subindustry\nFROM industries_ranked\nWHERE TRUE\n    AND industry_ranked_by_time_desc = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_industries\""}, "model.drip_data_intelligence.accounts_with_email_campaigns_sent": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_email_campaigns_sent"], "unique_id": "model.drip_data_intelligence.accounts_with_email_campaigns_sent", "raw_code": "SELECT\n  account_id AS drip_account_id,\n  campaigns_sent_total AS drip_email_campaigns_sent_all_time,\n  campaigns_sent_7_days AS drip_email_campaigns_sent_last_7_days,\n  campaigns_sent_30_days AS drip_email_campaigns_sent_last_30_days\nFROM\n  data_intelligence.product_usage_snapshot_most_recent_day", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_email_campaigns_sent.sql", "original_file_path": "models/segment/components/accounts_with_email_campaigns_sent.sql", "name": "accounts_with_email_campaigns_sent", "alias": "accounts_with_email_campaigns_sent", "checksum": {"name": "sha256", "checksum": "0836a8f773fa83a970c7912c49936cd7f5b8b6e08b6dbdeff77a51fb8340ec39"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_email_campaigns_sent.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.8865879, "compiled_code": "SELECT\n  account_id AS drip_account_id,\n  campaigns_sent_total AS drip_email_campaigns_sent_all_time,\n  campaigns_sent_7_days AS drip_email_campaigns_sent_last_7_days,\n  campaigns_sent_30_days AS drip_email_campaigns_sent_last_30_days\nFROM\n  data_intelligence.product_usage_snapshot_most_recent_day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_email_campaigns_sent\""}, "model.drip_data_intelligence.accounts_with_workflow_enabled": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.account_events"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "accounts_with_workflow_enabled"], "unique_id": "model.drip_data_intelligence.accounts_with_workflow_enabled", "raw_code": "SELECT\n    account_id AS drip_account_id,\n    action\nFROM\n    {{ ref(\"account_events\") }}\nWHERE\n    1 = 1\n    and action IN (\n        'Abandoned browse workflow activated',\n        'Abandoned cart workflow activated',\n        'Post first purchase workflow activated',\n        'Post repeat purchase workflow activated',\n        'Post-purchase workflow activated',\n        'Welcome workflow activated',\n        'Win-back workflow activated'\n    )", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/accounts_with_workflow_enabled.sql", "original_file_path": "models/segment/components/accounts_with_workflow_enabled.sql", "name": "accounts_with_workflow_enabled", "alias": "accounts_with_workflow_enabled", "checksum": {"name": "sha256", "checksum": "560c3cc683e3da5122cb801daa13c40791217290db4856f7d397421f24442639"}, "tags": [], "refs": [["account_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/accounts_with_workflow_enabled.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.889078, "compiled_code": "SELECT\n    account_id AS drip_account_id,\n    action\nFROM\n    \"dumps\".\"dev\".\"account_events\"\nWHERE\n    1 = 1\n    and action IN (\n        'Abandoned browse workflow activated',\n        'Abandoned cart workflow activated',\n        'Post first purchase workflow activated',\n        'Post repeat purchase workflow activated',\n        'Post-purchase workflow activated',\n        'Welcome workflow activated',\n        'Win-back workflow activated'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"accounts_with_workflow_enabled\""}, "model.drip_data_intelligence.subscriptions_with_pricing_amounts": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_pricing_amounts"], "unique_id": "model.drip_data_intelligence.subscriptions_with_pricing_amounts", "raw_code": "SELECT\n    id AS drip_subscription_id,\n    ROUND(amount :: NUMERIC / 100, 2) AS drip_pricing_amount\nFROM\n    {{ ref(\"subscriptions\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_pricing_amounts.sql", "original_file_path": "models/segment/components/subscriptions_with_pricing_amounts.sql", "name": "subscriptions_with_pricing_amounts", "alias": "subscriptions_with_pricing_amounts", "checksum": {"name": "sha256", "checksum": "37342ef5df8f3c0388f3d1468a871c2eb53dd9ffaaf31b018295cd0b5ffc6893"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_pricing_amounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.891746, "compiled_code": "SELECT\n    id AS drip_subscription_id,\n    ROUND(amount :: NUMERIC / 100, 2) AS drip_pricing_amount\nFROM\n    \"dumps\".\"dev\".\"subscriptions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_pricing_amounts\""}, "model.drip_data_intelligence.subscriptions_with_last_payments": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "segment", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "components", "subscriptions_with_last_payments"], "unique_id": "model.drip_data_intelligence.subscriptions_with_last_payments", "raw_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    MAX(created_at) :: DATE AS drip_last_payment_date\nFROM\n    {{ ref(\"transactions\") }}\nWHERE\n    TRUE\n    AND status = 'paid'\nGROUP BY\n    drip_subscription_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "segment/components/subscriptions_with_last_payments.sql", "original_file_path": "models/segment/components/subscriptions_with_last_payments.sql", "name": "subscriptions_with_last_payments", "alias": "subscriptions_with_last_payments", "checksum": {"name": "sha256", "checksum": "6d6c744b47c82750ec1324344b206f4855a81f164fc55701837572075fc4ded4"}, "tags": [], "refs": [["transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/components/subscriptions_with_last_payments.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "segment", "bind": false}, "created_at": 1674498297.894272, "compiled_code": "SELECT\n    subscription_id AS drip_subscription_id,\n    MAX(created_at) :: DATE AS drip_last_payment_date\nFROM\n    \"dumps\".\"dev\".\"transactions\"\nWHERE\n    TRUE\n    AND status = 'paid'\nGROUP BY\n    drip_subscription_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscriptions_with_last_payments\""}, "model.drip_data_intelligence.account_dimensions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.drip_data_intelligence.run_date"], "nodes": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.purchases", "model.drip_data_intelligence.purchases", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.account_technology_usages_current"]}, "config": {"enabled": true, "alias": null, "schema": "legacy", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group di", "group developer", "group bots"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "legacy", "account_dimensions"], "unique_id": "model.drip_data_intelligence.account_dimensions", "raw_code": "-- NOTE: this is equivalent to `current.account_dimensions`\n--   We update that data in the `account_dimensions` job using this table\n--   to ensure old queries keep working\nWITH most_recent_subscription_metrics AS (\n    SELECT\n        subscription_id\n        , emic\n        , is_active\n    FROM (\n            SELECT\n                subscription_id\n                , is_active\n                , coalesce(emic, 0) AS emic\n                , row_number() OVER (\n                    PARTITION BY\n                        subscription_id\n                    ORDER BY metric_date DESC\n                ) AS row_num\n            FROM current.product_metrics\n            WHERE is_active IS NOT NULL\n        ) AS metric_rows\n    WHERE row_num = 1\n)\n\n, most_recent_account_metrics AS (\n    SELECT\n        account_id\n        , billable_subscribers_v2\n    FROM (\n            SELECT\n                account_daily_usage_stats.account_id\n                , account_daily_usage_stats.billable_subscribers_v2\n                , row_number() OVER (\n                    PARTITION BY\n                        account_daily_usage_stats.account_id\n                    ORDER BY account_daily_usage_stats.occurred_on DESC\n                ) AS row_num\n            FROM current.account_daily_usage_stats\n        ) AS metric_rows\n    WHERE row_num = 1\n)\n\n, account_counts AS (\n    SELECT\n        subscription_id\n        , count(*) AS n_account\n    FROM {{ ref(\"accounts\") }}\n    GROUP BY subscription_id\n)\n\n, account_weights AS (\n    SELECT\n        accounts.public_id\n        , accounts.subscription_id\n        , CASE\n            WHEN (sum(\n                most_recent_account_metrics.billable_subscribers_v2\n                ) OVER (PARTITION BY accounts.subscription_id)\n                > 0)\n                THEN\n                cast(\n                    most_recent_account_metrics.billable_subscribers_v2 AS float\n                )\n                / sum(\n                    most_recent_account_metrics.billable_subscribers_v2\n                ) OVER (\n                    PARTITION BY accounts.subscription_id\n                )\n            ELSE 1 / cast(account_counts.n_account AS float) END AS pct_account_subscribers\n    FROM {{ ref(\"accounts\") }}\n        INNER JOIN account_counts\n            ON\n                account_counts.subscription_id = accounts.subscription_id\n        LEFT OUTER JOIN most_recent_account_metrics\n            ON accounts.id = most_recent_account_metrics.account_id\n)\n\n, weighted_mrr AS (\n    SELECT\n        accounts.public_id\n        , most_recent_subscription_metrics.is_active AS is_paying\n        , (\n            most_recent_subscription_metrics.emic * account_weights.pct_account_subscribers * 12\n        )\n        / 100 AS arr_usd\n    FROM {{ ref(\"accounts\") }}\n        INNER JOIN most_recent_subscription_metrics\n            ON\n                accounts.subscription_id = most_recent_subscription_metrics.subscription_id\n        LEFT OUTER JOIN account_weights\n            ON accounts.public_id = account_weights.public_id\n)\n\n, sku_count AS (\n    SELECT\n        account_id AS account_public_id\n        , count(*) AS sku_count\n    FROM current.products\n    GROUP BY account_id\n)\n\n, average_order_value AS (\n    SELECT\n        p.account_id\n        , count(p.id) AS num_purchases\n        , avg((p.amount * currency.value) / 100) AS average_order_value_usd\n    FROM {{ ref(\"purchases\") }} AS p\n        INNER JOIN current.currency ON p.currency_code = currency.currency\n    WHERE p.canceled_at IS NULL\n        AND (\n            p.financial_state NOT IN ( 'voided', 'refunded' )\n            OR p.financial_state IS NULL\n        )\n    GROUP BY p.account_id\n)\n\n, accounts_with_orders AS (\n    SELECT account_id\n    FROM {{ ref(\"purchases\") }}\n    GROUP BY account_id\n)\nSELECT DISTINCT\n    accounts.public_id AS account_public_id\n    , account_segments.segment\n    , sku_count.sku_count\n    , average_order_value.average_order_value_usd AS aov_usd\n    , CASE\n        WHEN (accounts_with_orders.account_id IS NOT NULL\n            AND (account_technology_usages_current.ecomm_platform IS NULL\n                OR account_technology_usages_current.ecomm_platform = 'None'))\n            THEN 'other'\n        WHEN (account_technology_usages_current.ecomm_platform = 'None')\n            THEN NULL\n        ELSE account_technology_usages_current.ecomm_platform\n    END AS ecommerce_platform\n    , CASE\n        WHEN subscription_dimensions.sales_agency_sourced\n            THEN 'agency'\n        WHEN subscription_dimensions.sales_sourced\n            THEN 'sales'\n        ELSE 'self-serve'\n    END AS acquisition_source\n    , coalesce( weighted_mrr.arr_usd, 0 ) AS arr_usd\n    , coalesce( weighted_mrr.is_paying, FALSE ) AS is_paying\n    , CASE\n        WHEN (weighted_mrr.arr_usd >= 50000)\n            THEN 'enterprise'\n        WHEN (weighted_mrr.arr_usd >= 12000)\n            THEN 'mid_market'\n        ELSE 'small_business'\n    END AS arr_bucket\n    , {{ run_date() }} AS etl_date\nFROM {{ ref(\"accounts\") }}\n    LEFT OUTER JOIN current.account_segments\n        ON accounts.public_id = account_segments.account_public_id\n    LEFT OUTER JOIN {{ ref(\"account_technology_usages_current\") }}\n        ON account_technology_usages_current.account_public_id = accounts.public_id\n    LEFT OUTER JOIN current.subscription_dimensions\n        ON subscription_dimensions.subscription_id = accounts.subscription_id\n    LEFT OUTER JOIN weighted_mrr\n        ON weighted_mrr.public_id = accounts.public_id\n    LEFT OUTER JOIN sku_count\n        ON sku_count.account_public_id = accounts.public_id\n    LEFT OUTER JOIN average_order_value\n        ON average_order_value.account_id = accounts.id\n    LEFT OUTER JOIN accounts_with_orders\n        ON accounts_with_orders.account_id = accounts.id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "legacy/account_dimensions.sql", "original_file_path": "models/legacy/account_dimensions.sql", "name": "account_dimensions", "alias": "account_dimensions", "checksum": {"name": "sha256", "checksum": "738d2588b0b32fe801f1ba81be685f4593831541150bcae1be13a7bcaba7ac76"}, "tags": [], "refs": [["accounts"], ["accounts"], ["accounts"], ["purchases"], ["purchases"], ["accounts"], ["account_technology_usages_current"]], "sources": [], "metrics": [], "description": "*Deprecated* A grab bag of account properties used in various places\n", "columns": {"account_public_id": {"name": "account_public_id", "description": "The public id of the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ecommerce_platform": {"name": "ecommerce_platform", "description": "The ecommerce platform we detected via BuiltWith when the account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/legacy/legacy.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/legacy/account_dimensions.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group di", "group developer", "group bots"]}, "schema": "legacy", "materialized": "table"}, "created_at": 1674498298.3943071, "compiled_code": "-- NOTE: this is equivalent to `current.account_dimensions`\n--   We update that data in the `account_dimensions` job using this table\n--   to ensure old queries keep working\nWITH most_recent_subscription_metrics AS (\n    SELECT\n        subscription_id\n        , emic\n        , is_active\n    FROM (\n            SELECT\n                subscription_id\n                , is_active\n                , coalesce(emic, 0) AS emic\n                , row_number() OVER (\n                    PARTITION BY\n                        subscription_id\n                    ORDER BY metric_date DESC\n                ) AS row_num\n            FROM current.product_metrics\n            WHERE is_active IS NOT NULL\n        ) AS metric_rows\n    WHERE row_num = 1\n)\n\n, most_recent_account_metrics AS (\n    SELECT\n        account_id\n        , billable_subscribers_v2\n    FROM (\n            SELECT\n                account_daily_usage_stats.account_id\n                , account_daily_usage_stats.billable_subscribers_v2\n                , row_number() OVER (\n                    PARTITION BY\n                        account_daily_usage_stats.account_id\n                    ORDER BY account_daily_usage_stats.occurred_on DESC\n                ) AS row_num\n            FROM current.account_daily_usage_stats\n        ) AS metric_rows\n    WHERE row_num = 1\n)\n\n, account_counts AS (\n    SELECT\n        subscription_id\n        , count(*) AS n_account\n    FROM \"dumps\".\"dev\".\"accounts\"\n    GROUP BY subscription_id\n)\n\n, account_weights AS (\n    SELECT\n        accounts.public_id\n        , accounts.subscription_id\n        , CASE\n            WHEN (sum(\n                most_recent_account_metrics.billable_subscribers_v2\n                ) OVER (PARTITION BY accounts.subscription_id)\n                > 0)\n                THEN\n                cast(\n                    most_recent_account_metrics.billable_subscribers_v2 AS float\n                )\n                / sum(\n                    most_recent_account_metrics.billable_subscribers_v2\n                ) OVER (\n                    PARTITION BY accounts.subscription_id\n                )\n            ELSE 1 / cast(account_counts.n_account AS float) END AS pct_account_subscribers\n    FROM \"dumps\".\"dev\".\"accounts\"\n        INNER JOIN account_counts\n            ON\n                account_counts.subscription_id = accounts.subscription_id\n        LEFT OUTER JOIN most_recent_account_metrics\n            ON accounts.id = most_recent_account_metrics.account_id\n)\n\n, weighted_mrr AS (\n    SELECT\n        accounts.public_id\n        , most_recent_subscription_metrics.is_active AS is_paying\n        , (\n            most_recent_subscription_metrics.emic * account_weights.pct_account_subscribers * 12\n        )\n        / 100 AS arr_usd\n    FROM \"dumps\".\"dev\".\"accounts\"\n        INNER JOIN most_recent_subscription_metrics\n            ON\n                accounts.subscription_id = most_recent_subscription_metrics.subscription_id\n        LEFT OUTER JOIN account_weights\n            ON accounts.public_id = account_weights.public_id\n)\n\n, sku_count AS (\n    SELECT\n        account_id AS account_public_id\n        , count(*) AS sku_count\n    FROM current.products\n    GROUP BY account_id\n)\n\n, average_order_value AS (\n    SELECT\n        p.account_id\n        , count(p.id) AS num_purchases\n        , avg((p.amount * currency.value) / 100) AS average_order_value_usd\n    FROM \"dumps\".\"dev\".\"purchases\" AS p\n        INNER JOIN current.currency ON p.currency_code = currency.currency\n    WHERE p.canceled_at IS NULL\n        AND (\n            p.financial_state NOT IN ( 'voided', 'refunded' )\n            OR p.financial_state IS NULL\n        )\n    GROUP BY p.account_id\n)\n\n, accounts_with_orders AS (\n    SELECT account_id\n    FROM \"dumps\".\"dev\".\"purchases\"\n    GROUP BY account_id\n)\nSELECT DISTINCT\n    accounts.public_id AS account_public_id\n    , account_segments.segment\n    , sku_count.sku_count\n    , average_order_value.average_order_value_usd AS aov_usd\n    , CASE\n        WHEN (accounts_with_orders.account_id IS NOT NULL\n            AND (account_technology_usages_current.ecomm_platform IS NULL\n                OR account_technology_usages_current.ecomm_platform = 'None'))\n            THEN 'other'\n        WHEN (account_technology_usages_current.ecomm_platform = 'None')\n            THEN NULL\n        ELSE account_technology_usages_current.ecomm_platform\n    END AS ecommerce_platform\n    , CASE\n        WHEN subscription_dimensions.sales_agency_sourced\n            THEN 'agency'\n        WHEN subscription_dimensions.sales_sourced\n            THEN 'sales'\n        ELSE 'self-serve'\n    END AS acquisition_source\n    , coalesce( weighted_mrr.arr_usd, 0 ) AS arr_usd\n    , coalesce( weighted_mrr.is_paying, FALSE ) AS is_paying\n    , CASE\n        WHEN (weighted_mrr.arr_usd >= 50000)\n            THEN 'enterprise'\n        WHEN (weighted_mrr.arr_usd >= 12000)\n            THEN 'mid_market'\n        ELSE 'small_business'\n    END AS arr_bucket\n    , \n    \n\n    \n        CURRENT_DATE\n    \n AS etl_date\nFROM \"dumps\".\"dev\".\"accounts\"\n    LEFT OUTER JOIN current.account_segments\n        ON accounts.public_id = account_segments.account_public_id\n    LEFT OUTER JOIN \"dumps\".\"dev\".\"account_technology_usages_current\"\n        ON account_technology_usages_current.account_public_id = accounts.public_id\n    LEFT OUTER JOIN current.subscription_dimensions\n        ON subscription_dimensions.subscription_id = accounts.subscription_id\n    LEFT OUTER JOIN weighted_mrr\n        ON weighted_mrr.public_id = accounts.public_id\n    LEFT OUTER JOIN sku_count\n        ON sku_count.account_public_id = accounts.public_id\n    LEFT OUTER JOIN average_order_value\n        ON average_order_value.account_id = accounts.id\n    LEFT OUTER JOIN accounts_with_orders\n        ON accounts_with_orders.account_id = accounts.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"account_dimensions\""}, "model.drip_data_intelligence.churn_mrr_dashboard": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.customer_mrr_changed", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.account_events", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.subscriptions_with_success_managers"]}, "config": {"enabled": true, "alias": null, "schema": "visualizations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "visualizations", "churn_mrr_dashboard"], "unique_id": "model.drip_data_intelligence.churn_mrr_dashboard", "raw_code": "WITH churn AS\n      (\n          SELECT subscription_id\n               , date_trunc('d', occurred_at)::date              churn_date\n               , mrr_cents_delta / -100                          churn_mrr\n               , action\n               , CASE WHEN action = 'churned' THEN 1 ELSE -1 END churn_counter\n               , CASE\n                     WHEN churn_mrr <= 250\n                         THEN 1\n                     WHEN churn_mrr <= 1200\n                         THEN 2\n                         ELSE 3 END AS                           category_mrr\n               , date_diff('d',\n                           date_trunc('d', first_value(occurred_at)\n                                           OVER (PARTITION BY subscription_id))::date,\n                           churn_date)\n                                                                 active_days\n               , CASE\n                     WHEN active_days <= 90\n                         THEN 'first 90 days'\n                     WHEN active_days <= 365\n                         THEN '90 to 365 days'\n                         ELSE '365+ days' END                    churn_day_buckets\n            FROM {{ ref(\"customer_mrr_changed\") }}\n           WHERE action IN ('churned', 'reconverted', 'converted')\n      )\n     , oms_connected AS\n      (\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM current.integrations\n                     JOIN {{ ref(\"account_metrics_current\") }} ON account_public_id = account_param\n           WHERE deleted_at IS NULL\n             AND provider_param = 'bigcommerce'\n           UNION\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM {{ ref(\"account_events\") }}\n           WHERE action = 'OMS connected'\n      )\n     , account_to_subscription AS\n      (\n          SELECT DISTINCT subscription_id\n                        , account_id\n                        , is_oms_connected\n            FROM {{ ref(\"account_metrics_current\") }}\n                     LEFT JOIN oms_connected USING (account_id)\n      )\n     , list_size AS\n      (\n          SELECT subscription_id\n               , occurred_on\n               , is_oms_connected\n               , sum(billable_subscribers_v2)                                               list_size\n               , CASE\n                     WHEN list_size < 15000\n                         THEN 1\n                     WHEN list_size <= 80000\n                         THEN 2\n                         ELSE 3 END AS                                                      category_list\n               , row_number() OVER (PARTITION BY subscription_id ORDER BY occurred_on DESC) n\n            FROM current.account_daily_usage_stats\n                     JOIN account_to_subscription USING (account_id)\n           GROUP BY subscription_id, occurred_on, is_oms_connected\n      )\nSELECT date_trunc('d', churn_date)::date                                               churn_day\n     , date_trunc('mon', churn_date)::date                                             churn_month\n     , CASE\n           WHEN category_mrr > nvl(category_list, 0)\n               THEN category_mrr\n               ELSE category_list END                                                  category\n     , CASE\n           WHEN category = 1\n               THEN 'VSB'\n           WHEN category = 2\n               THEN 'SMB'\n           WHEN category = 3\n               THEN 'MM'\n    END                                                                                category_name\n     , nvl(is_oms_connected, FALSE)                                                    is_ecommerce\n     , churn_day_buckets\n     , drip_success_manager AS                                                         is_success_managed\n     , CASE\n           WHEN category = 1 AND is_ecommerce\n               THEN 'VSB (ecom)'\n           WHEN category = 2 AND is_ecommerce\n               THEN 'SMB (ecom)'\n           WHEN category = 3 AND is_ecommerce\n               THEN 'MM (ecom)'\n           WHEN category = 1 AND NOT is_ecommerce\n               THEN 'VSB (non ecom)'\n           WHEN category = 2 AND NOT is_ecommerce\n               THEN 'SMB (non ecom)'\n           WHEN category = 3 AND NOT is_ecommerce\n               THEN 'MM (non ecom)' END                                                category_and_ecommerce\n     , sum(churn_mrr)                                                                  churn_amount\n     , sum(churn_counter)                                                              churn_count\n     , sum(churn_amount)\n       OVER (PARTITION BY churn_month, category_and_ecommerce)                         month_category_and_segment_churn_amount\n     , sum(churn_count)\n       OVER (PARTITION BY churn_month, category_and_ecommerce)                         month_category_and_segment_churn_count\n     , sum(churn_amount) OVER (PARTITION BY churn_month, is_ecommerce)                 month_segment_churn_amount\n     , sum(churn_count) OVER (PARTITION BY churn_month, is_ecommerce)                  month_segment_churn_count\n     , sum(churn_amount) OVER (PARTITION BY churn_month)                               month_churn_amount\n     , sum(churn_count) OVER (PARTITION BY churn_month)                                month_churn_count\n     , month_category_and_segment_churn_amount / nullif(month_segment_churn_amount, 0) churn_amount_pct_of_segment\n     , churn_amount / nullif(month_segment_churn_amount, 0)                            churn_amount_category_pct_of_segment\n     , churn_amount / nullif(month_churn_amount, 0)                                    churn_amount_pct\n     , month_segment_churn_amount / nullif(month_churn_amount, 0)                      churn_amount_segment_pct\n  FROM churn\n           LEFT JOIN list_size USING (subscription_id)\n           LEFT JOIN {{ ref(\"subscriptions_with_success_managers\") }} ON subscription_id = drip_subscription_id\n WHERE action IN ('churned', 'reconverted')\n   AND (n = 1 OR n IS NULL)\n GROUP BY churn_day, churn_month, is_success_managed, category, is_oms_connected, churn_day_buckets", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "visualizations/churn_mrr_dashboard.sql", "original_file_path": "models/visualizations/churn_mrr_dashboard.sql", "name": "churn_mrr_dashboard", "alias": "churn_mrr_dashboard", "checksum": {"name": "sha256", "checksum": "c612825548f657dbe725f5dc9eccb83574e1e840ce69d3172dcb9f0e57829858"}, "tags": [], "refs": [["customer_mrr_changed"], ["account_metrics_current"], ["account_events"], ["account_metrics_current"], ["subscriptions_with_success_managers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/visualizations/churn_mrr_dashboard.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "visualizations", "bind": false}, "created_at": 1674498297.9047139, "compiled_code": "WITH churn AS\n      (\n          SELECT subscription_id\n               , date_trunc('d', occurred_at)::date              churn_date\n               , mrr_cents_delta / -100                          churn_mrr\n               , action\n               , CASE WHEN action = 'churned' THEN 1 ELSE -1 END churn_counter\n               , CASE\n                     WHEN churn_mrr <= 250\n                         THEN 1\n                     WHEN churn_mrr <= 1200\n                         THEN 2\n                         ELSE 3 END AS                           category_mrr\n               , date_diff('d',\n                           date_trunc('d', first_value(occurred_at)\n                                           OVER (PARTITION BY subscription_id))::date,\n                           churn_date)\n                                                                 active_days\n               , CASE\n                     WHEN active_days <= 90\n                         THEN 'first 90 days'\n                     WHEN active_days <= 365\n                         THEN '90 to 365 days'\n                         ELSE '365+ days' END                    churn_day_buckets\n            FROM \"dumps\".\"dev\".\"customer_mrr_changed\"\n           WHERE action IN ('churned', 'reconverted', 'converted')\n      )\n     , oms_connected AS\n      (\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM current.integrations\n                     JOIN \"dumps\".\"dev\".\"account_metrics_current\" ON account_public_id = account_param\n           WHERE deleted_at IS NULL\n             AND provider_param = 'bigcommerce'\n           UNION\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM \"dumps\".\"dev\".\"account_events\"\n           WHERE action = 'OMS connected'\n      )\n     , account_to_subscription AS\n      (\n          SELECT DISTINCT subscription_id\n                        , account_id\n                        , is_oms_connected\n            FROM \"dumps\".\"dev\".\"account_metrics_current\"\n                     LEFT JOIN oms_connected USING (account_id)\n      )\n     , list_size AS\n      (\n          SELECT subscription_id\n               , occurred_on\n               , is_oms_connected\n               , sum(billable_subscribers_v2)                                               list_size\n               , CASE\n                     WHEN list_size < 15000\n                         THEN 1\n                     WHEN list_size <= 80000\n                         THEN 2\n                         ELSE 3 END AS                                                      category_list\n               , row_number() OVER (PARTITION BY subscription_id ORDER BY occurred_on DESC) n\n            FROM current.account_daily_usage_stats\n                     JOIN account_to_subscription USING (account_id)\n           GROUP BY subscription_id, occurred_on, is_oms_connected\n      )\nSELECT date_trunc('d', churn_date)::date                                               churn_day\n     , date_trunc('mon', churn_date)::date                                             churn_month\n     , CASE\n           WHEN category_mrr > nvl(category_list, 0)\n               THEN category_mrr\n               ELSE category_list END                                                  category\n     , CASE\n           WHEN category = 1\n               THEN 'VSB'\n           WHEN category = 2\n               THEN 'SMB'\n           WHEN category = 3\n               THEN 'MM'\n    END                                                                                category_name\n     , nvl(is_oms_connected, FALSE)                                                    is_ecommerce\n     , churn_day_buckets\n     , drip_success_manager AS                                                         is_success_managed\n     , CASE\n           WHEN category = 1 AND is_ecommerce\n               THEN 'VSB (ecom)'\n           WHEN category = 2 AND is_ecommerce\n               THEN 'SMB (ecom)'\n           WHEN category = 3 AND is_ecommerce\n               THEN 'MM (ecom)'\n           WHEN category = 1 AND NOT is_ecommerce\n               THEN 'VSB (non ecom)'\n           WHEN category = 2 AND NOT is_ecommerce\n               THEN 'SMB (non ecom)'\n           WHEN category = 3 AND NOT is_ecommerce\n               THEN 'MM (non ecom)' END                                                category_and_ecommerce\n     , sum(churn_mrr)                                                                  churn_amount\n     , sum(churn_counter)                                                              churn_count\n     , sum(churn_amount)\n       OVER (PARTITION BY churn_month, category_and_ecommerce)                         month_category_and_segment_churn_amount\n     , sum(churn_count)\n       OVER (PARTITION BY churn_month, category_and_ecommerce)                         month_category_and_segment_churn_count\n     , sum(churn_amount) OVER (PARTITION BY churn_month, is_ecommerce)                 month_segment_churn_amount\n     , sum(churn_count) OVER (PARTITION BY churn_month, is_ecommerce)                  month_segment_churn_count\n     , sum(churn_amount) OVER (PARTITION BY churn_month)                               month_churn_amount\n     , sum(churn_count) OVER (PARTITION BY churn_month)                                month_churn_count\n     , month_category_and_segment_churn_amount / nullif(month_segment_churn_amount, 0) churn_amount_pct_of_segment\n     , churn_amount / nullif(month_segment_churn_amount, 0)                            churn_amount_category_pct_of_segment\n     , churn_amount / nullif(month_churn_amount, 0)                                    churn_amount_pct\n     , month_segment_churn_amount / nullif(month_churn_amount, 0)                      churn_amount_segment_pct\n  FROM churn\n           LEFT JOIN list_size USING (subscription_id)\n           LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_success_managers\" ON subscription_id = drip_subscription_id\n WHERE action IN ('churned', 'reconverted')\n   AND (n = 1 OR n IS NULL)\n GROUP BY churn_day, churn_month, is_success_managed, category, is_oms_connected, churn_day_buckets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"churn_mrr_dashboard\""}, "model.drip_data_intelligence.marketing_recap": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.stream_events_etl.delivery_events", "model.drip_data_intelligence.purchases_corrected", "model.drip_data_intelligence.broadcasts", "model.drip_data_intelligence.automation_emails", "model.drip_data_intelligence.workflows"]}, "config": {"enabled": true, "alias": null, "schema": "visualizations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "visualizations", "marketing_recap"], "unique_id": "model.drip_data_intelligence.marketing_recap", "raw_code": "WITH clicks AS\n      (\n          SELECT email_id\n               , sum(CASE WHEN action = 'click' THEN 1 ELSE 0 END) click_count\n            FROM {{ source('stream_events_etl', 'delivery_events') }}\n           WHERE action = 'click'\n           GROUP BY account_id, email_id, emailable_type\n      )\n     , email AS\n      (\n          SELECT account_id\n               , email_id\n               , emailable_type --'AutomationEmail' for automations 'Broadcast' for broadcasts\n               , sum(CASE WHEN action = 'deliver' THEN 1 ELSE 0 END)   delivery_count\n               , click_count\n               , click_count::float / nullif(delivery_count, 0)::float click_through_rate\n            FROM {{ source('stream_events_etl', 'delivery_events') }}\n                     LEFT JOIN clicks USING (email_id)\n           WHERE action = 'deliver'\n           GROUP BY account_id, email_id, emailable_type, click_count\n      )\n     , purchases AS\n      (\n          SELECT attributed_email_id     email_id\n               , sum(revenue_amount_usd) revenue_total_by_email\n               , count(*)                order_count_by_email\n               , sum(CASE\n                         WHEN attributed_emailable_id IS NOT NULL OR attributed_automation_id IS NOT NULL OR\n                              attributed_sms_delivery_id IS NOT NULL OR attributed_delivery_id IS NOT NULL\n                             THEN 1\n                             ELSE 0 END) attributed_count_by_email\n            FROM {{ ref(\"purchases_corrected\") }}\n           GROUP BY email_id\n      )\n     , email_name AS\n      (\n          SELECT email_id, id, name, sent_at\n            FROM {{ ref(\"broadcasts\") }}\n           UNION ALL\n          SELECT email_id, workflows.public_id, workflows.name, NULL\n            FROM {{ ref(\"automation_emails\") }}\n                     JOIN {{ ref(\"workflows\") }} ON automation_id = workflows.id\n      )\n     , verticals AS\n      (SELECT account_id\n            , display_name industry_category_name\n         FROM current.account_industry_categories\n                  JOIN current.industry_categories ON industry_categories.id = industry_category_id)\nSELECT extract(YEAR FROM sent_at)     as year\n     , left(industry_category_name, 100) industry_category_name\n     , account_id\n     , email_id\n     , id                                broadcast_or_automation_id\n    --, left(name, 100)                   name\n     , name\n    --, left(emailable_type, 100)         emailable_type\n     , emailable_type\n     , delivery_count\n     , click_count\n     , click_through_rate\n     , revenue_total_by_email\n     , attributed_count_by_email\n     , order_count_by_email\n  FROM email\n           LEFT JOIN purchases USING (email_id)\n           LEFT JOIN email_name USING (email_id)\n           LEFT JOIN verticals USING (account_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "visualizations/marketing_recap.sql", "original_file_path": "models/visualizations/marketing_recap.sql", "name": "marketing_recap", "alias": "marketing_recap", "checksum": {"name": "sha256", "checksum": "b677c0e67c54c9d976a255d4cbd7cffd8a839a6c7d65f58c3cdbe3826f9a957e"}, "tags": [], "refs": [["purchases_corrected"], ["broadcasts"], ["automation_emails"], ["workflows"]], "sources": [["stream_events_etl", "delivery_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/visualizations/marketing_recap.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "visualizations", "bind": false}, "created_at": 1674498297.907487, "compiled_code": "WITH clicks AS\n      (\n          SELECT email_id\n               , sum(CASE WHEN action = 'click' THEN 1 ELSE 0 END) click_count\n            FROM \"dumps\".\"current\".\"delivery_events\"\n           WHERE action = 'click'\n           GROUP BY account_id, email_id, emailable_type\n      )\n     , email AS\n      (\n          SELECT account_id\n               , email_id\n               , emailable_type --'AutomationEmail' for automations 'Broadcast' for broadcasts\n               , sum(CASE WHEN action = 'deliver' THEN 1 ELSE 0 END)   delivery_count\n               , click_count\n               , click_count::float / nullif(delivery_count, 0)::float click_through_rate\n            FROM \"dumps\".\"current\".\"delivery_events\"\n                     LEFT JOIN clicks USING (email_id)\n           WHERE action = 'deliver'\n           GROUP BY account_id, email_id, emailable_type, click_count\n      )\n     , purchases AS\n      (\n          SELECT attributed_email_id     email_id\n               , sum(revenue_amount_usd) revenue_total_by_email\n               , count(*)                order_count_by_email\n               , sum(CASE\n                         WHEN attributed_emailable_id IS NOT NULL OR attributed_automation_id IS NOT NULL OR\n                              attributed_sms_delivery_id IS NOT NULL OR attributed_delivery_id IS NOT NULL\n                             THEN 1\n                             ELSE 0 END) attributed_count_by_email\n            FROM \"dumps\".\"dev\".\"purchases_corrected\"\n           GROUP BY email_id\n      )\n     , email_name AS\n      (\n          SELECT email_id, id, name, sent_at\n            FROM \"dumps\".\"dev\".\"broadcasts\"\n           UNION ALL\n          SELECT email_id, workflows.public_id, workflows.name, NULL\n            FROM \"dumps\".\"dev\".\"automation_emails\"\n                     JOIN \"dumps\".\"dev\".\"workflows\" ON automation_id = workflows.id\n      )\n     , verticals AS\n      (SELECT account_id\n            , display_name industry_category_name\n         FROM current.account_industry_categories\n                  JOIN current.industry_categories ON industry_categories.id = industry_category_id)\nSELECT extract(YEAR FROM sent_at)     as year\n     , left(industry_category_name, 100) industry_category_name\n     , account_id\n     , email_id\n     , id                                broadcast_or_automation_id\n    --, left(name, 100)                   name\n     , name\n    --, left(emailable_type, 100)         emailable_type\n     , emailable_type\n     , delivery_count\n     , click_count\n     , click_through_rate\n     , revenue_total_by_email\n     , attributed_count_by_email\n     , order_count_by_email\n  FROM email\n           LEFT JOIN purchases USING (email_id)\n           LEFT JOIN email_name USING (email_id)\n           LEFT JOIN verticals USING (account_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"marketing_recap\""}, "model.drip_data_intelligence.product_usage_snapshot_90_day_churn": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "visualizations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "visualizations", "product_usage_snapshot_90_day_churn"], "unique_id": "model.drip_data_intelligence.product_usage_snapshot_90_day_churn", "raw_code": "SELECT pds.subscription_id\n     , pds.account_id\n     , pds.account_public_id\n     , pds.as_of_date\n     , pds.activation_date\n     , pds.activation_cohort_week\n     , pds.is_active\n     , pds.days_active\n     , pds.churn_day\n     , pds.mrr_current\n     , pds.trust_status\n     , pds.is_oms_connected\n     , pds.oms_connected_date\n     , pds.oms_connected_provider\n     , pds.oms_indicated_date\n     , pds.is_oms_indicated\n     , pds.oms_indicated_provider\n     , pds.is_first_person_added\n     , pds.first_person_added_date\n     , pds.is_first_email_campaign_sent\n     , pds.first_email_campaign_sent_date\n     , pds.is_js_snippet_installed\n     , pds.js_snippet_installed_date\n     , pds.is_workflow_enabled\n     , pds.first_workflow_enabled_date\n     , pds.is_form_enabled\n     , pds.first_form_enabled_date\n     , pds.is_first_sms_sent\n     , pds.first_sent_sms_date\n     , pds.last_logged_in_at\n     , pds.last_payment_date\n     , pds.last_payment_amount\n     , pes.forms_activated_total\n     , pes.forms_activated_by_day\n     , pes.forms_activated_7_days\n     , pes.forms_activated_30_days\n     , pes.workflows_activated_total\n     , pes.workflows_activated_by_day\n     , pes.workflows_activated_7_days\n     , pes.workflows_activated_30_days\n     , pes.campaigns_sent_total\n     , pes.campaigns_sent_by_day\n     , pes.campaigns_sent_7_days\n     , pes.campaigns_sent_30_days\n     , pes.campaigns_delivered_total\n     , pes.campaigns_delivered_by_day\n     , pes.campaigns_delivered_7_days\n     , pes.campaigns_delivered_30_days\n     , pes.segments_created_by_day\n     , pes.segments_created\n     , pes.segments_created_7_days\n     , pes.segments_created_30_days\n  FROM alpha.product_usage_dimensions_snapshot pds\n           JOIN alpha.product_usage_events_snapshot pes USING (account_id, as_of_date)\n WHERE NOT pds.is_active\n   AND as_of_date >= sysdate - 90", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "visualizations/product_usage_snapshot_90_day_churn.sql", "original_file_path": "models/visualizations/product_usage_snapshot_90_day_churn.sql", "name": "product_usage_snapshot_90_day_churn", "alias": "product_usage_snapshot_90_day_churn", "checksum": {"name": "sha256", "checksum": "e9f8e6e52207de7d4c32c5ff6d45f62df5b98005fac531b98d0b8eb2873cdeb9"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/visualizations/product_usage_snapshot_90_day_churn.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "visualizations", "bind": false}, "created_at": 1674498297.910599, "compiled_code": "SELECT pds.subscription_id\n     , pds.account_id\n     , pds.account_public_id\n     , pds.as_of_date\n     , pds.activation_date\n     , pds.activation_cohort_week\n     , pds.is_active\n     , pds.days_active\n     , pds.churn_day\n     , pds.mrr_current\n     , pds.trust_status\n     , pds.is_oms_connected\n     , pds.oms_connected_date\n     , pds.oms_connected_provider\n     , pds.oms_indicated_date\n     , pds.is_oms_indicated\n     , pds.oms_indicated_provider\n     , pds.is_first_person_added\n     , pds.first_person_added_date\n     , pds.is_first_email_campaign_sent\n     , pds.first_email_campaign_sent_date\n     , pds.is_js_snippet_installed\n     , pds.js_snippet_installed_date\n     , pds.is_workflow_enabled\n     , pds.first_workflow_enabled_date\n     , pds.is_form_enabled\n     , pds.first_form_enabled_date\n     , pds.is_first_sms_sent\n     , pds.first_sent_sms_date\n     , pds.last_logged_in_at\n     , pds.last_payment_date\n     , pds.last_payment_amount\n     , pes.forms_activated_total\n     , pes.forms_activated_by_day\n     , pes.forms_activated_7_days\n     , pes.forms_activated_30_days\n     , pes.workflows_activated_total\n     , pes.workflows_activated_by_day\n     , pes.workflows_activated_7_days\n     , pes.workflows_activated_30_days\n     , pes.campaigns_sent_total\n     , pes.campaigns_sent_by_day\n     , pes.campaigns_sent_7_days\n     , pes.campaigns_sent_30_days\n     , pes.campaigns_delivered_total\n     , pes.campaigns_delivered_by_day\n     , pes.campaigns_delivered_7_days\n     , pes.campaigns_delivered_30_days\n     , pes.segments_created_by_day\n     , pes.segments_created\n     , pes.segments_created_7_days\n     , pes.segments_created_30_days\n  FROM alpha.product_usage_dimensions_snapshot pds\n           JOIN alpha.product_usage_events_snapshot pes USING (account_id, as_of_date)\n WHERE NOT pds.is_active\n   AND as_of_date >= sysdate - 90", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"product_usage_snapshot_90_day_churn\""}, "model.drip_data_intelligence.contracted_mrr_dashboard": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.customer_mrr_changed", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.account_events", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.subscriptions_with_success_managers"]}, "config": {"enabled": true, "alias": null, "schema": "visualizations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "visualizations", "contracted_mrr_dashboard"], "unique_id": "model.drip_data_intelligence.contracted_mrr_dashboard", "raw_code": "WITH contracted AS\n      (\n        SELECT subscription_id\n               , date_trunc('d', occurred_at)::date              contracted_date\n               , mrr_cents_delta / -100                          contracted_mrr\n               , action\n               , CASE WHEN action = 'contracted' THEN 1 ELSE -1 END contracted_counter\n               , CASE\n                     WHEN contracted_mrr <= 250\n                         THEN 1\n                     WHEN contracted_mrr <= 1200\n                         THEN 2\n                         ELSE 3 END AS                           category_mrr\n               , date_diff('d',\n                           date_trunc('d', first_value(occurred_at)\n                                           OVER (PARTITION BY subscription_id))::date,\n                           contracted_date)\n                                                                 active_days\n               , CASE\n                     WHEN active_days <= 90\n                         THEN 'first 90 days'\n                     WHEN active_days <= 365\n                         THEN '90 to 365 days'\n                         ELSE '365+ days' END                    contracted_day_buckets\n        FROM {{ ref(\"customer_mrr_changed\") }}\n        WHERE action = 'contracted'\n      )\n     , oms_connected AS\n      (\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM current.integrations\n                     JOIN {{ ref(\"account_metrics_current\") }} ON account_public_id = account_param\n           WHERE deleted_at IS NULL\n             AND provider_param = 'bigcommerce'\n           UNION\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM {{ ref(\"account_events\") }}\n           WHERE action = 'OMS connected'\n      )\n     , account_to_subscription AS\n      (\n          SELECT DISTINCT subscription_id\n                        , account_id\n                        , is_oms_connected\n            FROM {{ ref(\"account_metrics_current\") }}\n                     LEFT JOIN oms_connected USING (account_id)\n      )\n     , list_size AS\n      (\n          SELECT subscription_id\n               , occurred_on\n               , is_oms_connected\n               , sum(billable_subscribers_v2)                                               list_size\n               , CASE\n                     WHEN list_size < 15000\n                         THEN 1\n                     WHEN list_size <= 80000\n                         THEN 2\n                         ELSE 3 END AS                                                      category_list\n               , row_number() OVER (PARTITION BY subscription_id ORDER BY occurred_on DESC) n\n            FROM current.account_daily_usage_stats\n                     JOIN account_to_subscription USING (account_id)\n           GROUP BY subscription_id, occurred_on, is_oms_connected\n      )\nSELECT date_trunc('d', contracted_date)::date                                               contracted_day\n     , date_trunc('mon', contracted_date)::date                                             contracted_month\n     , CASE\n           WHEN category_mrr > nvl(category_list, 0)\n               THEN category_mrr\n               ELSE category_list END                                                  category\n     , CASE\n           WHEN category = 1\n               THEN 'VSB'\n           WHEN category = 2\n               THEN 'SMB'\n           WHEN category = 3\n               THEN 'MM'\n    END                                                                                category_name\n     , nvl(is_oms_connected, FALSE)                                                    is_ecommerce\n     , contracted_day_buckets\n     , drip_success_manager AS                                                         is_success_managed\n     , CASE\n           WHEN category = 1 AND is_ecommerce\n               THEN 'VSB (ecom)'\n           WHEN category = 2 AND is_ecommerce\n               THEN 'SMB (ecom)'\n           WHEN category = 3 AND is_ecommerce\n               THEN 'MM (ecom)'\n           WHEN category = 1 AND NOT is_ecommerce\n               THEN 'VSB (non ecom)'\n           WHEN category = 2 AND NOT is_ecommerce\n               THEN 'SMB (non ecom)'\n           WHEN category = 3 AND NOT is_ecommerce\n               THEN 'MM (non ecom)' END                                                category_and_ecommerce\n     , sum(contracted_mrr)                                                             contracted_amount\n     , sum(contracted_counter)                                                         contracted_count\n     , sum(contracted_amount)\n       OVER (PARTITION BY contracted_month, category_and_ecommerce)                    month_category_and_segment_contracted_amount\n     , sum(contracted_count)\n       OVER (PARTITION BY contracted_month, category_and_ecommerce)                    month_category_and_segment_contracted_count\n     , sum(contracted_amount) OVER (PARTITION BY contracted_month, is_ecommerce)                 month_segment_contracted_amount\n     , sum(contracted_count) OVER (PARTITION BY contracted_month, is_ecommerce)                  month_segment_contracted_count\n     , sum(contracted_amount) OVER (PARTITION BY contracted_month)                               month_contracted_amount\n     , sum(contracted_count) OVER (PARTITION BY contracted_month)                                month_contracted_count\n     , month_category_and_segment_contracted_amount / nullif(month_segment_contracted_amount, 0) contracted_amount_pct_of_segment\n     , contracted_amount / nullif(month_segment_contracted_amount, 0)                            contracted_amount_category_pct_of_segment\n     , contracted_amount / nullif(month_contracted_amount, 0)                                    contracted_amount_pct\n     , month_segment_contracted_amount / nullif(month_contracted_amount, 0)                      contracted_amount_segment_pct\n  FROM contracted\n           LEFT JOIN list_size USING (subscription_id)\n           LEFT JOIN {{ ref(\"subscriptions_with_success_managers\") }} ON subscription_id = drip_subscription_id\n WHERE action = 'contracted'\n   AND (n = 1 OR n IS NULL)\n GROUP BY contracted_day, contracted_month, is_success_managed, category, is_oms_connected, contracted_day_buckets", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "visualizations/contracted_mrr_dashboard.sql", "original_file_path": "models/visualizations/contracted_mrr_dashboard.sql", "name": "contracted_mrr_dashboard", "alias": "contracted_mrr_dashboard", "checksum": {"name": "sha256", "checksum": "91d6fac8937e1c62a8bf37acc4bfb85002626ddc6bec55eb7bc63d719b2eb9e9"}, "tags": [], "refs": [["customer_mrr_changed"], ["account_metrics_current"], ["account_events"], ["account_metrics_current"], ["subscriptions_with_success_managers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/visualizations/contracted_mrr_dashboard.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "visualizations", "bind": false}, "created_at": 1674498297.913099, "compiled_code": "WITH contracted AS\n      (\n        SELECT subscription_id\n               , date_trunc('d', occurred_at)::date              contracted_date\n               , mrr_cents_delta / -100                          contracted_mrr\n               , action\n               , CASE WHEN action = 'contracted' THEN 1 ELSE -1 END contracted_counter\n               , CASE\n                     WHEN contracted_mrr <= 250\n                         THEN 1\n                     WHEN contracted_mrr <= 1200\n                         THEN 2\n                         ELSE 3 END AS                           category_mrr\n               , date_diff('d',\n                           date_trunc('d', first_value(occurred_at)\n                                           OVER (PARTITION BY subscription_id))::date,\n                           contracted_date)\n                                                                 active_days\n               , CASE\n                     WHEN active_days <= 90\n                         THEN 'first 90 days'\n                     WHEN active_days <= 365\n                         THEN '90 to 365 days'\n                         ELSE '365+ days' END                    contracted_day_buckets\n        FROM \"dumps\".\"dev\".\"customer_mrr_changed\"\n        WHERE action = 'contracted'\n      )\n     , oms_connected AS\n      (\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM current.integrations\n                     JOIN \"dumps\".\"dev\".\"account_metrics_current\" ON account_public_id = account_param\n           WHERE deleted_at IS NULL\n             AND provider_param = 'bigcommerce'\n           UNION\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM \"dumps\".\"dev\".\"account_events\"\n           WHERE action = 'OMS connected'\n      )\n     , account_to_subscription AS\n      (\n          SELECT DISTINCT subscription_id\n                        , account_id\n                        , is_oms_connected\n            FROM \"dumps\".\"dev\".\"account_metrics_current\"\n                     LEFT JOIN oms_connected USING (account_id)\n      )\n     , list_size AS\n      (\n          SELECT subscription_id\n               , occurred_on\n               , is_oms_connected\n               , sum(billable_subscribers_v2)                                               list_size\n               , CASE\n                     WHEN list_size < 15000\n                         THEN 1\n                     WHEN list_size <= 80000\n                         THEN 2\n                         ELSE 3 END AS                                                      category_list\n               , row_number() OVER (PARTITION BY subscription_id ORDER BY occurred_on DESC) n\n            FROM current.account_daily_usage_stats\n                     JOIN account_to_subscription USING (account_id)\n           GROUP BY subscription_id, occurred_on, is_oms_connected\n      )\nSELECT date_trunc('d', contracted_date)::date                                               contracted_day\n     , date_trunc('mon', contracted_date)::date                                             contracted_month\n     , CASE\n           WHEN category_mrr > nvl(category_list, 0)\n               THEN category_mrr\n               ELSE category_list END                                                  category\n     , CASE\n           WHEN category = 1\n               THEN 'VSB'\n           WHEN category = 2\n               THEN 'SMB'\n           WHEN category = 3\n               THEN 'MM'\n    END                                                                                category_name\n     , nvl(is_oms_connected, FALSE)                                                    is_ecommerce\n     , contracted_day_buckets\n     , drip_success_manager AS                                                         is_success_managed\n     , CASE\n           WHEN category = 1 AND is_ecommerce\n               THEN 'VSB (ecom)'\n           WHEN category = 2 AND is_ecommerce\n               THEN 'SMB (ecom)'\n           WHEN category = 3 AND is_ecommerce\n               THEN 'MM (ecom)'\n           WHEN category = 1 AND NOT is_ecommerce\n               THEN 'VSB (non ecom)'\n           WHEN category = 2 AND NOT is_ecommerce\n               THEN 'SMB (non ecom)'\n           WHEN category = 3 AND NOT is_ecommerce\n               THEN 'MM (non ecom)' END                                                category_and_ecommerce\n     , sum(contracted_mrr)                                                             contracted_amount\n     , sum(contracted_counter)                                                         contracted_count\n     , sum(contracted_amount)\n       OVER (PARTITION BY contracted_month, category_and_ecommerce)                    month_category_and_segment_contracted_amount\n     , sum(contracted_count)\n       OVER (PARTITION BY contracted_month, category_and_ecommerce)                    month_category_and_segment_contracted_count\n     , sum(contracted_amount) OVER (PARTITION BY contracted_month, is_ecommerce)                 month_segment_contracted_amount\n     , sum(contracted_count) OVER (PARTITION BY contracted_month, is_ecommerce)                  month_segment_contracted_count\n     , sum(contracted_amount) OVER (PARTITION BY contracted_month)                               month_contracted_amount\n     , sum(contracted_count) OVER (PARTITION BY contracted_month)                                month_contracted_count\n     , month_category_and_segment_contracted_amount / nullif(month_segment_contracted_amount, 0) contracted_amount_pct_of_segment\n     , contracted_amount / nullif(month_segment_contracted_amount, 0)                            contracted_amount_category_pct_of_segment\n     , contracted_amount / nullif(month_contracted_amount, 0)                                    contracted_amount_pct\n     , month_segment_contracted_amount / nullif(month_contracted_amount, 0)                      contracted_amount_segment_pct\n  FROM contracted\n           LEFT JOIN list_size USING (subscription_id)\n           LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_success_managers\" ON subscription_id = drip_subscription_id\n WHERE action = 'contracted'\n   AND (n = 1 OR n IS NULL)\n GROUP BY contracted_day, contracted_month, is_success_managed, category, is_oms_connected, contracted_day_buckets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"contracted_mrr_dashboard\""}, "model.drip_data_intelligence.product_usage_snapshot_most_recent_day": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "visualizations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "visualizations", "product_usage_snapshot_most_recent_day"], "unique_id": "model.drip_data_intelligence.product_usage_snapshot_most_recent_day", "raw_code": "WITH most_recent_day AS\n           (\n               SELECT max(as_of_date) as_of_date\n                 FROM alpha.product_usage_events_snapshot\n           )\nSELECT pds.subscription_id\n     , pds.account_id\n     , pds.account_public_id\n     , pds.as_of_date\n     , pds.activation_date\n     , pds.activation_cohort_week\n     , pds.is_active\n     , pds.days_active\n     , pds.churn_day\n     , pds.mrr_current\n     , pds.trust_status\n     , pds.is_oms_connected\n     , pds.oms_connected_date\n     , pds.oms_connected_provider\n     , pds.oms_indicated_date\n     , pds.is_oms_indicated\n     , pds.oms_indicated_provider\n     , pds.is_first_person_added\n     , pds.first_person_added_date\n     , pds.is_first_email_campaign_sent\n     , pds.first_email_campaign_sent_date\n     , pds.is_js_snippet_installed\n     , pds.js_snippet_installed_date\n     , pds.is_workflow_enabled\n     , pds.first_workflow_enabled_date\n     , pds.is_form_enabled\n     , pds.first_form_enabled_date\n     , pds.is_first_sms_sent\n     , pds.first_sent_sms_date\n     , pds.last_logged_in_at\n     , pds.last_payment_date\n     , pds.last_payment_amount\n     , pes.forms_activated_total\n     , pes.forms_activated_by_day\n     , pes.forms_activated_7_days\n     , pes.forms_activated_30_days\n     , pes.workflows_activated_total\n     , pes.workflows_activated_by_day\n     , pes.workflows_activated_7_days\n     , pes.workflows_activated_30_days\n     , pes.campaigns_sent_total\n     , pes.campaigns_sent_by_day\n     , pes.campaigns_sent_7_days\n     , pes.campaigns_sent_30_days\n     , pes.campaigns_delivered_total\n     , pes.campaigns_delivered_by_day\n     , pes.campaigns_delivered_7_days\n     , pes.campaigns_delivered_30_days\n     , pes.segments_created_by_day\n     , pes.segments_created\n     , pes.segments_created_7_days\n     , pes.segments_created_30_days\n  FROM alpha.product_usage_dimensions_snapshot pds\n           JOIN alpha.product_usage_events_snapshot pes USING (account_id, as_of_date)\n           JOIN most_recent_day USING (as_of_date)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "visualizations/product_usage_snapshot_most_recent_day.sql", "original_file_path": "models/visualizations/product_usage_snapshot_most_recent_day.sql", "name": "product_usage_snapshot_most_recent_day", "alias": "product_usage_snapshot_most_recent_day", "checksum": {"name": "sha256", "checksum": "b497708c632789c9a0ff40d33eeaa69dccd4543f32c4cc57a0277877fbd9c566"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/visualizations/product_usage_snapshot_most_recent_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "visualizations", "bind": false}, "created_at": 1674498297.915831, "compiled_code": "WITH most_recent_day AS\n           (\n               SELECT max(as_of_date) as_of_date\n                 FROM alpha.product_usage_events_snapshot\n           )\nSELECT pds.subscription_id\n     , pds.account_id\n     , pds.account_public_id\n     , pds.as_of_date\n     , pds.activation_date\n     , pds.activation_cohort_week\n     , pds.is_active\n     , pds.days_active\n     , pds.churn_day\n     , pds.mrr_current\n     , pds.trust_status\n     , pds.is_oms_connected\n     , pds.oms_connected_date\n     , pds.oms_connected_provider\n     , pds.oms_indicated_date\n     , pds.is_oms_indicated\n     , pds.oms_indicated_provider\n     , pds.is_first_person_added\n     , pds.first_person_added_date\n     , pds.is_first_email_campaign_sent\n     , pds.first_email_campaign_sent_date\n     , pds.is_js_snippet_installed\n     , pds.js_snippet_installed_date\n     , pds.is_workflow_enabled\n     , pds.first_workflow_enabled_date\n     , pds.is_form_enabled\n     , pds.first_form_enabled_date\n     , pds.is_first_sms_sent\n     , pds.first_sent_sms_date\n     , pds.last_logged_in_at\n     , pds.last_payment_date\n     , pds.last_payment_amount\n     , pes.forms_activated_total\n     , pes.forms_activated_by_day\n     , pes.forms_activated_7_days\n     , pes.forms_activated_30_days\n     , pes.workflows_activated_total\n     , pes.workflows_activated_by_day\n     , pes.workflows_activated_7_days\n     , pes.workflows_activated_30_days\n     , pes.campaigns_sent_total\n     , pes.campaigns_sent_by_day\n     , pes.campaigns_sent_7_days\n     , pes.campaigns_sent_30_days\n     , pes.campaigns_delivered_total\n     , pes.campaigns_delivered_by_day\n     , pes.campaigns_delivered_7_days\n     , pes.campaigns_delivered_30_days\n     , pes.segments_created_by_day\n     , pes.segments_created\n     , pes.segments_created_7_days\n     , pes.segments_created_30_days\n  FROM alpha.product_usage_dimensions_snapshot pds\n           JOIN alpha.product_usage_events_snapshot pes USING (account_id, as_of_date)\n           JOIN most_recent_day USING (as_of_date)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"product_usage_snapshot_most_recent_day\""}, "model.drip_data_intelligence.expanded_mrr_dashboard": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.customer_mrr_changed", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.account_events", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.subscriptions_with_success_managers"]}, "config": {"enabled": true, "alias": null, "schema": "visualizations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "visualizations", "expanded_mrr_dashboard"], "unique_id": "model.drip_data_intelligence.expanded_mrr_dashboard", "raw_code": "WITH expanded AS\n      (\n        SELECT subscription_id\n               , date_trunc('d', occurred_at)::date              expanded_date\n               , mrr_cents_delta / 100                          expanded_mrr\n               , action\n               , CASE WHEN action = 'expanded' THEN 1 ELSE -1 END expanded_counter\n               , CASE\n                     WHEN expanded_mrr <= 250\n                         THEN 1\n                     WHEN expanded_mrr <= 1200\n                         THEN 2\n                         ELSE 3 END AS                           category_mrr\n               , date_diff('d',\n                           date_trunc('d', first_value(occurred_at)\n                                           OVER (PARTITION BY subscription_id))::date,\n                           expanded_date)\n                                                                 active_days\n               , CASE\n                     WHEN active_days <= 90\n                         THEN 'first 90 days'\n                     WHEN active_days <= 365\n                         THEN '90 to 365 days'\n                         ELSE '365+ days' END                    expanded_day_buckets\n        FROM {{ ref(\"customer_mrr_changed\") }}\n        WHERE action = 'expanded'\n      )\n     , oms_connected AS\n      (\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM current.integrations\n                     JOIN {{ ref(\"account_metrics_current\") }} ON account_public_id = account_param\n           WHERE deleted_at IS NULL\n             AND provider_param = 'bigcommerce'\n           UNION\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM {{ ref(\"account_events\") }}\n           WHERE action = 'OMS connected'\n      )\n     , account_to_subscription AS\n      (\n          SELECT DISTINCT subscription_id\n                        , account_id\n                        , is_oms_connected\n            FROM {{ ref(\"account_metrics_current\") }}\n                     LEFT JOIN oms_connected USING (account_id)\n      )\n     , list_size AS\n      (\n          SELECT subscription_id\n               , occurred_on\n               , is_oms_connected\n               , sum(billable_subscribers_v2)                                               list_size\n               , CASE\n                     WHEN list_size < 15000\n                         THEN 1\n                     WHEN list_size <= 80000\n                         THEN 2\n                         ELSE 3 END AS                                                      category_list\n               , row_number() OVER (PARTITION BY subscription_id ORDER BY occurred_on DESC) n\n            FROM current.account_daily_usage_stats\n                     JOIN account_to_subscription USING (account_id)\n           GROUP BY subscription_id, occurred_on, is_oms_connected\n      )\nSELECT date_trunc('d', expanded_date)::date                                               expanded_day\n     , date_trunc('mon', expanded_date)::date                                             expanded_month\n     , CASE\n           WHEN category_mrr > nvl(category_list, 0)\n               THEN category_mrr\n               ELSE category_list END                                                  category\n     , CASE\n           WHEN category = 1\n               THEN 'VSB'\n           WHEN category = 2\n               THEN 'SMB'\n           WHEN category = 3\n               THEN 'MM'\n    END                                                                                category_name\n     , nvl(is_oms_connected, FALSE)                                                    is_ecommerce\n     , expanded_day_buckets\n     , drip_success_manager AS                                                         is_success_managed\n     , CASE\n           WHEN category = 1 AND is_ecommerce\n               THEN 'VSB (ecom)'\n           WHEN category = 2 AND is_ecommerce\n               THEN 'SMB (ecom)'\n           WHEN category = 3 AND is_ecommerce\n               THEN 'MM (ecom)'\n           WHEN category = 1 AND NOT is_ecommerce\n               THEN 'VSB (non ecom)'\n           WHEN category = 2 AND NOT is_ecommerce\n               THEN 'SMB (non ecom)'\n           WHEN category = 3 AND NOT is_ecommerce\n               THEN 'MM (non ecom)' END                                                category_and_ecommerce\n     , sum(expanded_mrr)                                                             expanded_amount\n     , sum(expanded_counter)                                                         expanded_count\n     , sum(expanded_amount)\n       OVER (PARTITION BY expanded_month, category_and_ecommerce)                    month_category_and_segment_expanded_amount\n     , sum(expanded_count)\n       OVER (PARTITION BY expanded_month, category_and_ecommerce)                    month_category_and_segment_expanded_count\n     , sum(expanded_amount) OVER (PARTITION BY expanded_month, is_ecommerce)                 month_segment_expanded_amount\n     , sum(expanded_count) OVER (PARTITION BY expanded_month, is_ecommerce)                  month_segment_expanded_count\n     , sum(expanded_amount) OVER (PARTITION BY expanded_month)                               month_expanded_amount\n     , sum(expanded_count) OVER (PARTITION BY expanded_month)                                month_expanded_count\n     , month_category_and_segment_expanded_amount / nullif(month_segment_expanded_amount, 0) expanded_amount_pct_of_segment\n     , expanded_amount / nullif(month_segment_expanded_amount, 0)                            expanded_amount_category_pct_of_segment\n     , expanded_amount / nullif(month_expanded_amount, 0)                                    expanded_amount_pct\n     , month_segment_expanded_amount / nullif(month_expanded_amount, 0)                      expanded_amount_segment_pct\n  FROM expanded\n           LEFT JOIN list_size USING (subscription_id)\n           LEFT JOIN {{ ref(\"subscriptions_with_success_managers\") }} ON subscription_id = drip_subscription_id\n WHERE action = 'expanded'\n   AND (n = 1 OR n IS NULL)\n GROUP BY expanded_day, expanded_month, is_success_managed, category, is_oms_connected, expanded_day_buckets", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "visualizations/expanded_mrr_dashboard.sql", "original_file_path": "models/visualizations/expanded_mrr_dashboard.sql", "name": "expanded_mrr_dashboard", "alias": "expanded_mrr_dashboard", "checksum": {"name": "sha256", "checksum": "03da0c5a2fd79e81dc1fbf9169ce251d6d0b8b632432e17fe4f66b54d88f855c"}, "tags": [], "refs": [["customer_mrr_changed"], ["account_metrics_current"], ["account_events"], ["account_metrics_current"], ["subscriptions_with_success_managers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/visualizations/expanded_mrr_dashboard.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "visualizations", "bind": false}, "created_at": 1674498297.918356, "compiled_code": "WITH expanded AS\n      (\n        SELECT subscription_id\n               , date_trunc('d', occurred_at)::date              expanded_date\n               , mrr_cents_delta / 100                          expanded_mrr\n               , action\n               , CASE WHEN action = 'expanded' THEN 1 ELSE -1 END expanded_counter\n               , CASE\n                     WHEN expanded_mrr <= 250\n                         THEN 1\n                     WHEN expanded_mrr <= 1200\n                         THEN 2\n                         ELSE 3 END AS                           category_mrr\n               , date_diff('d',\n                           date_trunc('d', first_value(occurred_at)\n                                           OVER (PARTITION BY subscription_id))::date,\n                           expanded_date)\n                                                                 active_days\n               , CASE\n                     WHEN active_days <= 90\n                         THEN 'first 90 days'\n                     WHEN active_days <= 365\n                         THEN '90 to 365 days'\n                         ELSE '365+ days' END                    expanded_day_buckets\n        FROM \"dumps\".\"dev\".\"customer_mrr_changed\"\n        WHERE action = 'expanded'\n      )\n     , oms_connected AS\n      (\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM current.integrations\n                     JOIN \"dumps\".\"dev\".\"account_metrics_current\" ON account_public_id = account_param\n           WHERE deleted_at IS NULL\n             AND provider_param = 'bigcommerce'\n           UNION\n          SELECT DISTINCT account_id\n                        , TRUE is_oms_connected\n            FROM \"dumps\".\"dev\".\"account_events\"\n           WHERE action = 'OMS connected'\n      )\n     , account_to_subscription AS\n      (\n          SELECT DISTINCT subscription_id\n                        , account_id\n                        , is_oms_connected\n            FROM \"dumps\".\"dev\".\"account_metrics_current\"\n                     LEFT JOIN oms_connected USING (account_id)\n      )\n     , list_size AS\n      (\n          SELECT subscription_id\n               , occurred_on\n               , is_oms_connected\n               , sum(billable_subscribers_v2)                                               list_size\n               , CASE\n                     WHEN list_size < 15000\n                         THEN 1\n                     WHEN list_size <= 80000\n                         THEN 2\n                         ELSE 3 END AS                                                      category_list\n               , row_number() OVER (PARTITION BY subscription_id ORDER BY occurred_on DESC) n\n            FROM current.account_daily_usage_stats\n                     JOIN account_to_subscription USING (account_id)\n           GROUP BY subscription_id, occurred_on, is_oms_connected\n      )\nSELECT date_trunc('d', expanded_date)::date                                               expanded_day\n     , date_trunc('mon', expanded_date)::date                                             expanded_month\n     , CASE\n           WHEN category_mrr > nvl(category_list, 0)\n               THEN category_mrr\n               ELSE category_list END                                                  category\n     , CASE\n           WHEN category = 1\n               THEN 'VSB'\n           WHEN category = 2\n               THEN 'SMB'\n           WHEN category = 3\n               THEN 'MM'\n    END                                                                                category_name\n     , nvl(is_oms_connected, FALSE)                                                    is_ecommerce\n     , expanded_day_buckets\n     , drip_success_manager AS                                                         is_success_managed\n     , CASE\n           WHEN category = 1 AND is_ecommerce\n               THEN 'VSB (ecom)'\n           WHEN category = 2 AND is_ecommerce\n               THEN 'SMB (ecom)'\n           WHEN category = 3 AND is_ecommerce\n               THEN 'MM (ecom)'\n           WHEN category = 1 AND NOT is_ecommerce\n               THEN 'VSB (non ecom)'\n           WHEN category = 2 AND NOT is_ecommerce\n               THEN 'SMB (non ecom)'\n           WHEN category = 3 AND NOT is_ecommerce\n               THEN 'MM (non ecom)' END                                                category_and_ecommerce\n     , sum(expanded_mrr)                                                             expanded_amount\n     , sum(expanded_counter)                                                         expanded_count\n     , sum(expanded_amount)\n       OVER (PARTITION BY expanded_month, category_and_ecommerce)                    month_category_and_segment_expanded_amount\n     , sum(expanded_count)\n       OVER (PARTITION BY expanded_month, category_and_ecommerce)                    month_category_and_segment_expanded_count\n     , sum(expanded_amount) OVER (PARTITION BY expanded_month, is_ecommerce)                 month_segment_expanded_amount\n     , sum(expanded_count) OVER (PARTITION BY expanded_month, is_ecommerce)                  month_segment_expanded_count\n     , sum(expanded_amount) OVER (PARTITION BY expanded_month)                               month_expanded_amount\n     , sum(expanded_count) OVER (PARTITION BY expanded_month)                                month_expanded_count\n     , month_category_and_segment_expanded_amount / nullif(month_segment_expanded_amount, 0) expanded_amount_pct_of_segment\n     , expanded_amount / nullif(month_segment_expanded_amount, 0)                            expanded_amount_category_pct_of_segment\n     , expanded_amount / nullif(month_expanded_amount, 0)                                    expanded_amount_pct\n     , month_segment_expanded_amount / nullif(month_expanded_amount, 0)                      expanded_amount_segment_pct\n  FROM expanded\n           LEFT JOIN list_size USING (subscription_id)\n           LEFT JOIN \"dumps\".\"dev\".\"subscriptions_with_success_managers\" ON subscription_id = drip_subscription_id\n WHERE action = 'expanded'\n   AND (n = 1 OR n IS NULL)\n GROUP BY expanded_day, expanded_month, is_success_managed, category, is_oms_connected, expanded_day_buckets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"expanded_mrr_dashboard\""}, "model.drip_data_intelligence.product_usage_snapshot_2022_cohort_by_week": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date"]}, "config": {"enabled": true, "alias": null, "schema": "visualizations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "visualizations", "product_usage_snapshot_2022_cohort_by_week"], "unique_id": "model.drip_data_intelligence.product_usage_snapshot_2022_cohort_by_week", "raw_code": "with pre_agg as\n    (\n        SELECT pds.account_id\n             , pds.as_of_date\n             , pds.subscription_id\n             , pds.account_public_id\n             , pds.activation_date\n             , pds.activation_cohort_week\n             , pds.is_active\n             , pds.days_active\n             , pds.churn_day\n             , pds.mrr_current\n             , pds.trust_status\n             , pds.is_oms_connected\n             , pds.oms_connected_date\n             , pds.oms_connected_provider\n             , pds.oms_indicated_date\n             , pds.is_oms_indicated\n             , pds.oms_indicated_provider\n             , pds.is_first_person_added\n             , pds.first_person_added_date\n             , pds.is_first_email_campaign_sent\n             , pds.first_email_campaign_sent_date\n             , pds.is_js_snippet_installed\n             , pds.js_snippet_installed_date\n             , pds.is_workflow_enabled\n             , pds.first_workflow_enabled_date\n             , pds.is_form_enabled\n             , pds.first_form_enabled_date\n             , pds.is_first_sms_sent\n             , pds.first_sent_sms_date\n             , pds.last_logged_in_at\n             , pds.last_payment_date\n             , pds.last_payment_amount\n             , pes.subscription_id\n             , pes.account_public_id\n             , pes.forms_activated_total\n             , pes.forms_activated_by_day\n             , pes.forms_activated_7_days\n             , pes.forms_activated_30_days\n             , pes.workflows_activated_total\n             , pes.workflows_activated_by_day\n             , pes.workflows_activated_7_days\n             , pes.workflows_activated_30_days\n             , pes.campaigns_sent_total\n             , pes.campaigns_sent_by_day\n             , pes.campaigns_sent_7_days\n             , pes.campaigns_sent_30_days\n             , pes.campaigns_delivered_total\n             , pes.campaigns_delivered_by_day\n             , pes.campaigns_delivered_7_days\n             , pes.campaigns_delivered_30_days\n             , pes.segments_created_by_day\n             , pes.segments_created\n             , pes.segments_created_7_days\n             , pes.segments_created_30_days\n             , dim_date.calendar_date\n             , dim_date.week_of_year\n             , dim_date.week_name\n             , dim_date.day_of_week\n             , dim_date.first_date_of_week\n             , dim_date.last_date_of_week\n             , dim_date.first_date_of_month\n             , dim_date.last_date_of_month\n             , dim_date.first_date_of_quarter\n             , dim_date.last_date_of_quarter\n             , dim_date.first_date_of_year\n             , dim_date.last_date_of_year\n             , dim_date.calendar_month\n             , dim_date.calendar_day\n             , dim_date.calendar_year\n             , dim_date.calendar_quarter\n             , dim_date.days_in_month\n             , dim_date.day_name\n             , dim_date.month_name\n             , row_number()\n               OVER (\n                   PARTITION BY pds.account_id, dim_date.first_date_of_week\n                   ORDER BY pds.as_of_date DESC) AS n\n          FROM alpha.product_usage_dimensions_snapshot pds\n                   JOIN alpha.product_usage_events_snapshot pes USING (account_id, as_of_date)\n                   JOIN {{ source(\"alpha_not_owned_by_dbt\", \"dim_date\") }} ON pds.as_of_date = dim_date.calendar_date\n    )\nSELECT pre_agg.first_date_of_week\n     , pre_agg.week_of_year\n     , pre_agg.activation_cohort_week\n     , pre_agg.is_active\n     , count(*)                               AS count_of_accounts\n     , sum(\n        CASE\n            WHEN pre_agg.mrr_current > 0\n                THEN pre_agg.mrr_current::double precision\n                ELSE pre_agg.last_payment_amount\n            END)                              AS total_mrr_with_churn\n     , sum(pre_agg.mrr_current)               AS total_active_mrr\n     , avg(pre_agg.mrr_current)               AS average_mrr\n     , sum(\n        CASE\n            WHEN pre_agg.is_oms_connected\n                THEN 1\n                ELSE 0\n            END)                              AS oms_connected_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_oms_indicated\n                THEN 1\n                ELSE 0\n            END)                              AS oms_indicated_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_first_person_added\n                THEN 1\n                ELSE 0\n            END)                              AS first_person_added_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_first_email_campaign_sent\n                THEN 1\n                ELSE 0\n            END)                              AS first_email_campaign_sent_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_js_snippet_installed\n                THEN 1\n                ELSE 0\n            END)                              AS js_snippet_installed_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_workflow_enabled\n                THEN 1\n                ELSE 0\n            END)                              AS workflow_enabled_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_form_enabled\n                THEN 1\n                ELSE 0\n            END)                              AS form_enabled_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_first_sms_sent\n                THEN 1\n                ELSE 0\n            END)                              AS first_sms_sent_count\n     , sum(pre_agg.forms_activated_total)     AS forms_activated_total\n     , avg(pre_agg.forms_activated_total)     AS forms_activated_avg\n     , sum(pre_agg.workflows_activated_total) AS workflows_activated_total\n     , avg(pre_agg.workflows_activated_total) AS workflows_activated_avg\n     , sum(pre_agg.campaigns_sent_total)      AS campaigns_sent_total\n     , avg(pre_agg.campaigns_sent_total)      AS campaigns_sent_avg\n     , sum(pre_agg.campaigns_delivered_total) AS campaigns_delivered_total\n     , avg(pre_agg.campaigns_delivered_total) AS campaigns_delivered_avg\n     , sum(pre_agg.segments_created)          AS segments_created_total\n     , avg(pre_agg.segments_created)          AS segments_created_avg\n  FROM pre_agg\n WHERE pre_agg.n = 1\n   AND date_trunc('y'::text, pre_agg.activation_cohort_week::timestamp WITHOUT TIME ZONE) =\n       '2022-01-01 00:00:00'::timestamp WITHOUT TIME ZONE\n GROUP BY pre_agg.first_date_of_week, pre_agg.week_of_year, pre_agg.activation_cohort_week, pre_agg.is_active\n ORDER BY pre_agg.first_date_of_week, pre_agg.activation_cohort_week, pre_agg.is_active", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "visualizations/product_usage_snapshot_2022_cohort_by_week.sql", "original_file_path": "models/visualizations/product_usage_snapshot_2022_cohort_by_week.sql", "name": "product_usage_snapshot_2022_cohort_by_week", "alias": "product_usage_snapshot_2022_cohort_by_week", "checksum": {"name": "sha256", "checksum": "29493a1c0f19bc9249bb7e92b57832e33ad314e0c4db8aa9ef1464bde04fe076"}, "tags": [], "refs": [], "sources": [["alpha_not_owned_by_dbt", "dim_date"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/visualizations/product_usage_snapshot_2022_cohort_by_week.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "visualizations", "bind": false}, "created_at": 1674498297.9213068, "compiled_code": "with pre_agg as\n    (\n        SELECT pds.account_id\n             , pds.as_of_date\n             , pds.subscription_id\n             , pds.account_public_id\n             , pds.activation_date\n             , pds.activation_cohort_week\n             , pds.is_active\n             , pds.days_active\n             , pds.churn_day\n             , pds.mrr_current\n             , pds.trust_status\n             , pds.is_oms_connected\n             , pds.oms_connected_date\n             , pds.oms_connected_provider\n             , pds.oms_indicated_date\n             , pds.is_oms_indicated\n             , pds.oms_indicated_provider\n             , pds.is_first_person_added\n             , pds.first_person_added_date\n             , pds.is_first_email_campaign_sent\n             , pds.first_email_campaign_sent_date\n             , pds.is_js_snippet_installed\n             , pds.js_snippet_installed_date\n             , pds.is_workflow_enabled\n             , pds.first_workflow_enabled_date\n             , pds.is_form_enabled\n             , pds.first_form_enabled_date\n             , pds.is_first_sms_sent\n             , pds.first_sent_sms_date\n             , pds.last_logged_in_at\n             , pds.last_payment_date\n             , pds.last_payment_amount\n             , pes.subscription_id\n             , pes.account_public_id\n             , pes.forms_activated_total\n             , pes.forms_activated_by_day\n             , pes.forms_activated_7_days\n             , pes.forms_activated_30_days\n             , pes.workflows_activated_total\n             , pes.workflows_activated_by_day\n             , pes.workflows_activated_7_days\n             , pes.workflows_activated_30_days\n             , pes.campaigns_sent_total\n             , pes.campaigns_sent_by_day\n             , pes.campaigns_sent_7_days\n             , pes.campaigns_sent_30_days\n             , pes.campaigns_delivered_total\n             , pes.campaigns_delivered_by_day\n             , pes.campaigns_delivered_7_days\n             , pes.campaigns_delivered_30_days\n             , pes.segments_created_by_day\n             , pes.segments_created\n             , pes.segments_created_7_days\n             , pes.segments_created_30_days\n             , dim_date.calendar_date\n             , dim_date.week_of_year\n             , dim_date.week_name\n             , dim_date.day_of_week\n             , dim_date.first_date_of_week\n             , dim_date.last_date_of_week\n             , dim_date.first_date_of_month\n             , dim_date.last_date_of_month\n             , dim_date.first_date_of_quarter\n             , dim_date.last_date_of_quarter\n             , dim_date.first_date_of_year\n             , dim_date.last_date_of_year\n             , dim_date.calendar_month\n             , dim_date.calendar_day\n             , dim_date.calendar_year\n             , dim_date.calendar_quarter\n             , dim_date.days_in_month\n             , dim_date.day_name\n             , dim_date.month_name\n             , row_number()\n               OVER (\n                   PARTITION BY pds.account_id, dim_date.first_date_of_week\n                   ORDER BY pds.as_of_date DESC) AS n\n          FROM alpha.product_usage_dimensions_snapshot pds\n                   JOIN alpha.product_usage_events_snapshot pes USING (account_id, as_of_date)\n                   JOIN \"dumps\".\"alpha\".\"dim_date\" ON pds.as_of_date = dim_date.calendar_date\n    )\nSELECT pre_agg.first_date_of_week\n     , pre_agg.week_of_year\n     , pre_agg.activation_cohort_week\n     , pre_agg.is_active\n     , count(*)                               AS count_of_accounts\n     , sum(\n        CASE\n            WHEN pre_agg.mrr_current > 0\n                THEN pre_agg.mrr_current::double precision\n                ELSE pre_agg.last_payment_amount\n            END)                              AS total_mrr_with_churn\n     , sum(pre_agg.mrr_current)               AS total_active_mrr\n     , avg(pre_agg.mrr_current)               AS average_mrr\n     , sum(\n        CASE\n            WHEN pre_agg.is_oms_connected\n                THEN 1\n                ELSE 0\n            END)                              AS oms_connected_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_oms_indicated\n                THEN 1\n                ELSE 0\n            END)                              AS oms_indicated_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_first_person_added\n                THEN 1\n                ELSE 0\n            END)                              AS first_person_added_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_first_email_campaign_sent\n                THEN 1\n                ELSE 0\n            END)                              AS first_email_campaign_sent_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_js_snippet_installed\n                THEN 1\n                ELSE 0\n            END)                              AS js_snippet_installed_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_workflow_enabled\n                THEN 1\n                ELSE 0\n            END)                              AS workflow_enabled_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_form_enabled\n                THEN 1\n                ELSE 0\n            END)                              AS form_enabled_count\n     , sum(\n        CASE\n            WHEN pre_agg.is_first_sms_sent\n                THEN 1\n                ELSE 0\n            END)                              AS first_sms_sent_count\n     , sum(pre_agg.forms_activated_total)     AS forms_activated_total\n     , avg(pre_agg.forms_activated_total)     AS forms_activated_avg\n     , sum(pre_agg.workflows_activated_total) AS workflows_activated_total\n     , avg(pre_agg.workflows_activated_total) AS workflows_activated_avg\n     , sum(pre_agg.campaigns_sent_total)      AS campaigns_sent_total\n     , avg(pre_agg.campaigns_sent_total)      AS campaigns_sent_avg\n     , sum(pre_agg.campaigns_delivered_total) AS campaigns_delivered_total\n     , avg(pre_agg.campaigns_delivered_total) AS campaigns_delivered_avg\n     , sum(pre_agg.segments_created)          AS segments_created_total\n     , avg(pre_agg.segments_created)          AS segments_created_avg\n  FROM pre_agg\n WHERE pre_agg.n = 1\n   AND date_trunc('y'::text, pre_agg.activation_cohort_week::timestamp WITHOUT TIME ZONE) =\n       '2022-01-01 00:00:00'::timestamp WITHOUT TIME ZONE\n GROUP BY pre_agg.first_date_of_week, pre_agg.week_of_year, pre_agg.activation_cohort_week, pre_agg.is_active\n ORDER BY pre_agg.first_date_of_week, pre_agg.activation_cohort_week, pre_agg.is_active", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"product_usage_snapshot_2022_cohort_by_week\""}, "model.drip_data_intelligence.product_usage_snapshot_activated_2022": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "visualizations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "visualizations", "product_usage_snapshot_activated_2022"], "unique_id": "model.drip_data_intelligence.product_usage_snapshot_activated_2022", "raw_code": "SELECT pds.subscription_id\n       , pds.account_id\n       , pds.account_public_id\n       , pds.as_of_date\n       , pds.activation_date\n       , pds.activation_cohort_week\n       , pds.is_active\n       , pds.days_active\n       , pds.churn_day\n       , pds.mrr_current\n       , pds.trust_status\n       , pds.is_oms_connected\n       , pds.oms_connected_date\n       , pds.oms_connected_provider\n       , pds.oms_indicated_date\n       , pds.is_oms_indicated\n       , pds.oms_indicated_provider\n       , pds.is_first_person_added\n       , pds.first_person_added_date\n       , pds.is_first_email_campaign_sent\n       , pds.first_email_campaign_sent_date\n       , pds.is_js_snippet_installed\n       , pds.js_snippet_installed_date\n       , pds.is_workflow_enabled\n       , pds.first_workflow_enabled_date\n       , pds.is_form_enabled\n       , pds.first_form_enabled_date\n       , pds.is_first_sms_sent\n       , pds.first_sent_sms_date\n       , pds.last_logged_in_at\n       , pds.last_payment_date\n       , pds.last_payment_amount\n       , pes.forms_activated_total\n       , pes.forms_activated_by_day\n       , pes.forms_activated_7_days\n       , pes.forms_activated_30_days\n       , pes.workflows_activated_total\n       , pes.workflows_activated_by_day\n       , pes.workflows_activated_7_days\n       , pes.workflows_activated_30_days\n       , pes.campaigns_sent_total\n       , pes.campaigns_sent_by_day\n       , pes.campaigns_sent_7_days\n       , pes.campaigns_sent_30_days\n       , pes.campaigns_delivered_total\n       , pes.campaigns_delivered_by_day\n       , pes.campaigns_delivered_7_days\n       , pes.campaigns_delivered_30_days\n       , pes.segments_created_by_day\n       , pes.segments_created\n       , pes.segments_created_7_days\n       , pes.segments_created_30_days\n    FROM alpha.product_usage_dimensions_snapshot pds\n             JOIN alpha.product_usage_events_snapshot pes USING (account_id, as_of_date)\n   WHERE NOT pds.is_active\n     AND extract('y' from as_of_date) = 2022", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "visualizations/product_usage_snapshot_activated_2022.sql", "original_file_path": "models/visualizations/product_usage_snapshot_activated_2022.sql", "name": "product_usage_snapshot_activated_2022", "alias": "product_usage_snapshot_activated_2022", "checksum": {"name": "sha256", "checksum": "573300630beb9139e52e516876fd5bb0ebb0164dd547cb61096a83e2ba17cd18"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/visualizations/product_usage_snapshot_activated_2022.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "visualizations", "bind": false}, "created_at": 1674498297.9237819, "compiled_code": "SELECT pds.subscription_id\n       , pds.account_id\n       , pds.account_public_id\n       , pds.as_of_date\n       , pds.activation_date\n       , pds.activation_cohort_week\n       , pds.is_active\n       , pds.days_active\n       , pds.churn_day\n       , pds.mrr_current\n       , pds.trust_status\n       , pds.is_oms_connected\n       , pds.oms_connected_date\n       , pds.oms_connected_provider\n       , pds.oms_indicated_date\n       , pds.is_oms_indicated\n       , pds.oms_indicated_provider\n       , pds.is_first_person_added\n       , pds.first_person_added_date\n       , pds.is_first_email_campaign_sent\n       , pds.first_email_campaign_sent_date\n       , pds.is_js_snippet_installed\n       , pds.js_snippet_installed_date\n       , pds.is_workflow_enabled\n       , pds.first_workflow_enabled_date\n       , pds.is_form_enabled\n       , pds.first_form_enabled_date\n       , pds.is_first_sms_sent\n       , pds.first_sent_sms_date\n       , pds.last_logged_in_at\n       , pds.last_payment_date\n       , pds.last_payment_amount\n       , pes.forms_activated_total\n       , pes.forms_activated_by_day\n       , pes.forms_activated_7_days\n       , pes.forms_activated_30_days\n       , pes.workflows_activated_total\n       , pes.workflows_activated_by_day\n       , pes.workflows_activated_7_days\n       , pes.workflows_activated_30_days\n       , pes.campaigns_sent_total\n       , pes.campaigns_sent_by_day\n       , pes.campaigns_sent_7_days\n       , pes.campaigns_sent_30_days\n       , pes.campaigns_delivered_total\n       , pes.campaigns_delivered_by_day\n       , pes.campaigns_delivered_7_days\n       , pes.campaigns_delivered_30_days\n       , pes.segments_created_by_day\n       , pes.segments_created\n       , pes.segments_created_7_days\n       , pes.segments_created_30_days\n    FROM alpha.product_usage_dimensions_snapshot pds\n             JOIN alpha.product_usage_events_snapshot pes USING (account_id, as_of_date)\n   WHERE NOT pds.is_active\n     AND extract('y' from as_of_date) = 2022", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"product_usage_snapshot_activated_2022\""}, "model.drip_data_intelligence.oms_indicated_on_subscription": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.data_intelligence.oms_indicated_subscription_events"]}, "config": {"enabled": true, "alias": null, "schema": "events", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "events", "oms_indicated_on_subscription"], "unique_id": "model.drip_data_intelligence.oms_indicated_on_subscription", "raw_code": "SELECT subscription_id, occurred_at, oms_indicated FROM {{ source('data_intelligence', 'oms_indicated_subscription_events') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "events/oms_indicated_on_subscription.sql", "original_file_path": "models/events/oms_indicated_on_subscription.sql", "name": "oms_indicated_on_subscription", "alias": "oms_indicated_on_subscription", "checksum": {"name": "sha256", "checksum": "2622e9091f9ba0b2f933aaebe1db70660c95f441a1cb42da45c1b76119e8b1ed"}, "tags": [], "refs": [], "sources": [["data_intelligence", "oms_indicated_subscription_events"]], "metrics": [], "description": "Detection in the change of state of OMS indicated on a subscription. Valid within the bounded context of Product. Sources and business rules to detect changes developed in collaboration with the Growth team. This is essentially a rollup of OMS indicated on account and the account on the subscription with the largest number of subscribers determines the OMS on the subscription.\n", "columns": {"subscription_id": {"name": "subscription_id", "description": "Foreign key to subscriptions through subscription.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "When the change was detected", "meta": {}, "data_type": null, "quote": null, "tags": []}, "oms_indicated": {"name": "oms_indicated", "description": "The name of the OMS indicated", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/events/events.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/events/oms_indicated_on_subscription.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "events", "materialized": "table"}, "created_at": 1674498298.4050062, "compiled_code": "SELECT subscription_id, occurred_at, oms_indicated FROM \"dumps\".\"data_intelligence\".\"oms_indicated_subscription_events\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"oms_indicated_on_subscription\""}, "model.drip_data_intelligence.sms_credit_ledgers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.finance.sms_credit_ledgers"]}, "config": {"enabled": true, "alias": null, "schema": "events", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "events", "sms_credit_ledgers"], "unique_id": "model.drip_data_intelligence.sms_credit_ledgers", "raw_code": "SELECT * FROM {{ source('finance', 'sms_credit_ledgers') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "events/sms_credit_ledgers.sql", "original_file_path": "models/events/sms_credit_ledgers.sql", "name": "sms_credit_ledgers", "alias": "sms_credit_ledgers", "checksum": {"name": "sha256", "checksum": "4e1b140350ca4e2fb19734dcdf969b4c81a3935b64ea7e0199cf5779a2bce4db"}, "tags": [], "refs": [], "sources": [["finance", "sms_credit_ledgers"]], "metrics": [], "description": "The ledger entries that comprise our understanding of SMS Recognized Revenue. Valid within the bounded context of SMS Revenue. This is a model layered on top of various signals received from the monolith and employs business rules determined in collaboration with the Finance team. It follows a double entry bookkeeping accounting pattern, but we've called the accounts \"envelopes\" rather than causing potential confusion with the notion of an \"account\" in the broader organization.\n", "columns": {"subscription_id": {"name": "subscription_id", "description": "Foreign key to subscriptions through subscription.id. While credits are issued and consumed for accounts within the monolith, this model assumes they are pooled within a subscription. This could lead to some idiosyncratic edge cases where within the monolith, an account is overdrawn on SMS credits, but within this model the account consumes credits allocated to a different account under the same subscription.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_date": {"name": "occurred_date", "description": "The date the event occurred. Unfortunately, due to the resolution afforded by sms_credit_rollups, we do not have visibility into certain events that occur at a finer resolution, so all events are aggregated at the day level.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The value of the entry. In dollars. Should always be positive", "meta": {}, "data_type": null, "quote": null, "tags": []}, "debit_envelope_date": {"name": "debit_envelope_date", "description": "The date the envelope where credits are drawn from was created. Useful for understanding how long between when credits were received and used. May be null if the envelope doesn't have a creation date per the model.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "debit_category": {"name": "debit_category", "description": "The type of envelope. Useful for inferring the triggering of this event and for determining how to book the entry.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_envelope_date": {"name": "credit_envelope_date", "description": "The date the envelope where credits are deposited to was created. Useful for understanding how long between when credits were received and used. May be null if the envelope doesn't have a creation date per the model.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_category": {"name": "credit_category", "description": "The type of envelope. Useful for inferring the triggering of this event and for determining how to book the entry.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/events/events.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/events/sms_credit_ledgers.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "events", "materialized": "table"}, "created_at": 1674498298.401632, "compiled_code": "SELECT * FROM \"dumps\".\"finance\".\"sms_credit_ledgers\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"sms_credit_ledgers\""}, "model.drip_data_intelligence.oms_indicated_on_account": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.data_intelligence.oms_indicated_account_events"]}, "config": {"enabled": true, "alias": null, "schema": "events", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "events", "oms_indicated_on_account"], "unique_id": "model.drip_data_intelligence.oms_indicated_on_account", "raw_code": "SELECT account_id, occurred_at, oms_indicated FROM {{ source('data_intelligence', 'oms_indicated_account_events') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "events/oms_indicated_on_account.sql", "original_file_path": "models/events/oms_indicated_on_account.sql", "name": "oms_indicated_on_account", "alias": "oms_indicated_on_account", "checksum": {"name": "sha256", "checksum": "10dcf802adc9f0dea2cd9fcce37e823d756ca26b79b46713282728ed2836640e"}, "tags": [], "refs": [], "sources": [["data_intelligence", "oms_indicated_account_events"]], "metrics": [], "description": "Detection in the change of state of OMS indicated on an account. Valid within the bounded context of Product. Sources and business rules to detect changes developed in collaboration with the Growth team.\n", "columns": {"account_id": {"name": "account_id", "description": "Foreign key to accounts through account.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "When the change was detected", "meta": {}, "data_type": null, "quote": null, "tags": []}, "oms_indicated": {"name": "oms_indicated", "description": "The name of the OMS indicated", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/events/events.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/events/oms_indicated_on_account.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "events", "materialized": "table"}, "created_at": 1674498298.403434, "compiled_code": "SELECT account_id, occurred_at, oms_indicated FROM \"dumps\".\"data_intelligence\".\"oms_indicated_account_events\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"oms_indicated_on_account\""}, "model.drip_data_intelligence.customer_mrr_changed": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.finance.mrr_kpi"]}, "config": {"enabled": true, "alias": null, "schema": "events", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "events", "customer_mrr_changed"], "unique_id": "model.drip_data_intelligence.customer_mrr_changed", "raw_code": "SELECT id                                                                                        AS subscription_id,\n       CASE\n           WHEN type = 'activated_emic' THEN 'converted'\n           ELSE CASE\n                    WHEN type = 'expanded_emic' THEN 'expanded'\n                    ELSE CASE\n                             WHEN type = 'contracted_emic' THEN 'contracted'\n                             ELSE CASE WHEN type = 'churned_emic' THEN 'churned'\n                                ELSE CASE WHEN type = 'reactivated_emic' THEN 'reconverted' END END END END END AS action,\n       occurred_at,\n       seq                                                                                       AS sequence,\n       amount                                                                                    AS mrr_cents_delta,\n       new_value                                                                                 AS mrr_cents_current\nFROM {{ source('finance', 'mrr_kpi') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "events/customer_mrr_changed.sql", "original_file_path": "models/events/customer_mrr_changed.sql", "name": "customer_mrr_changed", "alias": "customer_mrr_changed", "checksum": {"name": "sha256", "checksum": "614139aa527d75b7e98942a4de0be1a217ee05ade2994c15df1ce2e57b5fff78"}, "tags": [], "refs": [], "sources": [["finance", "mrr_kpi"]], "metrics": [], "description": "Changes to a customer's MRR driven by billing. Valid within the bounded context of Recurring Revenue. Business rules and sources developed in collaboration with Finance and Billing.\n", "columns": {"subscription_id": {"name": "subscription_id", "description": "Foreign key to subscriptions through subscription.id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action": {"name": "action", "description": "The action precipitating the change in MRR", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_at": {"name": "occurred_at", "description": "When the event occurred", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sequence": {"name": "sequence", "description": "A tiebreaker for occurred_at in rare cases where two events are detected to occur simultaneously", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mrr_cents_current": {"name": "mrr_cents_current", "description": "The MRR value in cents of the customer once the event has been applied", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mrr_cents_delta": {"name": "mrr_cents_delta", "description": "The change in MRR in cents as the result of this event", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/events/events.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/events/customer_mrr_changed.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "events", "materialized": "table"}, "created_at": 1674498298.407812, "compiled_code": "SELECT id                                                                                        AS subscription_id,\n       CASE\n           WHEN type = 'activated_emic' THEN 'converted'\n           ELSE CASE\n                    WHEN type = 'expanded_emic' THEN 'expanded'\n                    ELSE CASE\n                             WHEN type = 'contracted_emic' THEN 'contracted'\n                             ELSE CASE WHEN type = 'churned_emic' THEN 'churned'\n                                ELSE CASE WHEN type = 'reactivated_emic' THEN 'reconverted' END END END END END AS action,\n       occurred_at,\n       seq                                                                                       AS sequence,\n       amount                                                                                    AS mrr_cents_delta,\n       new_value                                                                                 AS mrr_cents_current\nFROM \"dumps\".\"finance\".\"mrr_kpi\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"customer_mrr_changed\""}, "model.drip_data_intelligence.account_attributed_revenue": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.purchases_corrected"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_attributed_revenue"], "unique_id": "model.drip_data_intelligence.account_attributed_revenue", "raw_code": "WITH purchases_truncated_to_day AS (\n\tSELECT\n\t\taccount_id\n\t\t, amount_usd\n\t\t, date_trunc('d',occurred_at)::DATE as occurred_at\n\t\t, attributed_email_id\n\t\t, attributed_smsable_id\n\t\t, currency_code AS purchase_currency\n\tFROM {{ ref(\"purchases_corrected\") }})\nSELECT\n    account_id\n    , occurred_at\n    , SUM(\n        CASE\n            WHEN attributed_email_id IS NOT NULL THEN amount_usd\n            ELSE 0\n        END\n    ) AS email_attributed_revenue_USD\n    , SUM(\n        CASE\n            WHEN attributed_smsable_id IS NOT NULL THEN amount_usd\n            ELSE 0\n        END\n    ) AS sms_attributed_revenue_USD\n    , SUM (amount_usd) AS total_revenue_USD\nFROM purchases_truncated_to_day\nGROUP BY account_id, occurred_at\nORDER BY account_id, occurred_at", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_attributed_revenue.sql", "original_file_path": "models/alpha/account_attributed_revenue.sql", "name": "account_attributed_revenue", "alias": "account_attributed_revenue", "checksum": {"name": "sha256", "checksum": "ce663911cc0298362ece58316b25b3406c9a4ae17fce87f18e0fe50988a62819"}, "tags": [], "refs": [["purchases_corrected"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_attributed_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.936387, "compiled_code": "WITH purchases_truncated_to_day AS (\n\tSELECT\n\t\taccount_id\n\t\t, amount_usd\n\t\t, date_trunc('d',occurred_at)::DATE as occurred_at\n\t\t, attributed_email_id\n\t\t, attributed_smsable_id\n\t\t, currency_code AS purchase_currency\n\tFROM \"dumps\".\"dev\".\"purchases_corrected\")\nSELECT\n    account_id\n    , occurred_at\n    , SUM(\n        CASE\n            WHEN attributed_email_id IS NOT NULL THEN amount_usd\n            ELSE 0\n        END\n    ) AS email_attributed_revenue_USD\n    , SUM(\n        CASE\n            WHEN attributed_smsable_id IS NOT NULL THEN amount_usd\n            ELSE 0\n        END\n    ) AS sms_attributed_revenue_USD\n    , SUM (amount_usd) AS total_revenue_USD\nFROM purchases_truncated_to_day\nGROUP BY account_id, occurred_at\nORDER BY account_id, occurred_at", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"account_attributed_revenue\""}, "model.drip_data_intelligence.slt_rocks_churn": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscription_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "slt_rocks_churn"], "unique_id": "model.drip_data_intelligence.slt_rocks_churn", "raw_code": "SELECT *,\n       CASE\n           WHEN mrr_before_churn <= 250 THEN 'VSB'\n           WHEN mrr_before_churn <= 1200 THEN 'SMB'\n           ELSE 'MM'\n           END                         AS subscription_size,\n       occurred_date - activation_date AS lifespan,\n       mrr_before_churn * 12           AS arr_before_churn,\n       CASE --JN wants 3 buckets [first 90 days, first year, 1 year +]\n           WHEN lifespan < 91 THEN 'FIRST 90 DAYS'\n           WHEN lifespan < 366 THEN 'FIRST YEAR'\n           ELSE 'OVER 1 YEAR'\n           END                         AS lifespan_bucket,\n       CASE\n           WHEN occurred_date BETWEEN CAST(CAST(getdate() AS DATE) - 7 AS DATE) AND CAST(CAST(getdate() AS DATE) - 1 AS DATE)\n               THEN TRUE\n           ELSE FALSE END              AS trailing_7_days,\n       CASE\n           WHEN occurred_date BETWEEN CAST(CAST(getdate() AS DATE) - 30 AS DATE) AND CAST(CAST(getdate() AS DATE) - 1 AS DATE)\n               THEN TRUE\n           ELSE FALSE END              AS trailing_30_days,\n       CASE\n           WHEN occurred_date BETWEEN CAST(CAST(getdate() AS DATE) - 90 AS DATE) AND CAST(CAST(getdate() AS DATE) - 1 AS DATE)\n               THEN TRUE\n           ELSE FALSE END              AS trailing_90_days\nFROM (\n         SELECT subscription_id, CAST(activated_at AS DATE) activation_date, indicated_an_oms\n         FROM {{ ref(\"subscription_metrics_current\") }}\n         WHERE current_mrr = 0\n         --assuming all churn subscriptions have current_mrr == 0\n     )\n         LEFT JOIN (SELECT DISTINCT id                        as subscription_id,\n                                    CAST(occurred_at AS DATE) AS occurred_date,\n                                    LAST_VALUE(previous_value)\n                                    over (PARTITION BY id ORDER BY seq ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) /\n                                    100                       AS mrr_before_churn\n                                    --grabbing the previous mrr right before churn\n                    FROM finance.mrr_changed)\n                   USING (subscription_id)\n\nWHERE occurred_date >= '2021-01-01'\nORDER BY occurred_date DESC", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/slt_rocks_churn.sql", "original_file_path": "models/alpha/slt_rocks_churn.sql", "name": "slt_rocks_churn", "alias": "slt_rocks_churn", "checksum": {"name": "sha256", "checksum": "607453da195712ae6c536e13700391ca48a5839c3d76af0955da44e5b2b7c31a"}, "tags": [], "refs": [["subscription_metrics_current"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/alpha/alpha.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/slt_rocks_churn.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.411318, "compiled_code": "SELECT *,\n       CASE\n           WHEN mrr_before_churn <= 250 THEN 'VSB'\n           WHEN mrr_before_churn <= 1200 THEN 'SMB'\n           ELSE 'MM'\n           END                         AS subscription_size,\n       occurred_date - activation_date AS lifespan,\n       mrr_before_churn * 12           AS arr_before_churn,\n       CASE --JN wants 3 buckets [first 90 days, first year, 1 year +]\n           WHEN lifespan < 91 THEN 'FIRST 90 DAYS'\n           WHEN lifespan < 366 THEN 'FIRST YEAR'\n           ELSE 'OVER 1 YEAR'\n           END                         AS lifespan_bucket,\n       CASE\n           WHEN occurred_date BETWEEN CAST(CAST(getdate() AS DATE) - 7 AS DATE) AND CAST(CAST(getdate() AS DATE) - 1 AS DATE)\n               THEN TRUE\n           ELSE FALSE END              AS trailing_7_days,\n       CASE\n           WHEN occurred_date BETWEEN CAST(CAST(getdate() AS DATE) - 30 AS DATE) AND CAST(CAST(getdate() AS DATE) - 1 AS DATE)\n               THEN TRUE\n           ELSE FALSE END              AS trailing_30_days,\n       CASE\n           WHEN occurred_date BETWEEN CAST(CAST(getdate() AS DATE) - 90 AS DATE) AND CAST(CAST(getdate() AS DATE) - 1 AS DATE)\n               THEN TRUE\n           ELSE FALSE END              AS trailing_90_days\nFROM (\n         SELECT subscription_id, CAST(activated_at AS DATE) activation_date, indicated_an_oms\n         FROM \"dumps\".\"dev\".\"subscription_metrics_current\"\n         WHERE current_mrr = 0\n         --assuming all churn subscriptions have current_mrr == 0\n     )\n         LEFT JOIN (SELECT DISTINCT id                        as subscription_id,\n                                    CAST(occurred_at AS DATE) AS occurred_date,\n                                    LAST_VALUE(previous_value)\n                                    over (PARTITION BY id ORDER BY seq ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) /\n                                    100                       AS mrr_before_churn\n                                    --grabbing the previous mrr right before churn\n                    FROM finance.mrr_changed)\n                   USING (subscription_id)\n\nWHERE occurred_date >= '2021-01-01'\nORDER BY occurred_date DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"slt_rocks_churn\""}, "model.drip_data_intelligence.active_account_list_size_by_day": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date", "model.drip_data_intelligence.backfill_calendar", "model.drip_data_intelligence.customer_mrr_changed", "model.drip_data_intelligence.account_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "active_account_list_size_by_day"], "unique_id": "model.drip_data_intelligence.active_account_list_size_by_day", "raw_code": "WITH calendar AS (\n  SELECT\n    *\n  FROM {{ ref(\"backfill_calendar\") }}\n  WHERE TRUE\n    AND backfill_calendar.as_of_date >= SYSDATE - 730\n), active_subscriptions AS (\n  --the aggregation is a little different here, I use windows to find the most recent event and put that on every day's record, this works much faster than I'd assumed it would\n  SELECT\n    subscription_id\n    , account_id\n    , account_public_id\n    , as_of_date\n    , activation_date\n    , dim_date.first_date_of_week activation_cohort_week\n    , mrr_current\n    , is_active\n    , active_and_churn_day_row_filter\n  FROM (\n    SELECT\n      subscription_id\n      , account_id\n      , account_public_id\n      , as_of_date\n      , MIN(events_date) OVER (PARTITION BY subscription_id) AS activation_date\n      , mrr_cents_current / 100 AS mrr_current\n      , CASE WHEN mrr_cents_current > 0 THEN TRUE ELSE FALSE END AS is_active\n      , CASE WHEN (mrr_cents_current = 0 AND as_of_date = events_date) OR mrr_cents_current > 0 THEN TRUE END AS active_and_churn_day_row_filter\n      , ROW_NUMBER() OVER (partition by subscription_id, as_of_date ORDER BY events_date DESC) AS n\n    FROM calendar\n    JOIN {{ ref(\"customer_mrr_changed\") }}\n        ON events_date = DATE_TRUNC('D', occurred_at)\n    JOIN (\n      SELECT\n        DISTINCT subscription_id\n        , account_id\n        , account_public_id\n      FROM {{ ref(\"account_metrics_current\") }}) AS account_grain\n      USING (subscription_id)\n    ) AS prep_subscriptions\n    JOIN {{ source(\"alpha_not_owned_by_dbt\", \"dim_date\") }}\n      ON calendar_date = activation_date\n    WHERE TRUE\n      AND n = 1\n      AND is_active\n), list_size AS (\n  SELECT\n    account_daily_usage_stats.account_id\n    , occurred_on\n    , billable_subscribers_v2\n  FROM current.account_daily_usage_stats\n  LEFT JOIN active_subscriptions\n    ON active_subscriptions.account_id = account_daily_usage_stats.account_id\n    AND occurred_on::date = as_of_date\n  WHERE TRUE\n    AND active_subscriptions.is_active\n)\nSELECT\n  account_id\n  , occurred_on::DATE AS occurred_on\n  , SUM(billable_subscribers_v2) AS billable_subscribers\n  , billable_subscribers - LAG(billable_subscribers) OVER (PARTITION BY account_id ORDER BY occurred_on) AS change_in_billable_subscribers_1_day\nFROM list_size\nGROUP BY occurred_on, account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/active_account_list_size_by_day.sql", "original_file_path": "models/alpha/active_account_list_size_by_day.sql", "name": "active_account_list_size_by_day", "alias": "active_account_list_size_by_day", "checksum": {"name": "sha256", "checksum": "278128bdfffbeeabefd53133c4e33eef1b4f1a55b06aa49f758a55bfc9c6e34a"}, "tags": [], "refs": [["backfill_calendar"], ["customer_mrr_changed"], ["account_metrics_current"]], "sources": [["alpha_not_owned_by_dbt", "dim_date"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/active_account_list_size_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.941181, "compiled_code": "WITH calendar AS (\n  SELECT\n    *\n  FROM \"dumps\".\"dev\".\"backfill_calendar\"\n  WHERE TRUE\n    AND backfill_calendar.as_of_date >= SYSDATE - 730\n), active_subscriptions AS (\n  --the aggregation is a little different here, I use windows to find the most recent event and put that on every day's record, this works much faster than I'd assumed it would\n  SELECT\n    subscription_id\n    , account_id\n    , account_public_id\n    , as_of_date\n    , activation_date\n    , dim_date.first_date_of_week activation_cohort_week\n    , mrr_current\n    , is_active\n    , active_and_churn_day_row_filter\n  FROM (\n    SELECT\n      subscription_id\n      , account_id\n      , account_public_id\n      , as_of_date\n      , MIN(events_date) OVER (PARTITION BY subscription_id) AS activation_date\n      , mrr_cents_current / 100 AS mrr_current\n      , CASE WHEN mrr_cents_current > 0 THEN TRUE ELSE FALSE END AS is_active\n      , CASE WHEN (mrr_cents_current = 0 AND as_of_date = events_date) OR mrr_cents_current > 0 THEN TRUE END AS active_and_churn_day_row_filter\n      , ROW_NUMBER() OVER (partition by subscription_id, as_of_date ORDER BY events_date DESC) AS n\n    FROM calendar\n    JOIN \"dumps\".\"dev\".\"customer_mrr_changed\"\n        ON events_date = DATE_TRUNC('D', occurred_at)\n    JOIN (\n      SELECT\n        DISTINCT subscription_id\n        , account_id\n        , account_public_id\n      FROM \"dumps\".\"dev\".\"account_metrics_current\") AS account_grain\n      USING (subscription_id)\n    ) AS prep_subscriptions\n    JOIN \"dumps\".\"alpha\".\"dim_date\"\n      ON calendar_date = activation_date\n    WHERE TRUE\n      AND n = 1\n      AND is_active\n), list_size AS (\n  SELECT\n    account_daily_usage_stats.account_id\n    , occurred_on\n    , billable_subscribers_v2\n  FROM current.account_daily_usage_stats\n  LEFT JOIN active_subscriptions\n    ON active_subscriptions.account_id = account_daily_usage_stats.account_id\n    AND occurred_on::date = as_of_date\n  WHERE TRUE\n    AND active_subscriptions.is_active\n)\nSELECT\n  account_id\n  , occurred_on::DATE AS occurred_on\n  , SUM(billable_subscribers_v2) AS billable_subscribers\n  , billable_subscribers - LAG(billable_subscribers) OVER (PARTITION BY account_id ORDER BY occurred_on) AS change_in_billable_subscribers_1_day\nFROM list_size\nGROUP BY occurred_on, account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"active_account_list_size_by_day\""}, "model.drip_data_intelligence.daily_kpi_sms": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.daily_kpi_by_category"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "daily_kpi_sms"], "unique_id": "model.drip_data_intelligence.daily_kpi_sms", "raw_code": "SELECT\n  {{ dbt_utils.star(ref(\"daily_kpi_by_category\"), except=[\"category\"]) }}\nFROM\n  {{ ref(\"daily_kpi_by_category\") }}\nWHERE\n  category = 'sms_monthly_service'\nORDER BY mrr_date ASC", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/daily_kpi_sms.sql", "original_file_path": "models/alpha/daily_kpi_sms.sql", "name": "daily_kpi_sms", "alias": "daily_kpi_sms", "checksum": {"name": "sha256", "checksum": "59b9ca11a5395958c99ab21bac7542fce153ca44b6c41a9e80d83d5a5b6b7825"}, "tags": [], "refs": [["daily_kpi_by_category"], ["daily_kpi_by_category"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/daily_kpi_sms.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "alpha"}, "created_at": 1674498297.944161, "compiled_code": "SELECT\n  \"mrr_date\",\n  \"active_count\",\n  \"active_mrr_cents\",\n  \"activation_count\",\n  \"activation_mrr_cents\",\n  \"reactivation_count\",\n  \"reactivation_mrr_cents\",\n  \"expansion_count\",\n  \"expansion_mrr_cents\",\n  \"contraction_count\",\n  \"contraction_mrr_cents\",\n  \"churn_count\",\n  \"churn_mrr_cents\",\n  \"first_of_month_date\",\n  \"expansion_count_by_month\",\n  \"contraction_count_by_month\"\nFROM\n  \"dumps\".\"dev\".\"daily_kpi_by_category\"\nWHERE\n  category = 'sms_monthly_service'\nORDER BY mrr_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"daily_kpi_sms\""}, "model.drip_data_intelligence.account_builtwith_technology_detected": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_builtwith_technology_detected"], "unique_id": "model.drip_data_intelligence.account_builtwith_technology_detected", "raw_code": "WITH recursive tmp(account_public_id, updated_at, DataItem, builtwith_response_json) AS\n                   (\n                       SELECT account_public_id,\n                              updated_at,\n                              substring(builtwith_response_json,\n                                        CHARINDEX('''Name'':', builtwith_response_json) + 9,\n                                        charindex('''Description'':', builtwith_response_json) -\n                                        CHARINDEX('''Name'':', builtwith_response_json)),\n                              right(builtwith_response_json,\n                                    len(builtwith_response_json) -\n                                    charindex('''Description'':', builtwith_response_json) - 10)\n                       FROM current.account_technology_usages\n                       where charindex('''Description'':', builtwith_response_json) >\n                             CHARINDEX('''Name'':', builtwith_response_json)\n                         and updated_at::DATE > '2020-1-1'\n                       UNION all\n                       SELECT account_public_id,\n                              updated_at,\n                              substring(builtwith_response_json,\n                                        CHARINDEX('''Name'':', builtwith_response_json) + 9,\n                                        charindex('''Description'':', builtwith_response_json) -\n                                        CHARINDEX('''Name'':', builtwith_response_json)),\n                              right(builtwith_response_json,\n                                    len(builtwith_response_json) -\n                                    charindex('''Description'':', builtwith_response_json) - 10)\n                       FROM tmp\n                       WHERE CHARINDEX('''Name'':', builtwith_response_json) > 0\n                         and charindex('''Description'':', builtwith_response_json) > 0\n                         and charindex('''Description'':', builtwith_response_json) >\n                             CHARINDEX('''Name'':', builtwith_response_json)\n                   ),\n     tmp2(account_public_id, updated_at, DataItem, builtwith_response_json) AS\n                   (\n                       SELECT account_public_id,\n                              updated_at,\n                              substring(builtwith_response_json,\n                                        CHARINDEX('\"Name\":', builtwith_response_json) + 9,\n                                        charindex('\"Description\":', builtwith_response_json) -\n                                        CHARINDEX('\"Name\":', builtwith_response_json)),\n                              right(builtwith_response_json,\n                                    len(builtwith_response_json) -\n                                    charindex('\"Description\":', builtwith_response_json) - 10)\n                       FROM current.account_technology_usages\n                       where charindex('\"Description\":', builtwith_response_json) >\n                             CHARINDEX('\"Name\":', builtwith_response_json)\n                         and updated_at::DATE > '2020-1-1'\n                       UNION all\n                       SELECT account_public_id,\n                              updated_at,\n                              substring(builtwith_response_json,\n                                        CHARINDEX('\"Name\":', builtwith_response_json) + 9,\n                                        charindex('\"Description\":', builtwith_response_json) -\n                                        CHARINDEX('\"Name\":', builtwith_response_json)),\n                              right(builtwith_response_json,\n                                    len(builtwith_response_json) -\n                                    charindex('\"Description\":', builtwith_response_json) - 10)\n                       FROM tmp2\n                       WHERE CHARINDEX('\"Name\":', builtwith_response_json) > 0\n                         and charindex('\"Description\":', builtwith_response_json) > 0\n                         and charindex('\"Description\":', builtwith_response_json) >\n                             CHARINDEX('\"Name\":', builtwith_response_json)\n                   )\nSELECT account_public_id,\n       updated_at,\n       left(DataItem, case when len(dataitem) > 13 then len(DataItem) - 12 else 1 end) technology_detected\nFROM tmp\nunion all\nselect account_public_id,\n       updated_at,\n       left(DataItem, case when len(dataitem) > 13 then len(DataItem) - 12 else 1 end) technology_detected\nfrom tmp2", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_builtwith_technology_detected.sql", "original_file_path": "models/alpha/account_builtwith_technology_detected.sql", "name": "account_builtwith_technology_detected", "alias": "account_builtwith_technology_detected", "checksum": {"name": "sha256", "checksum": "02a600220a4bd81110e71a2b0d47704ec263dbf44391e4839336dd643fbfc17f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_builtwith_technology_detected.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.966023, "compiled_code": "WITH recursive tmp(account_public_id, updated_at, DataItem, builtwith_response_json) AS\n                   (\n                       SELECT account_public_id,\n                              updated_at,\n                              substring(builtwith_response_json,\n                                        CHARINDEX('''Name'':', builtwith_response_json) + 9,\n                                        charindex('''Description'':', builtwith_response_json) -\n                                        CHARINDEX('''Name'':', builtwith_response_json)),\n                              right(builtwith_response_json,\n                                    len(builtwith_response_json) -\n                                    charindex('''Description'':', builtwith_response_json) - 10)\n                       FROM current.account_technology_usages\n                       where charindex('''Description'':', builtwith_response_json) >\n                             CHARINDEX('''Name'':', builtwith_response_json)\n                         and updated_at::DATE > '2020-1-1'\n                       UNION all\n                       SELECT account_public_id,\n                              updated_at,\n                              substring(builtwith_response_json,\n                                        CHARINDEX('''Name'':', builtwith_response_json) + 9,\n                                        charindex('''Description'':', builtwith_response_json) -\n                                        CHARINDEX('''Name'':', builtwith_response_json)),\n                              right(builtwith_response_json,\n                                    len(builtwith_response_json) -\n                                    charindex('''Description'':', builtwith_response_json) - 10)\n                       FROM tmp\n                       WHERE CHARINDEX('''Name'':', builtwith_response_json) > 0\n                         and charindex('''Description'':', builtwith_response_json) > 0\n                         and charindex('''Description'':', builtwith_response_json) >\n                             CHARINDEX('''Name'':', builtwith_response_json)\n                   ),\n     tmp2(account_public_id, updated_at, DataItem, builtwith_response_json) AS\n                   (\n                       SELECT account_public_id,\n                              updated_at,\n                              substring(builtwith_response_json,\n                                        CHARINDEX('\"Name\":', builtwith_response_json) + 9,\n                                        charindex('\"Description\":', builtwith_response_json) -\n                                        CHARINDEX('\"Name\":', builtwith_response_json)),\n                              right(builtwith_response_json,\n                                    len(builtwith_response_json) -\n                                    charindex('\"Description\":', builtwith_response_json) - 10)\n                       FROM current.account_technology_usages\n                       where charindex('\"Description\":', builtwith_response_json) >\n                             CHARINDEX('\"Name\":', builtwith_response_json)\n                         and updated_at::DATE > '2020-1-1'\n                       UNION all\n                       SELECT account_public_id,\n                              updated_at,\n                              substring(builtwith_response_json,\n                                        CHARINDEX('\"Name\":', builtwith_response_json) + 9,\n                                        charindex('\"Description\":', builtwith_response_json) -\n                                        CHARINDEX('\"Name\":', builtwith_response_json)),\n                              right(builtwith_response_json,\n                                    len(builtwith_response_json) -\n                                    charindex('\"Description\":', builtwith_response_json) - 10)\n                       FROM tmp2\n                       WHERE CHARINDEX('\"Name\":', builtwith_response_json) > 0\n                         and charindex('\"Description\":', builtwith_response_json) > 0\n                         and charindex('\"Description\":', builtwith_response_json) >\n                             CHARINDEX('\"Name\":', builtwith_response_json)\n                   )\nSELECT account_public_id,\n       updated_at,\n       left(DataItem, case when len(dataitem) > 13 then len(DataItem) - 12 else 1 end) technology_detected\nFROM tmp\nunion all\nselect account_public_id,\n       updated_at,\n       left(DataItem, case when len(dataitem) > 13 then len(DataItem) - 12 else 1 end) technology_detected\nfrom tmp2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"account_builtwith_technology_detected\""}, "model.drip_data_intelligence.subscription_kpis_daily": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscription_mrr_daily"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_kpis_daily"], "unique_id": "model.drip_data_intelligence.subscription_kpis_daily", "raw_code": "WITH active_and_previous_mrr AS (\n  SELECT\n    subscription_id,\n    mrr_date,\n    lag(current_mrr_cents, 1) OVER (\n      PARTITION BY subscription_id\n      ORDER BY\n        mrr_date ASC\n    ) AS previous_mrr_cents_raw,\n    ISNULL(previous_mrr_cents_raw, 0) AS previous_mrr_cents,\n    current_mrr_cents,\n    category\n  FROM\n    {{ ref(\"subscription_mrr_daily\") }}\n),\nsubscription_activation_counts AS (\n\tSELECT\n    subscription_id,\n    mrr_date,\n    (\n      current_mrr_cents > 0 AND\n      previous_mrr_cents = 0\n    ) AS newly_activated,\n    SUM(newly_activated :: INT) OVER (\n      PARTITION BY subscription_id\n      ORDER BY mrr_date ROWS UNBOUNDED PRECEDING) AS subscription_activation_count\n    FROM active_and_previous_mrr\n)\nSELECT\n  subscription_id,\n  mrr_date,\n  current_mrr_cents,\n  previous_mrr_cents,\n  (current_mrr_cents > 0) AS active,\n  current_mrr_cents AS active_mrr_cents,\n  (\n    newly_activated AND\n    subscription_activation_count <= 1\n  ) AS activated,\n  (current_mrr_cents * activated :: INT) AS activated_mrr_cents,\n  (newly_activated AND\n    subscription_activation_count > 1 ) AS reactivated,\n  (current_mrr_cents * reactivated :: INT) AS reactivated_mrr_cents,\n  (\n    previous_mrr_cents < current_mrr_cents\n    AND previous_mrr_cents <> 0\n  ) AS expanded,\n  (\n    (current_mrr_cents - previous_mrr_cents) * expanded :: INT\n  ) AS expanded_mrr_cents,\n  (\n    previous_mrr_cents > current_mrr_cents\n    AND current_mrr_cents <> 0\n  ) AS contracted,\n  (\n    (previous_mrr_cents - current_mrr_cents) * contracted :: INT\n  ) AS contracted_mrr_cents,\n  (\n    current_mrr_cents = 0\n    AND previous_mrr_cents > 0\n  ) AS churned,\n  (previous_mrr_cents * churned :: INT) AS churned_mrr_cents,\n  category\nFROM\n  active_and_previous_mrr\n    LEFT JOIN subscription_activation_counts\n    USING (subscription_id, mrr_date)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_kpis_daily.sql", "original_file_path": "models/alpha/subscription_kpis_daily.sql", "name": "subscription_kpis_daily", "alias": "subscription_kpis_daily", "checksum": {"name": "sha256", "checksum": "62ef994cd5789d43e430a213035b4f633a43941fa8425d88dfe7a2d7b4ef6f6d"}, "tags": [], "refs": [["subscription_mrr_daily"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_kpis_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "alpha"}, "created_at": 1674498297.968524, "compiled_code": "WITH active_and_previous_mrr AS (\n  SELECT\n    subscription_id,\n    mrr_date,\n    lag(current_mrr_cents, 1) OVER (\n      PARTITION BY subscription_id\n      ORDER BY\n        mrr_date ASC\n    ) AS previous_mrr_cents_raw,\n    ISNULL(previous_mrr_cents_raw, 0) AS previous_mrr_cents,\n    current_mrr_cents,\n    category\n  FROM\n    \"dumps\".\"dev\".\"subscription_mrr_daily\"\n),\nsubscription_activation_counts AS (\n\tSELECT\n    subscription_id,\n    mrr_date,\n    (\n      current_mrr_cents > 0 AND\n      previous_mrr_cents = 0\n    ) AS newly_activated,\n    SUM(newly_activated :: INT) OVER (\n      PARTITION BY subscription_id\n      ORDER BY mrr_date ROWS UNBOUNDED PRECEDING) AS subscription_activation_count\n    FROM active_and_previous_mrr\n)\nSELECT\n  subscription_id,\n  mrr_date,\n  current_mrr_cents,\n  previous_mrr_cents,\n  (current_mrr_cents > 0) AS active,\n  current_mrr_cents AS active_mrr_cents,\n  (\n    newly_activated AND\n    subscription_activation_count <= 1\n  ) AS activated,\n  (current_mrr_cents * activated :: INT) AS activated_mrr_cents,\n  (newly_activated AND\n    subscription_activation_count > 1 ) AS reactivated,\n  (current_mrr_cents * reactivated :: INT) AS reactivated_mrr_cents,\n  (\n    previous_mrr_cents < current_mrr_cents\n    AND previous_mrr_cents <> 0\n  ) AS expanded,\n  (\n    (current_mrr_cents - previous_mrr_cents) * expanded :: INT\n  ) AS expanded_mrr_cents,\n  (\n    previous_mrr_cents > current_mrr_cents\n    AND current_mrr_cents <> 0\n  ) AS contracted,\n  (\n    (previous_mrr_cents - current_mrr_cents) * contracted :: INT\n  ) AS contracted_mrr_cents,\n  (\n    current_mrr_cents = 0\n    AND previous_mrr_cents > 0\n  ) AS churned,\n  (previous_mrr_cents * churned :: INT) AS churned_mrr_cents,\n  category\nFROM\n  active_and_previous_mrr\n    LEFT JOIN subscription_activation_counts\n    USING (subscription_id, mrr_date)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_kpis_daily\""}, "model.drip_data_intelligence.daily_kpi_email": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.daily_kpi_by_category"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "daily_kpi_email"], "unique_id": "model.drip_data_intelligence.daily_kpi_email", "raw_code": "SELECT\n  {{ dbt_utils.star(ref(\"daily_kpi_by_category\"), except=[\"category\"]) }}\nFROM\n  {{ ref(\"daily_kpi_by_category\") }}\nWHERE\n  category = 'monthly_service'\nORDER BY mrr_date ASC", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/daily_kpi_email.sql", "original_file_path": "models/alpha/daily_kpi_email.sql", "name": "daily_kpi_email", "alias": "daily_kpi_email", "checksum": {"name": "sha256", "checksum": "f348cc51b4833c9f608821eade1cbf7496a81c67936a36b20657327181542429"}, "tags": [], "refs": [["daily_kpi_by_category"], ["daily_kpi_by_category"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/daily_kpi_email.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "alpha"}, "created_at": 1674498297.971287, "compiled_code": "SELECT\n  \"mrr_date\",\n  \"active_count\",\n  \"active_mrr_cents\",\n  \"activation_count\",\n  \"activation_mrr_cents\",\n  \"reactivation_count\",\n  \"reactivation_mrr_cents\",\n  \"expansion_count\",\n  \"expansion_mrr_cents\",\n  \"contraction_count\",\n  \"contraction_mrr_cents\",\n  \"churn_count\",\n  \"churn_mrr_cents\",\n  \"first_of_month_date\",\n  \"expansion_count_by_month\",\n  \"contraction_count_by_month\"\nFROM\n  \"dumps\".\"dev\".\"daily_kpi_by_category\"\nWHERE\n  category = 'monthly_service'\nORDER BY mrr_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"daily_kpi_email\""}, "model.drip_data_intelligence.rfm_by_people": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.people_purchases"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "rfm_by_people"], "unique_id": "model.drip_data_intelligence.rfm_by_people", "raw_code": "WITH subscriber_agg AS\n        (\n            SELECT account_id\n                 , subscriber_id\n                 , gross_revenue_amount\n                 , net_revenue_amount\n                 , discount_amount\n                 , shipping_amount\n                 , tax_amount\n                 , first_purchase_date\n                 , most_recent_purchase_date\n                 , months_since_first_order\n                 , months_since_most_recent_order\n                 , aov\n                 , net_revenue_amount ltv\n                 , discount_amount    lifetime_discounts\n                 , is_discount_exclusive\n                 , count_of_orders\n              FROM {{ ref('people_purchases') }} --alpha.people_purchases using the ref gets me a runtime error on dbt power user\n        )\n       , rfm AS\n        (\n            SELECT account_id\n                 , subscriber_id\n                 , CASE\n                       WHEN ltv != 0\n                           THEN count(subscriber_id)\n                                OVER (PARTITION BY account_id) END                             total_purchasers\n                --r\n                 , months_since_most_recent_order\n                 , rank()\n                   OVER (PARTITION BY account_id ORDER BY months_since_most_recent_order DESC) subscriber_recency_rank\n                 , subscriber_recency_rank::real / nullif(total_purchasers::real, 0)           recency_rank_pct\n                 , CASE\n                       WHEN recency_rank_pct < .2\n                           THEN 1\n                       WHEN recency_rank_pct < .4\n                           THEN 2\n                       WHEN recency_rank_pct < .6\n                           THEN 3\n                       WHEN recency_rank_pct < .8\n                           THEN 4\n                           ELSE 5 END                                                          recency\n                --f\n                 , count_of_orders\n                 , rank() OVER (PARTITION BY account_id ORDER BY count_of_orders)::real\n                / nullif(total_purchasers, 0)                                                  repeat_buyer_percentile\n                 , CASE\n                       WHEN repeat_buyer_percentile IS NULL\n                           THEN 0\n                       WHEN repeat_buyer_percentile < .2\n                           THEN 1\n                       WHEN repeat_buyer_percentile < .4\n                           THEN 2\n                       WHEN repeat_buyer_percentile < .6\n                           THEN 3\n                       WHEN repeat_buyer_percentile < .8\n                           THEN 4\n                           ELSE 5 END                                                          frequency\n                --m\n                 , ltv\n                 , rank() OVER (PARTITION BY account_id ORDER BY ltv)                          subscriber_ltv_rank\n                 , subscriber_ltv_rank::real / nullif(total_purchasers::real, 0)               ltv_rank_percent\n                 , CASE\n                       WHEN ltv = 0\n                           THEN 0\n                       WHEN ltv_rank_percent < .2\n                           THEN 1\n                       WHEN ltv_rank_percent < .4\n                           THEN 2\n                       WHEN ltv_rank_percent < .6\n                           THEN 3\n                       WHEN ltv_rank_percent < .8\n                           THEN 4\n                           ELSE 5 END                                                          monetary\n                --rfm calcs\n                 , recency || frequency || monetary                                            rfm\n                --other measures\n                 , months_since_first_order\n                 , aov\n                 , lifetime_discounts\n              FROM subscriber_agg\n             ORDER BY account_id, subscriber_id)\n  SELECT account_id\n       , subscriber_id\n       , CASE\n             WHEN rfm = 555 OR rfm = 554 OR rfm = 544 OR rfm = 545 OR rfm = 454 OR rfm = 455 OR rfm = 445\n                 THEN 1\n             WHEN rfm = 543 OR rfm = 444 OR rfm = 435 OR rfm = 355 OR rfm = 354 OR rfm = 345 OR rfm = 344 OR rfm = 335\n                 THEN 2\n             WHEN rfm = 553 OR rfm = 551 OR rfm = 552 OR rfm = 541 OR rfm = 542 OR rfm = 533 OR rfm = 532 OR\n                  rfm = 531 OR rfm = 452 OR rfm = 451 OR rfm = 442 OR rfm = 441 OR rfm = 431 OR rfm = 453 OR\n                  rfm = 433 OR rfm = 432 OR rfm = 423 OR rfm = 353 OR rfm = 352 OR rfm = 351 OR rfm = 342 OR\n                  rfm = 341 OR rfm = 333 OR rfm = 323\n                 THEN 3\n             WHEN rfm = 512 OR rfm = 511 OR rfm = 422 OR rfm = 421 OR rfm = 412 OR rfm = 411 OR rfm = 311\n                 THEN 4\n             WHEN rfm = 525 OR rfm = 524 OR rfm = 523 OR rfm = 522 OR rfm = 521 OR rfm = 515 OR rfm = 514 OR\n                  rfm = 513 OR rfm = 425 OR rfm = 424 OR rfm = 413 OR rfm = 414 OR rfm = 415 OR rfm = 315 OR\n                  rfm = 314 OR rfm = 313\n                 THEN 5\n             WHEN rfm = 535 OR rfm = 534 OR rfm = 443 OR rfm = 434 OR rfm = 343 OR rfm = 334 OR rfm = 325 OR rfm = 324\n                 THEN 6\n             WHEN rfm = 331 OR rfm = 321 OR rfm = 312 OR rfm = 221 OR rfm = 213 OR rfm = 231 OR rfm = 241 OR rfm = 251\n                 THEN 7\n             WHEN rfm = 255 OR rfm = 254 OR rfm = 245 OR rfm = 244 OR rfm = 253 OR rfm = 252 OR rfm = 243 OR\n                  rfm = 242 OR rfm = 235 OR rfm = 234 OR rfm = 225 OR rfm = 224 OR rfm = 153 OR rfm = 152 OR\n                  rfm = 145 OR rfm = 143 OR rfm = 142 OR rfm = 135 OR rfm = 134 OR rfm = 133 OR rfm = 125 OR rfm = 124\n                 THEN 8\n             WHEN rfm = 155 OR rfm = 154 OR rfm = 144 OR rfm = 214 OR rfm = 215 OR rfm = 115 OR rfm = 114 OR rfm = 113\n                 THEN 9\n             WHEN rfm = 332 OR rfm = 322 OR rfm = 233 OR rfm = 232 OR rfm = 223 OR rfm = 222 OR rfm = 132 OR\n                  rfm = 123 OR rfm = 122 OR rfm = 212 OR rfm = 211\n                 THEN 10\n             WHEN rfm = 111 OR rfm = 112 OR rfm = 121 OR rfm = 131 OR rfm = 141 OR rfm = 151\n                 THEN 11\n      END AS                                 segment_rank\n       , CASE\n             WHEN segment_rank = 1\n                 THEN 'Champions'\n             WHEN segment_rank = 2\n                 THEN 'Loyal'\n             WHEN segment_rank = 3\n                 THEN 'Potential Loyalists'\n             WHEN segment_rank = 4\n                 THEN 'New Customers'\n             WHEN segment_rank = 5\n                 THEN 'Promising'\n             WHEN segment_rank = 6\n                 THEN 'Need Attention'\n             WHEN segment_rank = 7\n                 THEN 'About to Sleep'\n             WHEN segment_rank = 8\n                 THEN 'At Risk'\n             WHEN segment_rank = 9\n                 THEN 'Cannot Lose Them'\n             WHEN segment_rank = 10\n                 THEN 'Hibernating Customers'\n             WHEN segment_rank = 11\n                 THEN 'Lost Customers'\n      END AS                                 segment_name\n       , rfm\n       , total_purchasers\n      --r\n       , recency\n       , months_since_most_recent_order\n      --f\n       , frequency\n       , count_of_orders\n      --m\n       , monetary\n       , ltv\n      --other measures\n       , lifetime_discounts\n       , aov\n       , lifetime_discounts / nullif(ltv, 0) lifetime_discount_pct\n    FROM rfm", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/rfm_by_people.sql", "original_file_path": "models/alpha/rfm_by_people.sql", "name": "rfm_by_people", "alias": "rfm_by_people", "checksum": {"name": "sha256", "checksum": "1a237871b80693053751ce3599ececb96b2bc44bd404e42dc51264c011286870"}, "tags": [], "refs": [["people_purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/rfm_by_people.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.9775019, "compiled_code": "WITH subscriber_agg AS\n        (\n            SELECT account_id\n                 , subscriber_id\n                 , gross_revenue_amount\n                 , net_revenue_amount\n                 , discount_amount\n                 , shipping_amount\n                 , tax_amount\n                 , first_purchase_date\n                 , most_recent_purchase_date\n                 , months_since_first_order\n                 , months_since_most_recent_order\n                 , aov\n                 , net_revenue_amount ltv\n                 , discount_amount    lifetime_discounts\n                 , is_discount_exclusive\n                 , count_of_orders\n              FROM \"dumps\".\"dev\".\"people_purchases\" --alpha.people_purchases using the ref gets me a runtime error on dbt power user\n        )\n       , rfm AS\n        (\n            SELECT account_id\n                 , subscriber_id\n                 , CASE\n                       WHEN ltv != 0\n                           THEN count(subscriber_id)\n                                OVER (PARTITION BY account_id) END                             total_purchasers\n                --r\n                 , months_since_most_recent_order\n                 , rank()\n                   OVER (PARTITION BY account_id ORDER BY months_since_most_recent_order DESC) subscriber_recency_rank\n                 , subscriber_recency_rank::real / nullif(total_purchasers::real, 0)           recency_rank_pct\n                 , CASE\n                       WHEN recency_rank_pct < .2\n                           THEN 1\n                       WHEN recency_rank_pct < .4\n                           THEN 2\n                       WHEN recency_rank_pct < .6\n                           THEN 3\n                       WHEN recency_rank_pct < .8\n                           THEN 4\n                           ELSE 5 END                                                          recency\n                --f\n                 , count_of_orders\n                 , rank() OVER (PARTITION BY account_id ORDER BY count_of_orders)::real\n                / nullif(total_purchasers, 0)                                                  repeat_buyer_percentile\n                 , CASE\n                       WHEN repeat_buyer_percentile IS NULL\n                           THEN 0\n                       WHEN repeat_buyer_percentile < .2\n                           THEN 1\n                       WHEN repeat_buyer_percentile < .4\n                           THEN 2\n                       WHEN repeat_buyer_percentile < .6\n                           THEN 3\n                       WHEN repeat_buyer_percentile < .8\n                           THEN 4\n                           ELSE 5 END                                                          frequency\n                --m\n                 , ltv\n                 , rank() OVER (PARTITION BY account_id ORDER BY ltv)                          subscriber_ltv_rank\n                 , subscriber_ltv_rank::real / nullif(total_purchasers::real, 0)               ltv_rank_percent\n                 , CASE\n                       WHEN ltv = 0\n                           THEN 0\n                       WHEN ltv_rank_percent < .2\n                           THEN 1\n                       WHEN ltv_rank_percent < .4\n                           THEN 2\n                       WHEN ltv_rank_percent < .6\n                           THEN 3\n                       WHEN ltv_rank_percent < .8\n                           THEN 4\n                           ELSE 5 END                                                          monetary\n                --rfm calcs\n                 , recency || frequency || monetary                                            rfm\n                --other measures\n                 , months_since_first_order\n                 , aov\n                 , lifetime_discounts\n              FROM subscriber_agg\n             ORDER BY account_id, subscriber_id)\n  SELECT account_id\n       , subscriber_id\n       , CASE\n             WHEN rfm = 555 OR rfm = 554 OR rfm = 544 OR rfm = 545 OR rfm = 454 OR rfm = 455 OR rfm = 445\n                 THEN 1\n             WHEN rfm = 543 OR rfm = 444 OR rfm = 435 OR rfm = 355 OR rfm = 354 OR rfm = 345 OR rfm = 344 OR rfm = 335\n                 THEN 2\n             WHEN rfm = 553 OR rfm = 551 OR rfm = 552 OR rfm = 541 OR rfm = 542 OR rfm = 533 OR rfm = 532 OR\n                  rfm = 531 OR rfm = 452 OR rfm = 451 OR rfm = 442 OR rfm = 441 OR rfm = 431 OR rfm = 453 OR\n                  rfm = 433 OR rfm = 432 OR rfm = 423 OR rfm = 353 OR rfm = 352 OR rfm = 351 OR rfm = 342 OR\n                  rfm = 341 OR rfm = 333 OR rfm = 323\n                 THEN 3\n             WHEN rfm = 512 OR rfm = 511 OR rfm = 422 OR rfm = 421 OR rfm = 412 OR rfm = 411 OR rfm = 311\n                 THEN 4\n             WHEN rfm = 525 OR rfm = 524 OR rfm = 523 OR rfm = 522 OR rfm = 521 OR rfm = 515 OR rfm = 514 OR\n                  rfm = 513 OR rfm = 425 OR rfm = 424 OR rfm = 413 OR rfm = 414 OR rfm = 415 OR rfm = 315 OR\n                  rfm = 314 OR rfm = 313\n                 THEN 5\n             WHEN rfm = 535 OR rfm = 534 OR rfm = 443 OR rfm = 434 OR rfm = 343 OR rfm = 334 OR rfm = 325 OR rfm = 324\n                 THEN 6\n             WHEN rfm = 331 OR rfm = 321 OR rfm = 312 OR rfm = 221 OR rfm = 213 OR rfm = 231 OR rfm = 241 OR rfm = 251\n                 THEN 7\n             WHEN rfm = 255 OR rfm = 254 OR rfm = 245 OR rfm = 244 OR rfm = 253 OR rfm = 252 OR rfm = 243 OR\n                  rfm = 242 OR rfm = 235 OR rfm = 234 OR rfm = 225 OR rfm = 224 OR rfm = 153 OR rfm = 152 OR\n                  rfm = 145 OR rfm = 143 OR rfm = 142 OR rfm = 135 OR rfm = 134 OR rfm = 133 OR rfm = 125 OR rfm = 124\n                 THEN 8\n             WHEN rfm = 155 OR rfm = 154 OR rfm = 144 OR rfm = 214 OR rfm = 215 OR rfm = 115 OR rfm = 114 OR rfm = 113\n                 THEN 9\n             WHEN rfm = 332 OR rfm = 322 OR rfm = 233 OR rfm = 232 OR rfm = 223 OR rfm = 222 OR rfm = 132 OR\n                  rfm = 123 OR rfm = 122 OR rfm = 212 OR rfm = 211\n                 THEN 10\n             WHEN rfm = 111 OR rfm = 112 OR rfm = 121 OR rfm = 131 OR rfm = 141 OR rfm = 151\n                 THEN 11\n      END AS                                 segment_rank\n       , CASE\n             WHEN segment_rank = 1\n                 THEN 'Champions'\n             WHEN segment_rank = 2\n                 THEN 'Loyal'\n             WHEN segment_rank = 3\n                 THEN 'Potential Loyalists'\n             WHEN segment_rank = 4\n                 THEN 'New Customers'\n             WHEN segment_rank = 5\n                 THEN 'Promising'\n             WHEN segment_rank = 6\n                 THEN 'Need Attention'\n             WHEN segment_rank = 7\n                 THEN 'About to Sleep'\n             WHEN segment_rank = 8\n                 THEN 'At Risk'\n             WHEN segment_rank = 9\n                 THEN 'Cannot Lose Them'\n             WHEN segment_rank = 10\n                 THEN 'Hibernating Customers'\n             WHEN segment_rank = 11\n                 THEN 'Lost Customers'\n      END AS                                 segment_name\n       , rfm\n       , total_purchasers\n      --r\n       , recency\n       , months_since_most_recent_order\n      --f\n       , frequency\n       , count_of_orders\n      --m\n       , monetary\n       , ltv\n      --other measures\n       , lifetime_discounts\n       , aov\n       , lifetime_discounts / nullif(ltv, 0) lifetime_discount_pct\n    FROM rfm", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"rfm_by_people\""}, "model.drip_data_intelligence.saas_monthly_by_category": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.segment_subscription_properties"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "saas_monthly_by_category"], "unique_id": "model.drip_data_intelligence.saas_monthly_by_category", "raw_code": "WITH daily_kpi_prep AS\n      (\n          SELECT *\n               , trunc(\n                          last_value(active_mrr_cents :: decimal / 100) OVER (\n                      PARTITION BY date_trunc('mon', mrr_date), category\n                      ORDER BY\n                          mrr_date ROWS BETWEEN UNBOUNDED PRECEDING\n                          AND UNBOUNDED FOLLOWING\n                      ),\n                          2\n              )        AS ending_mrr_usd\n               , last_value(active_count)\n                 OVER (PARTITION BY date_trunc('mon', mrr_date), category ORDER BY mrr_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                     ) AS ending_number_of_customers\n            FROM {{ ref(\"daily_kpi_by_category\") }}\n           ORDER BY mrr_date DESC\n      )\n     , top_of_funnel AS\n      (\n          SELECT date_trunc('mon', ssp.drip_registration_date)::date                    AS as_of_month\n               , sum(CASE WHEN drip_trial_start_date IS NOT NULL THEN 1 ELSE 0 END)     AS trial_count\n               , sum(CASE WHEN subscription_status IN ('setting_up') THEN 1 ELSE 0 END) AS trial_abandoned\n               , sum(CASE\n                         WHEN subscription_status NOT IN ('setting_up', 'banned')\n                             THEN 1\n                             ELSE 0 END)                                                AS trial_onboarded\n               , sum(CASE WHEN drip_is_oms_indicated THEN 1 ELSE 0 END)                 AS trial_with_oms\n            FROM {{ ref(\"segment_subscription_properties\") }} AS ssp\n           WHERE as_of_month IS NOT NULL\n           GROUP BY as_of_month\n      )\n     , monthly_mrr_cte AS\n      (\n          SELECT date_trunc('mon', mrr_date) :: date                                        AS as_of_month\n               , category\n               , trunc(sum(activation_mrr_cents :: decimal) / 100, 2)                       AS gross_new_mrr_usd\n               , trunc(sum(expansion_mrr_cents :: decimal) / 100, 2)                        AS expansion_mrr_usd\n               , trunc(sum(contraction_mrr_cents :: decimal) / 100, 2)                      AS contraction_mrr_usd\n               , trunc(expansion_mrr_usd + contraction_mrr_usd, 2)                          AS net_expansion_mrr_usd\n               , trunc((sum(churn_mrr_cents :: decimal) + sum(reactivation_mrr_cents :: decimal)) / 100,\n                       2)                                                                   AS churned_mrr_usd\n               , gross_new_mrr_usd + expansion_mrr_usd + contraction_mrr_usd +\n                 churned_mrr_usd                                                            AS net_new_mrr_usd\n               , ending_mrr_usd\n               , lag(ending_mrr_usd) OVER ( PARTITION BY category ORDER BY as_of_month)     AS starting_mrr_usd\n               , (net_new_mrr_usd / nullif(starting_mrr_usd, 0)) * 100                      AS monthly_mrr_growth_pct\n               , ending_mrr_usd * 12                                                        AS ending_arr_usd\n               , (abs(churned_mrr_usd) / nullif(starting_mrr_usd, 0)) * 100                 AS mrr_gross_churn_pct\n               , (net_expansion_mrr_usd / nullif(starting_mrr_usd, 0)) * 100                AS mrr_net_expansion_pct\n               , ((net_expansion_mrr_usd + churned_mrr_usd) / nullif(starting_mrr_usd, 0)) *\n                 -100                                                                       AS net_mrr_churn_pct\n               , 100 - net_mrr_churn_pct                                                    AS net_revenue_retention_pct\n               , lag(ending_arr_usd, 12) OVER (PARTITION BY category ORDER BY as_of_month ) AS ending_arr_usd_prior_year\n               , (ending_arr_usd - ending_arr_usd_prior_year) /\n                 nullif(ending_arr_usd_prior_year, 0)                                       AS arr_yoy_growth\n               , (gross_new_mrr_usd + expansion_mrr_usd) /\n                 nullif(abs(contraction_mrr_usd + churned_mrr_usd), 0)                      AS quick_ratio\n            FROM daily_kpi_prep\n           GROUP BY as_of_month, ending_mrr_usd, category\n      )\n     , monthly_customer AS\n      (\n          SELECT date_trunc('mon', mrr_date) :: date AS                as_of_month\n               , category\n               , sum(activation_count) AS                              gross_new_customers\n               , sum(expansion_count) AS                               expanded_customers\n               , sum(abs(contraction_count)) AS                        contracted_customers\n               , sum(reactivation_count) - sum(churn_count) AS         churned_customers\n               , ending_number_of_customers\n               , lag(ending_number_of_customers)\n                 OVER (PARTITION BY category ORDER BY as_of_month ) AS starting_number_of_customers\n               , gross_new_customers + churned_customers AS            net_new_customers\n               , (net_new_customers :: decimal / nullif(starting_number_of_customers, 0) :: decimal) *\n                 100 AS                                                monthly_customer_growth_pct\n               , (abs(churned_customers :: decimal) / nullif(starting_number_of_customers, 0) :: decimal) *\n                 100 AS                                                customer_churn_pct\n               , lag(ending_number_of_customers, 12)\n                 OVER (PARTITION BY category ORDER BY as_of_month ) AS ending_number_of_customers_prior_year\n               , (ending_number_of_customers - ending_number_of_customers_prior_year) /\n                 nullif(ending_number_of_customers_prior_year, 0) AS   customer_yoy_growth\n            FROM daily_kpi_prep\n           GROUP BY as_of_month, ending_number_of_customers, category\n      )\nSELECT as_of_month\n     , category\n     , gross_new_mrr_usd\n     , expansion_mrr_usd\n     , contraction_mrr_usd\n     , churned_mrr_usd\n     , net_new_mrr_usd\n     , monthly_mrr_growth_pct\n     , starting_mrr_usd\n     , ending_mrr_usd\n     , ending_arr_usd\n     , gross_new_mrr_usd :: decimal / nullif(gross_new_customers, 0) :: decimal     AS avg_mrr_per_new_customer_usd\n     , ending_mrr_usd :: decimal / nullif(ending_number_of_customers, 0) :: decimal AS avg_mrr_installed_base_usd\n     , avg_mrr_installed_base_usd * 12                                              AS avg_arr_installed_base_usd\n     , gross_new_customers\n     , expanded_customers\n     , contracted_customers\n     , churned_customers\n     , net_new_customers\n     , monthly_customer_growth_pct\n     , starting_number_of_customers\n     , ending_number_of_customers\n     , customer_churn_pct\n     , mrr_gross_churn_pct\n     , mrr_net_expansion_pct\n     , net_mrr_churn_pct\n     , net_revenue_retention_pct\n     , arr_yoy_growth\n     , customer_yoy_growth\n     , quick_ratio\n     , trial_count\n     , trial_abandoned\n     , trial_onboarded\n     , trial_with_oms\n  FROM monthly_mrr_cte\n           JOIN monthly_customer USING (as_of_month, category)\n           LEFT JOIN top_of_funnel USING (as_of_month)\n ORDER BY as_of_month DESC", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/saas_monthly_by_category.sql", "original_file_path": "models/alpha/saas_monthly_by_category.sql", "name": "saas_monthly_by_category", "alias": "saas_monthly_by_category", "checksum": {"name": "sha256", "checksum": "fe301c6ed627395a655f83765ad432be354f9fd4b9980403fd4ebc590b49fdbc"}, "tags": [], "refs": [["daily_kpi_by_category"], ["segment_subscription_properties"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/saas_monthly_by_category.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.980063, "compiled_code": "WITH daily_kpi_prep AS\n      (\n          SELECT *\n               , trunc(\n                          last_value(active_mrr_cents :: decimal / 100) OVER (\n                      PARTITION BY date_trunc('mon', mrr_date), category\n                      ORDER BY\n                          mrr_date ROWS BETWEEN UNBOUNDED PRECEDING\n                          AND UNBOUNDED FOLLOWING\n                      ),\n                          2\n              )        AS ending_mrr_usd\n               , last_value(active_count)\n                 OVER (PARTITION BY date_trunc('mon', mrr_date), category ORDER BY mrr_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                     ) AS ending_number_of_customers\n            FROM \"dumps\".\"dev\".\"daily_kpi_by_category\"\n           ORDER BY mrr_date DESC\n      )\n     , top_of_funnel AS\n      (\n          SELECT date_trunc('mon', ssp.drip_registration_date)::date                    AS as_of_month\n               , sum(CASE WHEN drip_trial_start_date IS NOT NULL THEN 1 ELSE 0 END)     AS trial_count\n               , sum(CASE WHEN subscription_status IN ('setting_up') THEN 1 ELSE 0 END) AS trial_abandoned\n               , sum(CASE\n                         WHEN subscription_status NOT IN ('setting_up', 'banned')\n                             THEN 1\n                             ELSE 0 END)                                                AS trial_onboarded\n               , sum(CASE WHEN drip_is_oms_indicated THEN 1 ELSE 0 END)                 AS trial_with_oms\n            FROM \"dumps\".\"dev\".\"segment_subscription_properties\" AS ssp\n           WHERE as_of_month IS NOT NULL\n           GROUP BY as_of_month\n      )\n     , monthly_mrr_cte AS\n      (\n          SELECT date_trunc('mon', mrr_date) :: date                                        AS as_of_month\n               , category\n               , trunc(sum(activation_mrr_cents :: decimal) / 100, 2)                       AS gross_new_mrr_usd\n               , trunc(sum(expansion_mrr_cents :: decimal) / 100, 2)                        AS expansion_mrr_usd\n               , trunc(sum(contraction_mrr_cents :: decimal) / 100, 2)                      AS contraction_mrr_usd\n               , trunc(expansion_mrr_usd + contraction_mrr_usd, 2)                          AS net_expansion_mrr_usd\n               , trunc((sum(churn_mrr_cents :: decimal) + sum(reactivation_mrr_cents :: decimal)) / 100,\n                       2)                                                                   AS churned_mrr_usd\n               , gross_new_mrr_usd + expansion_mrr_usd + contraction_mrr_usd +\n                 churned_mrr_usd                                                            AS net_new_mrr_usd\n               , ending_mrr_usd\n               , lag(ending_mrr_usd) OVER ( PARTITION BY category ORDER BY as_of_month)     AS starting_mrr_usd\n               , (net_new_mrr_usd / nullif(starting_mrr_usd, 0)) * 100                      AS monthly_mrr_growth_pct\n               , ending_mrr_usd * 12                                                        AS ending_arr_usd\n               , (abs(churned_mrr_usd) / nullif(starting_mrr_usd, 0)) * 100                 AS mrr_gross_churn_pct\n               , (net_expansion_mrr_usd / nullif(starting_mrr_usd, 0)) * 100                AS mrr_net_expansion_pct\n               , ((net_expansion_mrr_usd + churned_mrr_usd) / nullif(starting_mrr_usd, 0)) *\n                 -100                                                                       AS net_mrr_churn_pct\n               , 100 - net_mrr_churn_pct                                                    AS net_revenue_retention_pct\n               , lag(ending_arr_usd, 12) OVER (PARTITION BY category ORDER BY as_of_month ) AS ending_arr_usd_prior_year\n               , (ending_arr_usd - ending_arr_usd_prior_year) /\n                 nullif(ending_arr_usd_prior_year, 0)                                       AS arr_yoy_growth\n               , (gross_new_mrr_usd + expansion_mrr_usd) /\n                 nullif(abs(contraction_mrr_usd + churned_mrr_usd), 0)                      AS quick_ratio\n            FROM daily_kpi_prep\n           GROUP BY as_of_month, ending_mrr_usd, category\n      )\n     , monthly_customer AS\n      (\n          SELECT date_trunc('mon', mrr_date) :: date AS                as_of_month\n               , category\n               , sum(activation_count) AS                              gross_new_customers\n               , sum(expansion_count) AS                               expanded_customers\n               , sum(abs(contraction_count)) AS                        contracted_customers\n               , sum(reactivation_count) - sum(churn_count) AS         churned_customers\n               , ending_number_of_customers\n               , lag(ending_number_of_customers)\n                 OVER (PARTITION BY category ORDER BY as_of_month ) AS starting_number_of_customers\n               , gross_new_customers + churned_customers AS            net_new_customers\n               , (net_new_customers :: decimal / nullif(starting_number_of_customers, 0) :: decimal) *\n                 100 AS                                                monthly_customer_growth_pct\n               , (abs(churned_customers :: decimal) / nullif(starting_number_of_customers, 0) :: decimal) *\n                 100 AS                                                customer_churn_pct\n               , lag(ending_number_of_customers, 12)\n                 OVER (PARTITION BY category ORDER BY as_of_month ) AS ending_number_of_customers_prior_year\n               , (ending_number_of_customers - ending_number_of_customers_prior_year) /\n                 nullif(ending_number_of_customers_prior_year, 0) AS   customer_yoy_growth\n            FROM daily_kpi_prep\n           GROUP BY as_of_month, ending_number_of_customers, category\n      )\nSELECT as_of_month\n     , category\n     , gross_new_mrr_usd\n     , expansion_mrr_usd\n     , contraction_mrr_usd\n     , churned_mrr_usd\n     , net_new_mrr_usd\n     , monthly_mrr_growth_pct\n     , starting_mrr_usd\n     , ending_mrr_usd\n     , ending_arr_usd\n     , gross_new_mrr_usd :: decimal / nullif(gross_new_customers, 0) :: decimal     AS avg_mrr_per_new_customer_usd\n     , ending_mrr_usd :: decimal / nullif(ending_number_of_customers, 0) :: decimal AS avg_mrr_installed_base_usd\n     , avg_mrr_installed_base_usd * 12                                              AS avg_arr_installed_base_usd\n     , gross_new_customers\n     , expanded_customers\n     , contracted_customers\n     , churned_customers\n     , net_new_customers\n     , monthly_customer_growth_pct\n     , starting_number_of_customers\n     , ending_number_of_customers\n     , customer_churn_pct\n     , mrr_gross_churn_pct\n     , mrr_net_expansion_pct\n     , net_mrr_churn_pct\n     , net_revenue_retention_pct\n     , arr_yoy_growth\n     , customer_yoy_growth\n     , quick_ratio\n     , trial_count\n     , trial_abandoned\n     , trial_onboarded\n     , trial_with_oms\n  FROM monthly_mrr_cte\n           JOIN monthly_customer USING (as_of_month, category)\n           LEFT JOIN top_of_funnel USING (as_of_month)\n ORDER BY as_of_month DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"saas_monthly_by_category\""}, "model.drip_data_intelligence.account_purchases": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.purchases_corrected"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_purchases"], "unique_id": "model.drip_data_intelligence.account_purchases", "raw_code": "WITH account AS\n      (\n          SELECT DISTINCT id account_id, public_id account_public_id\n            FROM {{ ref('accounts') }}\n      )\n  SELECT account_id\n       , account_public_id\n       , sum(amount_usd)                                                   gross_revenue_amount_usd\n       , sum(revenue_amount_usd)                                           net_revenue_amount_usd\n       , sum(discount_usd)                                                 discount_amount_total_usd\n       , sum(shipping_usd)                                                 shipping_amount_total_usd\n       , sum(tax_usd)                                                      tax_amount_total_usd\n       , min(occurred_at)                                                          first_purchase_date\n       , max(occurred_at)                                                          most_recent_purchase_date\n       , date_diff('d', min(occurred_at), current_date)::real / 30                 months_since_first_order\n       , date_diff('d', max(occurred_at), current_date)::real / 30                 months_since_most_recent_order\n       , avg(nvl(revenue_amount_usd, 0))                                           aov\n       , (discount_amount_total_usd / nullif(net_revenue_amount_usd + discount_amount_total_usd, 0)) * 100 discount_pct\n       , nvl(count(amount_usd), 0)                                                 count_of_orders\n       , count(*)                                                                  purchase_count\n       , sum(case when date_diff('d', occurred_at, current_date) <= 365\n                  then nvl(revenue_amount_usd,0) else 0 end)                       revenue_rolling_year\n    FROM {{ref('purchases_corrected')}}\n              JOIN account USING (account_id)\n   WHERE amount_usd > 0\n     AND canceled_at IS NULL\n   GROUP BY account_id, account_public_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_purchases.sql", "original_file_path": "models/alpha/account_purchases.sql", "name": "account_purchases", "alias": "account_purchases", "checksum": {"name": "sha256", "checksum": "2848f9b297706ce0db3dc2002253a4e0fa84ba3495983d2ffbdc2c9004494e1e"}, "tags": [], "refs": [["accounts"], ["purchases_corrected"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_purchases.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.983215, "compiled_code": "WITH account AS\n      (\n          SELECT DISTINCT id account_id, public_id account_public_id\n            FROM \"dumps\".\"dev\".\"accounts\"\n      )\n  SELECT account_id\n       , account_public_id\n       , sum(amount_usd)                                                   gross_revenue_amount_usd\n       , sum(revenue_amount_usd)                                           net_revenue_amount_usd\n       , sum(discount_usd)                                                 discount_amount_total_usd\n       , sum(shipping_usd)                                                 shipping_amount_total_usd\n       , sum(tax_usd)                                                      tax_amount_total_usd\n       , min(occurred_at)                                                          first_purchase_date\n       , max(occurred_at)                                                          most_recent_purchase_date\n       , date_diff('d', min(occurred_at), current_date)::real / 30                 months_since_first_order\n       , date_diff('d', max(occurred_at), current_date)::real / 30                 months_since_most_recent_order\n       , avg(nvl(revenue_amount_usd, 0))                                           aov\n       , (discount_amount_total_usd / nullif(net_revenue_amount_usd + discount_amount_total_usd, 0)) * 100 discount_pct\n       , nvl(count(amount_usd), 0)                                                 count_of_orders\n       , count(*)                                                                  purchase_count\n       , sum(case when date_diff('d', occurred_at, current_date) <= 365\n                  then nvl(revenue_amount_usd,0) else 0 end)                       revenue_rolling_year\n    FROM \"dumps\".\"dev\".\"purchases_corrected\"\n              JOIN account USING (account_id)\n   WHERE amount_usd > 0\n     AND canceled_at IS NULL\n   GROUP BY account_id, account_public_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"account_purchases\""}, "model.drip_data_intelligence.marketing_subscription_status_by_day": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.backfill_calendar", "model.drip_data_intelligence.backfill_calendar"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "marketing_subscription_status_by_day"], "unique_id": "model.drip_data_intelligence.marketing_subscription_status_by_day", "raw_code": "WITH state_transitions_combined AS\n      (\n          SELECT subject_id\n               , \"from\"\n               , \"to\"\n               , created_at\n            FROM data_intelligence.subscription_state_transitions\n           WHERE TRUE\n             AND \"to\" NOT LIKE 'trust%'\n             AND \"from\" NOT LIKE 'trust%'\n           UNION ALL\n          SELECT id           AS subject_id\n               , NULL         AS \"from\"\n               , 'setting_up' AS \"to\"\n               , created_at\n            FROM {{ ref(\"subscriptions\") }}\n           WHERE TRUE\n             AND status = 'setting_up'\n      )\n     , backfill_state_transitions AS\n      (\n          SELECT subject_id\n               , \"from\"\n               , \"to\"\n               , created_at\n               , as_of_date\n               , events_date\n               , row_number() OVER (PARTITION BY subject_id, as_of_date ORDER BY events_date DESC) n\n               , lag(created_at) OVER (PARTITION BY subject_id, as_of_date ORDER BY events_date)   penultimate_created_at\n            FROM state_transitions_combined\n                     JOIN {{ ref(\"backfill_calendar\") }} ON events_date = date_trunc('d', created_at)\n           WHERE as_of_date >= '1-jan-2020'\n      )\n     , state_transitions_by_date AS\n      (\n          SELECT subject_id\n               , \"from\"                                             last_status_from\n               , \"to\"                                               last_status_to\n               , created_at\n               , as_of_date\n               , date_diff('d', penultimate_created_at, created_at) days_between_state_change\n            FROM backfill_state_transitions\n           WHERE n = 1\n      )\n     , trust_status_backfill AS\n      (\n          SELECT subject_id\n               , \"to\"\n               , \"from\"\n               , created_at\n               , events_date\n               , as_of_date\n               , row_number() OVER (PARTITION BY subject_id, as_of_date ORDER BY events_date DESC) n\n               , lag(created_at) OVER (PARTITION BY subject_id, as_of_date ORDER BY events_date)   penultimate_created_at\n            FROM data_intelligence.subscription_state_transitions\n                     JOIN {{ ref(\"backfill_calendar\") }} ON date_trunc('d', created_at) = events_date\n           WHERE TRUE\n             AND \"to\" LIKE 'trust%'\n             AND \"from\" LIKE 'trust%'\n             AND as_of_date >= '1-jan-2020'\n      )\n     , trust_status_by_date AS\n      (\n          SELECT subject_id\n               , created_at\n               , \"from\" AS                                          last_trust_status_from\n               , \"to\"   AS                                          last_trust_status_to\n               , as_of_date\n               , date_diff('d', penultimate_created_at, created_at) days_between_trust_change\n            FROM trust_status_backfill\n           WHERE TRUE\n             AND n = 1\n      )\nSELECT calendar_date                                                               AS  as_of_date\n     , coalesce(state_transitions_by_date.subject_id, trust_status_by_date.subject_id) subscription_id\n     , last_status_from\n     , last_status_to\n     , last_trust_status_from\n     , last_trust_status_to\n     , days_between_state_change\n     , days_between_trust_change\n     , CASE\n           WHEN (last_trust_status_to = 'trust.banned'\n               OR last_trust_status_to = 'trust.blocked')\n               AND days_between_trust_change NOT IN (89, 90, 91)\n               THEN -- Check for 90 day block/ban\n               'banned'\n               ELSE\n               NULL\n    END                                                                            AS  is_banned_or_blocked -- Anyone legitimately banned or blocked should have a status of 'banned' (COALESCE BELOW)\n     , CASE\n           WHEN last_status_from = 'trial_expired'\n               AND last_status_to = 'cancelled'\n               AND days_between_state_change IN (13, 14, 15)\n               THEN -- check for 14 day auto cancellation\n               'trial_expired'\n               ELSE\n               NULL\n    END                                                                            AS  had_trial_expire     -- If they aren't banned and the last legitimate status was trial_expired, they are trial expired (COALESCE BELOW)\n     , CASE WHEN last_status_to = 'cancelled' THEN 'churned' ELSE last_status_to END AS  cancelled_to_churned\n     , coalesce(is_banned_or_blocked, had_trial_expire, cancelled_to_churned)      AS  final_status\n  FROM {{ source(\"alpha_not_owned_by_dbt\", \"dim_date\") }}\n           LEFT JOIN state_transitions_by_date ON state_transitions_by_date.as_of_date = calendar_date\n           LEFT JOIN trust_status_by_date ON trust_status_by_date.as_of_date = calendar_date\n      AND state_transitions_by_date.subject_id = trust_status_by_date.subject_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/marketing_subscription_status_by_day.sql", "original_file_path": "models/alpha/marketing_subscription_status_by_day.sql", "name": "marketing_subscription_status_by_day", "alias": "marketing_subscription_status_by_day", "checksum": {"name": "sha256", "checksum": "f9f4a07ba61202b7aef42f5563b024f0365a4561d752fa288d4f3a71959ab50b"}, "tags": [], "refs": [["subscriptions"], ["backfill_calendar"], ["backfill_calendar"]], "sources": [["alpha_not_owned_by_dbt", "dim_date"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/marketing_subscription_status_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.985787, "compiled_code": "WITH state_transitions_combined AS\n      (\n          SELECT subject_id\n               , \"from\"\n               , \"to\"\n               , created_at\n            FROM data_intelligence.subscription_state_transitions\n           WHERE TRUE\n             AND \"to\" NOT LIKE 'trust%'\n             AND \"from\" NOT LIKE 'trust%'\n           UNION ALL\n          SELECT id           AS subject_id\n               , NULL         AS \"from\"\n               , 'setting_up' AS \"to\"\n               , created_at\n            FROM \"dumps\".\"dev\".\"subscriptions\"\n           WHERE TRUE\n             AND status = 'setting_up'\n      )\n     , backfill_state_transitions AS\n      (\n          SELECT subject_id\n               , \"from\"\n               , \"to\"\n               , created_at\n               , as_of_date\n               , events_date\n               , row_number() OVER (PARTITION BY subject_id, as_of_date ORDER BY events_date DESC) n\n               , lag(created_at) OVER (PARTITION BY subject_id, as_of_date ORDER BY events_date)   penultimate_created_at\n            FROM state_transitions_combined\n                     JOIN \"dumps\".\"dev\".\"backfill_calendar\" ON events_date = date_trunc('d', created_at)\n           WHERE as_of_date >= '1-jan-2020'\n      )\n     , state_transitions_by_date AS\n      (\n          SELECT subject_id\n               , \"from\"                                             last_status_from\n               , \"to\"                                               last_status_to\n               , created_at\n               , as_of_date\n               , date_diff('d', penultimate_created_at, created_at) days_between_state_change\n            FROM backfill_state_transitions\n           WHERE n = 1\n      )\n     , trust_status_backfill AS\n      (\n          SELECT subject_id\n               , \"to\"\n               , \"from\"\n               , created_at\n               , events_date\n               , as_of_date\n               , row_number() OVER (PARTITION BY subject_id, as_of_date ORDER BY events_date DESC) n\n               , lag(created_at) OVER (PARTITION BY subject_id, as_of_date ORDER BY events_date)   penultimate_created_at\n            FROM data_intelligence.subscription_state_transitions\n                     JOIN \"dumps\".\"dev\".\"backfill_calendar\" ON date_trunc('d', created_at) = events_date\n           WHERE TRUE\n             AND \"to\" LIKE 'trust%'\n             AND \"from\" LIKE 'trust%'\n             AND as_of_date >= '1-jan-2020'\n      )\n     , trust_status_by_date AS\n      (\n          SELECT subject_id\n               , created_at\n               , \"from\" AS                                          last_trust_status_from\n               , \"to\"   AS                                          last_trust_status_to\n               , as_of_date\n               , date_diff('d', penultimate_created_at, created_at) days_between_trust_change\n            FROM trust_status_backfill\n           WHERE TRUE\n             AND n = 1\n      )\nSELECT calendar_date                                                               AS  as_of_date\n     , coalesce(state_transitions_by_date.subject_id, trust_status_by_date.subject_id) subscription_id\n     , last_status_from\n     , last_status_to\n     , last_trust_status_from\n     , last_trust_status_to\n     , days_between_state_change\n     , days_between_trust_change\n     , CASE\n           WHEN (last_trust_status_to = 'trust.banned'\n               OR last_trust_status_to = 'trust.blocked')\n               AND days_between_trust_change NOT IN (89, 90, 91)\n               THEN -- Check for 90 day block/ban\n               'banned'\n               ELSE\n               NULL\n    END                                                                            AS  is_banned_or_blocked -- Anyone legitimately banned or blocked should have a status of 'banned' (COALESCE BELOW)\n     , CASE\n           WHEN last_status_from = 'trial_expired'\n               AND last_status_to = 'cancelled'\n               AND days_between_state_change IN (13, 14, 15)\n               THEN -- check for 14 day auto cancellation\n               'trial_expired'\n               ELSE\n               NULL\n    END                                                                            AS  had_trial_expire     -- If they aren't banned and the last legitimate status was trial_expired, they are trial expired (COALESCE BELOW)\n     , CASE WHEN last_status_to = 'cancelled' THEN 'churned' ELSE last_status_to END AS  cancelled_to_churned\n     , coalesce(is_banned_or_blocked, had_trial_expire, cancelled_to_churned)      AS  final_status\n  FROM \"dumps\".\"alpha\".\"dim_date\"\n           LEFT JOIN state_transitions_by_date ON state_transitions_by_date.as_of_date = calendar_date\n           LEFT JOIN trust_status_by_date ON trust_status_by_date.as_of_date = calendar_date\n      AND state_transitions_by_date.subject_id = trust_status_by_date.subject_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"marketing_subscription_status_by_day\""}, "model.drip_data_intelligence.active_forms_snapshot": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.drip_data_intelligence.active_forms_current"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "active_forms_snapshot"], "unique_id": "model.drip_data_intelligence.active_forms_snapshot", "raw_code": "{{\n    config(\n        materialized='incremental'\n    )\n}}\n\nselect * from {{ ref('active_forms_current') }}\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\n  where as_of_date > (select max(as_of_date) from {{ this }})\n\n{% endif %}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/active_forms_snapshot.sql", "original_file_path": "models/alpha/active_forms_snapshot.sql", "name": "active_forms_snapshot", "alias": "active_forms_snapshot", "checksum": {"name": "sha256", "checksum": "93da438eb03cc9556790d551ecfdd6afa4534c530715417164e8db29a90687d3"}, "tags": [], "refs": [["active_forms_current"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/alpha/alpha.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/active_forms_snapshot.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "incremental", "schema": "alpha"}, "created_at": 1674498298.411765, "compiled_code": "\n\nselect * from \"dumps\".\"dev\".\"active_forms_current\"\n\n\n\n  -- this filter will only be applied on an incremental run\n  where as_of_date > (select max(as_of_date) from \"dumps\".\"dev\".\"active_forms_snapshot\")\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"active_forms_snapshot\""}, "model.drip_data_intelligence.account_technology_usages_current": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_technology_usages_current"], "unique_id": "model.drip_data_intelligence.account_technology_usages_current", "raw_code": "WITH account_technology_usages_with_row_num AS (\n        SELECT account_public_id\n             , ecomm_platform\n             , updated_at\n             , row_number() OVER (\n                PARTITION BY account_public_id\n                ORDER BY updated_at DESC\n             )                                  AS row_num\n        FROM current.account_technology_usages\n  )\nSELECT account_public_id, ecomm_platform, updated_at\n  FROM account_technology_usages_with_row_num\n WHERE row_num = 1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_technology_usages_current.sql", "original_file_path": "models/alpha/account_technology_usages_current.sql", "name": "account_technology_usages_current", "alias": "account_technology_usages_current", "checksum": {"name": "sha256", "checksum": "b663e0f91599797f5dac82f7f876787f6ebe94be28249e20f37d373be7c0d564"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_technology_usages_current.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.9943092, "compiled_code": "WITH account_technology_usages_with_row_num AS (\n        SELECT account_public_id\n             , ecomm_platform\n             , updated_at\n             , row_number() OVER (\n                PARTITION BY account_public_id\n                ORDER BY updated_at DESC\n             )                                  AS row_num\n        FROM current.account_technology_usages\n  )\nSELECT account_public_id, ecomm_platform, updated_at\n  FROM account_technology_usages_with_row_num\n WHERE row_num = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"account_technology_usages_current\""}, "model.drip_data_intelligence.active_forms_current": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscription_metrics_current", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.forms"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "active_forms_current"], "unique_id": "model.drip_data_intelligence.active_forms_current", "raw_code": "WITH active_accounts AS (\n\tSELECT DISTINCT\n\t\taccount_id\n\t\t, account_public_id\n\t\t, activated_at\n\t\t, current_mrr\n\tFROM\n\t\t{{ ref(\"subscription_metrics_current\") }}\n\tJOIN {{ ref(\"account_metrics_current\") }} USING (subscription_id)\n\tWHERE TRUE\n\t\tAND is_active\n\t\tAND NOT created_by_drip_employee\n),\nsn_forms AS (\n\tSELECT\n\t\taccount_id\n\t\t, form_type\n\t\t, COUNT(*) AS forms_count\n\tFROM\n\t\tcurrent.sn_forms\n\tWHERE TRUE\n\t\tAND status = 'active'\n\tGROUP BY\n\t\taccount_id,\n\t\tform_type\n),\ndrip_forms AS (\n\tSELECT\n\t\taccount_id\n\t\t, 'drip' AS form_type\n\t\t, COUNT(*) AS forms_count\n\tFROM\n\t\t{{ ref(\"forms\") }}\n\tWHERE TRUE\n\t\tAND status = 'active'\n\tGROUP BY\n\t\taccount_id\n),\nforms AS (\n\tSELECT\n\t\t*\n\tFROM\n\t\tsn_forms\n\tUNION ALL\n\tSELECT\n\t\t*\n\tFROM\n\t\tdrip_forms\n)\nSELECT\n\taccount_id\n\t, SYSDATE::DATE AS as_of_date\n\t, form_type\n\t, COALESCE(FORMS_COUNT, 0) AS forms_count\nFROM\n\tactive_accounts\nLEFT JOIN forms USING (account_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/active_forms_current.sql", "original_file_path": "models/alpha/active_forms_current.sql", "name": "active_forms_current", "alias": "active_forms_current", "checksum": {"name": "sha256", "checksum": "1a6d890e3081308c05c0f1953ec2ebe73dadbb50bd89aa3e29582bf0c2f09aaf"}, "tags": [], "refs": [["subscription_metrics_current"], ["account_metrics_current"], ["forms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/active_forms_current.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.996747, "compiled_code": "WITH active_accounts AS (\n\tSELECT DISTINCT\n\t\taccount_id\n\t\t, account_public_id\n\t\t, activated_at\n\t\t, current_mrr\n\tFROM\n\t\t\"dumps\".\"dev\".\"subscription_metrics_current\"\n\tJOIN \"dumps\".\"dev\".\"account_metrics_current\" USING (subscription_id)\n\tWHERE TRUE\n\t\tAND is_active\n\t\tAND NOT created_by_drip_employee\n),\nsn_forms AS (\n\tSELECT\n\t\taccount_id\n\t\t, form_type\n\t\t, COUNT(*) AS forms_count\n\tFROM\n\t\tcurrent.sn_forms\n\tWHERE TRUE\n\t\tAND status = 'active'\n\tGROUP BY\n\t\taccount_id,\n\t\tform_type\n),\ndrip_forms AS (\n\tSELECT\n\t\taccount_id\n\t\t, 'drip' AS form_type\n\t\t, COUNT(*) AS forms_count\n\tFROM\n\t\t\"dumps\".\"dev\".\"forms\"\n\tWHERE TRUE\n\t\tAND status = 'active'\n\tGROUP BY\n\t\taccount_id\n),\nforms AS (\n\tSELECT\n\t\t*\n\tFROM\n\t\tsn_forms\n\tUNION ALL\n\tSELECT\n\t\t*\n\tFROM\n\t\tdrip_forms\n)\nSELECT\n\taccount_id\n\t, SYSDATE::DATE AS as_of_date\n\t, form_type\n\t, COALESCE(FORMS_COUNT, 0) AS forms_count\nFROM\n\tactive_accounts\nLEFT JOIN forms USING (account_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"active_forms_current\""}, "model.drip_data_intelligence.store_revenue_stats": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date", "model.drip_data_intelligence.account_attributed_revenue", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "store_revenue_stats"], "unique_id": "model.drip_data_intelligence.store_revenue_stats", "raw_code": "WITH account_daily_revenue AS\n           (\n               SELECT account_id\n                    , occurred_at\n                    , first_date_of_month\n                    , calendar_date = last_date_of_month                                                     is_last_date_of_month\n                    , dense_rank()\n                      OVER (PARTITION BY account_id, is_last_date_of_month ORDER BY last_date_of_month DESC) month_count_desc\n                    , first_date_of_year\n                    , last_date_of_year\n                    , coalesce(total_revenue_USD, 0)                                                         revenue_account_daily_usd\n                    , sum(revenue_account_daily_usd)\n                      OVER (PARTITION BY account_id, first_date_of_month)                                    revenue_account_monthly_usd\n                    , sum(revenue_account_daily_usd)\n                      OVER (PARTITION BY account_id, first_date_of_year)                                     revenue_account_annual_usd\n                 FROM {{ source('alpha_not_owned_by_dbt', 'dim_date') }} d\n                          LEFT JOIN {{ ref('account_attributed_revenue') }} aar ON calendar_date = occurred_at\n           )\nSELECT subscription_id\n     , account_id\n     , avg(revenue_account_daily_usd)                    revenue_account_daily_average_usd\n     , avg(CASE\n               WHEN is_last_date_of_month\n                   THEN revenue_account_monthly_usd END) revenue_account_monthly_average_usd\n     , avg(CASE\n               WHEN occurred_at = last_date_of_year\n                   THEN revenue_account_annual_usd END)  revenue_account_annual_average_usd\n     , sum(CASE\n               WHEN date_diff('d', occurred_at, current_date) <= 365\n                   THEN revenue_account_daily_usd END)   revenue_account_rolling_year_usd\n     , sum(CASE\n               WHEN is_last_date_of_month\n                   AND month_count_desc <= 12\n                   THEN revenue_account_monthly_usd END) revenue_account_last_12_month_avgerage_usd\n     , sum(CASE\n               WHEN first_date_of_year = date_trunc('y', current_date)\n                   THEN revenue_account_daily_usd END)   revenue_account_ytd_usd\n     , sum(revenue_account_daily_average_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_daily_average_usd\n     , sum(revenue_account_monthly_average_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_monthly_average_usd\n     , sum(revenue_account_annual_average_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_annual_average_usd\n     , sum(revenue_account_rolling_year_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_rolling_year_usd\n     , sum(revenue_account_last_12_month_avgerage_usd)\n       over(PARTITION BY  a.subscription_id)             revenue_subscription_last_12_month_average_usd\n     , sum(revenue_account_ytd_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_ytd_usd\n  FROM account_daily_revenue adr\n           LEFT JOIN {{ ref('accounts') }} a ON adr.account_id = a.id\n GROUP BY account_id, subscription_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/store_revenue_stats.sql", "original_file_path": "models/alpha/store_revenue_stats.sql", "name": "store_revenue_stats", "alias": "store_revenue_stats", "checksum": {"name": "sha256", "checksum": "294d84bb2f415de4e35925fa7c9b302843ce6e475dad6fb5e23d7ac415930435"}, "tags": [], "refs": [["account_attributed_revenue"], ["accounts"]], "sources": [["alpha_not_owned_by_dbt", "dim_date"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/store_revenue_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498297.9993012, "compiled_code": "WITH account_daily_revenue AS\n           (\n               SELECT account_id\n                    , occurred_at\n                    , first_date_of_month\n                    , calendar_date = last_date_of_month                                                     is_last_date_of_month\n                    , dense_rank()\n                      OVER (PARTITION BY account_id, is_last_date_of_month ORDER BY last_date_of_month DESC) month_count_desc\n                    , first_date_of_year\n                    , last_date_of_year\n                    , coalesce(total_revenue_USD, 0)                                                         revenue_account_daily_usd\n                    , sum(revenue_account_daily_usd)\n                      OVER (PARTITION BY account_id, first_date_of_month)                                    revenue_account_monthly_usd\n                    , sum(revenue_account_daily_usd)\n                      OVER (PARTITION BY account_id, first_date_of_year)                                     revenue_account_annual_usd\n                 FROM \"dumps\".\"alpha\".\"dim_date\" d\n                          LEFT JOIN \"dumps\".\"dev\".\"account_attributed_revenue\" aar ON calendar_date = occurred_at\n           )\nSELECT subscription_id\n     , account_id\n     , avg(revenue_account_daily_usd)                    revenue_account_daily_average_usd\n     , avg(CASE\n               WHEN is_last_date_of_month\n                   THEN revenue_account_monthly_usd END) revenue_account_monthly_average_usd\n     , avg(CASE\n               WHEN occurred_at = last_date_of_year\n                   THEN revenue_account_annual_usd END)  revenue_account_annual_average_usd\n     , sum(CASE\n               WHEN date_diff('d', occurred_at, current_date) <= 365\n                   THEN revenue_account_daily_usd END)   revenue_account_rolling_year_usd\n     , sum(CASE\n               WHEN is_last_date_of_month\n                   AND month_count_desc <= 12\n                   THEN revenue_account_monthly_usd END) revenue_account_last_12_month_avgerage_usd\n     , sum(CASE\n               WHEN first_date_of_year = date_trunc('y', current_date)\n                   THEN revenue_account_daily_usd END)   revenue_account_ytd_usd\n     , sum(revenue_account_daily_average_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_daily_average_usd\n     , sum(revenue_account_monthly_average_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_monthly_average_usd\n     , sum(revenue_account_annual_average_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_annual_average_usd\n     , sum(revenue_account_rolling_year_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_rolling_year_usd\n     , sum(revenue_account_last_12_month_avgerage_usd)\n       over(PARTITION BY  a.subscription_id)             revenue_subscription_last_12_month_average_usd\n     , sum(revenue_account_ytd_usd)\n       OVER (PARTITION BY a.subscription_id)             revenue_subscription_ytd_usd\n  FROM account_daily_revenue adr\n           LEFT JOIN \"dumps\".\"dev\".\"accounts\" a ON adr.account_id = a.id\n GROUP BY account_id, subscription_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"store_revenue_stats\""}, "model.drip_data_intelligence.people_purchases": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.purchases_corrected"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "people_purchases"], "unique_id": "model.drip_data_intelligence.people_purchases", "raw_code": "WITH active_accounts AS\n      (\n          SELECT DISTINCT id account_id, public_id account_public_id\n            FROM {{ ref('accounts') }}\n           WHERE status = 'active'\n      )\n  SELECT account_id\n       , account_public_id\n       , subscriber_id\n       , sum(nvl(amount_usd, 0))                                                                  gross_revenue_amount\n       , sum(nvl(revenue_amount_usd, 0))                                                          net_revenue_amount\n       , sum(nvl(discount_usd, 0))                                                                discount_amount\n       , sum(nvl(shipping_usd, 0))                                                                shipping_amount\n       , sum(nvl(tax_usd, 0))                                                                     tax_amount\n       , min(occurred_at)                                                                         first_purchase_date\n       , max(occurred_at)                                                                         most_recent_purchase_date\n       , date_diff('d', min(occurred_at), current_date)::real / 30                                months_since_first_order\n       , date_diff('d', max(occurred_at), current_date)::real / 30                                months_since_most_recent_order\n       , avg(nvl(revenue_amount_usd, 0))                                                          aov\n       , (discount_amount / nullif(net_revenue_amount + discount_amount, 0)) * 100                discount_pct\n       , CASE\n             WHEN min(nvl(discount_usd,0)) > 0\n                 THEN TRUE\n                 ELSE FALSE END                                                                   is_discount_exclusive\n       , nvl(count(amount_usd), 0)                                                                count_of_orders\n       , sum(net_revenue_amount)\n         OVER (PARTITION BY account_id ORDER BY net_revenue_amount DESC ROWS UNBOUNDED PRECEDING) descending_ltv_running_total_by_account\n       , sum(net_revenue_amount) OVER (PARTITION BY account_id)                                   total_account_revenue\n       , descending_ltv_running_total_by_account / nullif(total_account_revenue, 0)               ranked_rev_pct\n    FROM active_accounts\n    JOIN {{ref('purchases_corrected')}} USING (account_id)\n   WHERE amount_usd > 0\n     AND canceled_at IS NULL\n   GROUP BY account_id, account_public_id, subscriber_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/people_purchases.sql", "original_file_path": "models/alpha/people_purchases.sql", "name": "people_purchases", "alias": "people_purchases", "checksum": {"name": "sha256", "checksum": "1050a6a572e1cbf105d625dfdd2b487e747900762f07c48afc8f338ff71f3d8c"}, "tags": [], "refs": [["accounts"], ["purchases_corrected"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/people_purchases.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.002702, "compiled_code": "WITH active_accounts AS\n      (\n          SELECT DISTINCT id account_id, public_id account_public_id\n            FROM \"dumps\".\"dev\".\"accounts\"\n           WHERE status = 'active'\n      )\n  SELECT account_id\n       , account_public_id\n       , subscriber_id\n       , sum(nvl(amount_usd, 0))                                                                  gross_revenue_amount\n       , sum(nvl(revenue_amount_usd, 0))                                                          net_revenue_amount\n       , sum(nvl(discount_usd, 0))                                                                discount_amount\n       , sum(nvl(shipping_usd, 0))                                                                shipping_amount\n       , sum(nvl(tax_usd, 0))                                                                     tax_amount\n       , min(occurred_at)                                                                         first_purchase_date\n       , max(occurred_at)                                                                         most_recent_purchase_date\n       , date_diff('d', min(occurred_at), current_date)::real / 30                                months_since_first_order\n       , date_diff('d', max(occurred_at), current_date)::real / 30                                months_since_most_recent_order\n       , avg(nvl(revenue_amount_usd, 0))                                                          aov\n       , (discount_amount / nullif(net_revenue_amount + discount_amount, 0)) * 100                discount_pct\n       , CASE\n             WHEN min(nvl(discount_usd,0)) > 0\n                 THEN TRUE\n                 ELSE FALSE END                                                                   is_discount_exclusive\n       , nvl(count(amount_usd), 0)                                                                count_of_orders\n       , sum(net_revenue_amount)\n         OVER (PARTITION BY account_id ORDER BY net_revenue_amount DESC ROWS UNBOUNDED PRECEDING) descending_ltv_running_total_by_account\n       , sum(net_revenue_amount) OVER (PARTITION BY account_id)                                   total_account_revenue\n       , descending_ltv_running_total_by_account / nullif(total_account_revenue, 0)               ranked_rev_pct\n    FROM active_accounts\n    JOIN \"dumps\".\"dev\".\"purchases_corrected\" USING (account_id)\n   WHERE amount_usd > 0\n     AND canceled_at IS NULL\n   GROUP BY account_id, account_public_id, subscriber_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"people_purchases\""}, "model.drip_data_intelligence.total_kpis_daily": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscription_kpis_daily"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "total_kpis_daily"], "unique_id": "model.drip_data_intelligence.total_kpis_daily", "raw_code": "SELECT\n  mrr_date,\n  category,\n  SUM(active :: INT) active_count,\n  SUM(active_mrr_cents) active_mrr_cents,\n  SUM(activated :: INT) activation_count,\n  SUM(activated_mrr_cents) activation_mrr_cents,\n  SUM(reactivated :: INT) reactivation_count,\n  SUM(reactivated_mrr_cents) reactivation_mrr_cents,\n  SUM(expanded :: INT) expansion_count,\n  SUM(expanded_mrr_cents :: INT) expansion_mrr_cents,\n  SUM(contracted :: INT) contraction_count,\n  SUM(contracted_mrr_cents :: INT) contraction_mrr_cents,\n  SUM(churned :: INT) churn_count,\n  SUM(churned_mrr_cents :: INT) churn_mrr_cents\nFROM\n  {{ ref(\"subscription_kpis_daily\") }}\nGROUP BY\n  mrr_date,\n  category", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/total_kpis_daily.sql", "original_file_path": "models/alpha/total_kpis_daily.sql", "name": "total_kpis_daily", "alias": "total_kpis_daily", "checksum": {"name": "sha256", "checksum": "8ade7165f5f167192b11f3948d0c6c6b6a41079a51301424f1196c079948a3c3"}, "tags": [], "refs": [["subscription_kpis_daily"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/total_kpis_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "view", "schema": "alpha"}, "created_at": 1674498298.00559, "compiled_code": "SELECT\n  mrr_date,\n  category,\n  SUM(active :: INT) active_count,\n  SUM(active_mrr_cents) active_mrr_cents,\n  SUM(activated :: INT) activation_count,\n  SUM(activated_mrr_cents) activation_mrr_cents,\n  SUM(reactivated :: INT) reactivation_count,\n  SUM(reactivated_mrr_cents) reactivation_mrr_cents,\n  SUM(expanded :: INT) expansion_count,\n  SUM(expanded_mrr_cents :: INT) expansion_mrr_cents,\n  SUM(contracted :: INT) contraction_count,\n  SUM(contracted_mrr_cents :: INT) contraction_mrr_cents,\n  SUM(churned :: INT) churn_count,\n  SUM(churned_mrr_cents :: INT) churn_mrr_cents\nFROM\n  \"dumps\".\"dev\".\"subscription_kpis_daily\"\nGROUP BY\n  mrr_date,\n  category", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"total_kpis_daily\""}, "model.drip_data_intelligence.legacy_form_totals": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.forms"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "legacy_form_totals"], "unique_id": "model.drip_data_intelligence.legacy_form_totals", "raw_code": "SELECT account_id\n    , count(*)                                            legacy_forms_total\n    , sum(CASE WHEN status = 'active' THEN 1 ELSE 0 END)  legacy_forms_active_current\nFROM {{ ref(\"forms\")}}\nGROUP BY account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/legacy_form_totals.sql", "original_file_path": "models/alpha/legacy_form_totals.sql", "name": "legacy_form_totals", "alias": "legacy_form_totals", "checksum": {"name": "sha256", "checksum": "3689c30761fefb70d9a3d3a2dd2010f3bd61622b4a74e1cf9bdaab5a5bd1f309"}, "tags": [], "refs": [["forms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/legacy_form_totals.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.0085208, "compiled_code": "SELECT account_id\n    , count(*)                                            legacy_forms_total\n    , sum(CASE WHEN status = 'active' THEN 1 ELSE 0 END)  legacy_forms_active_current\nFROM \"dumps\".\"dev\".\"forms\"\nGROUP BY account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"legacy_form_totals\""}, "model.drip_data_intelligence.subscription_mrr_daily": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.subscription_recurring_revenues", "source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date", "model.drip_data_intelligence.invoices", "model.drip_data_intelligence.invoice_items"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_mrr_daily"], "unique_id": "model.drip_data_intelligence.subscription_mrr_daily", "raw_code": "WITH raw_subscription_mrr AS (\n  SELECT\n    subscription_id,\n    monthly_recurring_revenue_cents AS current_mrr_cents,\n    TO_DATE(\n      (\n        year :: text || '-' || month :: text || '-' || day :: text\n      ),\n      'YYYY-MM-dd'\n    ) AS mrr_date,\n    MIN(mrr_date) OVER (PARTITION BY subscription_id) activation_date,\n    category\n  FROM\n    {{ source('full_table_etl', 'subscription_recurring_revenues') }}\n  WHERE 1 = 1\n    AND NOT test_subscription\n),\ncalendar AS (\n  SELECT DISTINCT subscription_id, calendar_date\n    FROM {{ ref(\"invoices\") }}\n            JOIN {{ ref(\"invoice_items\") }} ON invoices.id = invoice_id\n            JOIN {{ source('alpha_not_owned_by_dbt', 'dim_date')}} on calendar_date >= period_first_day and calendar_date <= period_last_day\n  ORDER BY subscription_id, calendar_date\n),\nsubscription_activations AS (\n  SELECT\n    subscription_id,\n    MIN(mrr_date) activation_date,\n    category\n  FROM\n    raw_subscription_mrr\n  GROUP BY\n    subscription_id,\n    category\n),\nsubscription_dates_since_activation AS (\n  SELECT\n    subscription_id,\n    calendar_date as mrr_date,\n    category\n  FROM\n    calendar\n    join subscription_activations using (subscription_id)\n)\nSELECT\n  COALESCE(\n    raw_subscription_mrr.subscription_id,\n    subscription_dates_since_activation.subscription_id\n  ) AS subscription_id,\n  COALESCE(current_mrr_cents, 0) AS current_mrr_cents,\n  COALESCE(\n    raw_subscription_mrr.mrr_date,\n    subscription_dates_since_activation.mrr_date\n  ) AS mrr_date,\n  COALESCE(\n    raw_subscription_mrr.category,\n    subscription_dates_since_activation.category\n  ) AS category\nFROM\n  subscription_dates_since_activation\n  LEFT JOIN raw_subscription_mrr USING (subscription_id, mrr_date)\nORDER BY\n\t\tsubscription_id,\n\t\tmrr_date ASC", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_mrr_daily.sql", "original_file_path": "models/alpha/subscription_mrr_daily.sql", "name": "subscription_mrr_daily", "alias": "subscription_mrr_daily", "checksum": {"name": "sha256", "checksum": "da88ddeefa69884664e4b3a884e45fba0109de59cc4fe6e4c61b72b2e8c81715"}, "tags": [], "refs": [["invoices"], ["invoice_items"]], "sources": [["full_table_etl", "subscription_recurring_revenues"], ["alpha_not_owned_by_dbt", "dim_date"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_mrr_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.012288, "compiled_code": "WITH raw_subscription_mrr AS (\n  SELECT\n    subscription_id,\n    monthly_recurring_revenue_cents AS current_mrr_cents,\n    TO_DATE(\n      (\n        year :: text || '-' || month :: text || '-' || day :: text\n      ),\n      'YYYY-MM-dd'\n    ) AS mrr_date,\n    MIN(mrr_date) OVER (PARTITION BY subscription_id) activation_date,\n    category\n  FROM\n    \"dumps\".\"current\".\"subscription_recurring_revenues\"\n  WHERE 1 = 1\n    AND NOT test_subscription\n),\ncalendar AS (\n  SELECT DISTINCT subscription_id, calendar_date\n    FROM \"dumps\".\"dev\".\"invoices\"\n            JOIN \"dumps\".\"dev\".\"invoice_items\" ON invoices.id = invoice_id\n            JOIN \"dumps\".\"alpha\".\"dim_date\" on calendar_date >= period_first_day and calendar_date <= period_last_day\n  ORDER BY subscription_id, calendar_date\n),\nsubscription_activations AS (\n  SELECT\n    subscription_id,\n    MIN(mrr_date) activation_date,\n    category\n  FROM\n    raw_subscription_mrr\n  GROUP BY\n    subscription_id,\n    category\n),\nsubscription_dates_since_activation AS (\n  SELECT\n    subscription_id,\n    calendar_date as mrr_date,\n    category\n  FROM\n    calendar\n    join subscription_activations using (subscription_id)\n)\nSELECT\n  COALESCE(\n    raw_subscription_mrr.subscription_id,\n    subscription_dates_since_activation.subscription_id\n  ) AS subscription_id,\n  COALESCE(current_mrr_cents, 0) AS current_mrr_cents,\n  COALESCE(\n    raw_subscription_mrr.mrr_date,\n    subscription_dates_since_activation.mrr_date\n  ) AS mrr_date,\n  COALESCE(\n    raw_subscription_mrr.category,\n    subscription_dates_since_activation.category\n  ) AS category\nFROM\n  subscription_dates_since_activation\n  LEFT JOIN raw_subscription_mrr USING (subscription_id, mrr_date)\nORDER BY\n\t\tsubscription_id,\n\t\tmrr_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_mrr_daily\""}, "model.drip_data_intelligence.daily_kpi_by_category": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.drip_data_intelligence.total_kpis_daily", "model.drip_data_intelligence.total_kpis_daily", "model.drip_data_intelligence.total_kpis_daily", "model.drip_data_intelligence.total_kpis_daily", "model.drip_data_intelligence.total_kpis_daily"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "daily_kpi_by_category"], "unique_id": "model.drip_data_intelligence.daily_kpi_by_category", "raw_code": "WITH monthly_totals AS (\n  SELECT\n    date_trunc('MONTH', mrr_date) AS first_of_month_date,\n    category,\n    SUM(expansion_count) AS expansion_count_by_month,\n    SUM(contraction_count) AS contraction_count_by_month\n  FROM\n    {{ ref(\"total_kpis_daily\")}}\n  GROUP BY\n    first_of_month_date,\n    category\n)\nSELECT\n  {{ dbt_utils.star(ref(\"total_kpis_daily\"), except=[\"category\"]) }},\n  monthly_totals.*\nFROM\n  {{ ref(\"total_kpis_daily\") }}\n  LEFT JOIN monthly_totals\n    ON date_trunc('MONTH', {{ ref(\"total_kpis_daily\") }}.mrr_date) = monthly_totals.first_of_month_date\n    AND {{ ref(\"total_kpis_daily\") }}.category = monthly_totals.category\nORDER BY\n  mrr_date ASC", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/daily_kpi_by_category.sql", "original_file_path": "models/alpha/daily_kpi_by_category.sql", "name": "daily_kpi_by_category", "alias": "daily_kpi_by_category", "checksum": {"name": "sha256", "checksum": "2f5f6bd3eea44d804af11d53559621fc7a01383ce5a5f36cc8c6d1f8d4eba1b3"}, "tags": [], "refs": [["total_kpis_daily"], ["total_kpis_daily"], ["total_kpis_daily"], ["total_kpis_daily"], ["total_kpis_daily"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/daily_kpi_by_category.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.0159261, "compiled_code": "WITH monthly_totals AS (\n  SELECT\n    date_trunc('MONTH', mrr_date) AS first_of_month_date,\n    category,\n    SUM(expansion_count) AS expansion_count_by_month,\n    SUM(contraction_count) AS contraction_count_by_month\n  FROM\n    \"dumps\".\"dev\".\"total_kpis_daily\"\n  GROUP BY\n    first_of_month_date,\n    category\n)\nSELECT\n  \"mrr_date\",\n  \"active_count\",\n  \"active_mrr_cents\",\n  \"activation_count\",\n  \"activation_mrr_cents\",\n  \"reactivation_count\",\n  \"reactivation_mrr_cents\",\n  \"expansion_count\",\n  \"expansion_mrr_cents\",\n  \"contraction_count\",\n  \"contraction_mrr_cents\",\n  \"churn_count\",\n  \"churn_mrr_cents\",\n  monthly_totals.*\nFROM\n  \"dumps\".\"dev\".\"total_kpis_daily\"\n  LEFT JOIN monthly_totals\n    ON date_trunc('MONTH', \"dumps\".\"dev\".\"total_kpis_daily\".mrr_date) = monthly_totals.first_of_month_date\n    AND \"dumps\".\"dev\".\"total_kpis_daily\".category = monthly_totals.category\nORDER BY\n  mrr_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"daily_kpi_by_category\""}, "model.drip_data_intelligence.subscription_metrics_current": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscription_id", "model.drip_data_intelligence.subscription_activated_within_trial", "model.drip_data_intelligence.subscription_churned_before_n_days_active", "model.drip_data_intelligence.subscription_created_by_drip_employee", "model.drip_data_intelligence.subscription_details", "model.drip_data_intelligence.subscription_dimensions", "model.drip_data_intelligence.subscription_first_churned_at", "model.drip_data_intelligence.subscription_has_marketing_attribution", "model.drip_data_intelligence.subscription_indicated_an_oms", "model.drip_data_intelligence.subscription_indicated_an_oms_non_paid_marketing", "model.drip_data_intelligence.subscription_indicated_an_oms_paid_marketing", "model.drip_data_intelligence.subscription_is_unblocked", "model.drip_data_intelligence.subscription_oms_indicated", "model.drip_data_intelligence.subscription_oms_indicated_backfilled", "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_direct_marketing", "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_organic_marketing", "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_other_marketing", "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_paid_marketing", "model.drip_data_intelligence.subscription_trial_ended_at", "model.drip_data_intelligence.subscription_trial_start", "model.drip_data_intelligence.subscription_trust_status"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "subscription_metrics_current"], "unique_id": "model.drip_data_intelligence.subscription_metrics_current", "raw_code": "WITH base AS (SELECT * FROM {{ref('subscription_id')}}),\n     activated_within_trial AS (SELECT * FROM {{ref('subscription_activated_within_trial')}}),\n     churned_before_n_days_active AS (SELECT * FROM {{ref('subscription_churned_before_n_days_active')}}),\n     created_by_drip_employee AS (SELECT * FROM {{ref('subscription_created_by_drip_employee')}}),\n     details AS (SELECT * FROM {{ref('subscription_details')}}),\n     dimensions AS (SELECT * FROM {{ref('subscription_dimensions')}}),\n     first_churned_at AS (SELECT * FROM {{ref('subscription_first_churned_at')}}),\n     has_marketing_attribution AS (SELECT * FROM {{ref('subscription_has_marketing_attribution')}}),\n     indicated_an_oms AS (SELECT * FROM {{ref('subscription_indicated_an_oms')}}),\n     indicated_an_oms_non_paid_marketing AS (SELECT * FROM {{ref('subscription_indicated_an_oms_non_paid_marketing')}}),\n     indicated_an_oms_paid_marketing AS (SELECT * FROM {{ref('subscription_indicated_an_oms_paid_marketing')}}),\n     is_unblocked AS (SELECT * FROM {{ref('subscription_is_unblocked')}}),\n     oms_indicated AS (SELECT * FROM {{ref('subscription_oms_indicated')}}),\n     oms_indicated_backfilled AS (SELECT * FROM {{ref('subscription_oms_indicated_backfilled')}}),\n     pct_trial_lead_attributed_to_direct_marketing AS (SELECT * FROM {{ref('subscription_pct_trial_lead_attributed_to_direct_marketing')}}),\n     pct_trial_lead_attributed_to_organic_marketing AS (SELECT * FROM {{ref('subscription_pct_trial_lead_attributed_to_organic_marketing')}}),\n     pct_trial_lead_attributed_to_other_marketing AS (SELECT * FROM {{ref('subscription_pct_trial_lead_attributed_to_other_marketing')}}),\n     pct_trial_lead_attributed_to_paid_marketing AS (SELECT * FROM {{ref('subscription_pct_trial_lead_attributed_to_paid_marketing')}}),\n     trial_ended_at AS (SELECT * FROM {{ref('subscription_trial_ended_at')}}),\n     trial_start AS (SELECT * FROM {{ref('subscription_trial_start')}}),\n     trust_status AS (SELECT * FROM {{ref('subscription_trust_status')}})\nSELECT * FROM base\n    LEFT JOIN activated_within_trial USING (subscription_id)\n    LEFT JOIN churned_before_n_days_active USING (subscription_id)\n    LEFT JOIN created_by_drip_employee USING (subscription_id)\n    LEFT JOIN details USING (subscription_id)\n    LEFT JOIN dimensions USING (subscription_id)\n    LEFT JOIN first_churned_at USING (subscription_id)\n    LEFT JOIN has_marketing_attribution USING (subscription_id)\n    LEFT JOIN indicated_an_oms USING (subscription_id)\n    LEFT JOIN indicated_an_oms_non_paid_marketing USING (subscription_id)\n    LEFT JOIN indicated_an_oms_paid_marketing USING (subscription_id)\n    LEFT JOIN is_unblocked USING (subscription_id)\n    LEFT JOIN oms_indicated USING (subscription_id)\n    LEFT JOIN oms_indicated_backfilled USING (subscription_id)\n    LEFT JOIN pct_trial_lead_attributed_to_direct_marketing USING (subscription_id)\n    LEFT JOIN pct_trial_lead_attributed_to_organic_marketing USING (subscription_id)\n    LEFT JOIN pct_trial_lead_attributed_to_other_marketing USING (subscription_id)\n    LEFT JOIN pct_trial_lead_attributed_to_paid_marketing USING (subscription_id)\n    LEFT JOIN trial_ended_at USING (subscription_id)\n    LEFT JOIN trial_start USING (subscription_id)\n    LEFT JOIN trust_status USING (subscription_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/subscription_metrics_current.sql", "original_file_path": "models/alpha/subscription_metrics_current/subscription_metrics_current.sql", "name": "subscription_metrics_current", "alias": "subscription_metrics_current", "checksum": {"name": "sha256", "checksum": "130994889aa70c8a1546469e71e1b4eeeda0bebffe56d1c1a94c5fea0af197cb"}, "tags": [], "refs": [["subscription_id"], ["subscription_activated_within_trial"], ["subscription_churned_before_n_days_active"], ["subscription_created_by_drip_employee"], ["subscription_details"], ["subscription_dimensions"], ["subscription_first_churned_at"], ["subscription_has_marketing_attribution"], ["subscription_indicated_an_oms"], ["subscription_indicated_an_oms_non_paid_marketing"], ["subscription_indicated_an_oms_paid_marketing"], ["subscription_is_unblocked"], ["subscription_oms_indicated"], ["subscription_oms_indicated_backfilled"], ["subscription_pct_trial_lead_attributed_to_direct_marketing"], ["subscription_pct_trial_lead_attributed_to_organic_marketing"], ["subscription_pct_trial_lead_attributed_to_other_marketing"], ["subscription_pct_trial_lead_attributed_to_paid_marketing"], ["subscription_trial_ended_at"], ["subscription_trial_start"], ["subscription_trust_status"]], "sources": [], "metrics": [], "description": "Primary key", "columns": {"subscription_id": {"name": "subscription_id", "description": "The private primary key used by Drip DB", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/alpha/alpha.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/subscription_metrics_current.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.41086, "compiled_code": "WITH base AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_id\"),\n     activated_within_trial AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_activated_within_trial\"),\n     churned_before_n_days_active AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_churned_before_n_days_active\"),\n     created_by_drip_employee AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_created_by_drip_employee\"),\n     details AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_details\"),\n     dimensions AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_dimensions\"),\n     first_churned_at AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_first_churned_at\"),\n     has_marketing_attribution AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_has_marketing_attribution\"),\n     indicated_an_oms AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_indicated_an_oms\"),\n     indicated_an_oms_non_paid_marketing AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_indicated_an_oms_non_paid_marketing\"),\n     indicated_an_oms_paid_marketing AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_indicated_an_oms_paid_marketing\"),\n     is_unblocked AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_is_unblocked\"),\n     oms_indicated AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_oms_indicated\"),\n     oms_indicated_backfilled AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_oms_indicated_backfilled\"),\n     pct_trial_lead_attributed_to_direct_marketing AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_pct_trial_lead_attributed_to_direct_marketing\"),\n     pct_trial_lead_attributed_to_organic_marketing AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_pct_trial_lead_attributed_to_organic_marketing\"),\n     pct_trial_lead_attributed_to_other_marketing AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_pct_trial_lead_attributed_to_other_marketing\"),\n     pct_trial_lead_attributed_to_paid_marketing AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_pct_trial_lead_attributed_to_paid_marketing\"),\n     trial_ended_at AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_trial_ended_at\"),\n     trial_start AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_trial_start\"),\n     trust_status AS (SELECT * FROM \"dumps\".\"dev\".\"subscription_trust_status\")\nSELECT * FROM base\n    LEFT JOIN activated_within_trial USING (subscription_id)\n    LEFT JOIN churned_before_n_days_active USING (subscription_id)\n    LEFT JOIN created_by_drip_employee USING (subscription_id)\n    LEFT JOIN details USING (subscription_id)\n    LEFT JOIN dimensions USING (subscription_id)\n    LEFT JOIN first_churned_at USING (subscription_id)\n    LEFT JOIN has_marketing_attribution USING (subscription_id)\n    LEFT JOIN indicated_an_oms USING (subscription_id)\n    LEFT JOIN indicated_an_oms_non_paid_marketing USING (subscription_id)\n    LEFT JOIN indicated_an_oms_paid_marketing USING (subscription_id)\n    LEFT JOIN is_unblocked USING (subscription_id)\n    LEFT JOIN oms_indicated USING (subscription_id)\n    LEFT JOIN oms_indicated_backfilled USING (subscription_id)\n    LEFT JOIN pct_trial_lead_attributed_to_direct_marketing USING (subscription_id)\n    LEFT JOIN pct_trial_lead_attributed_to_organic_marketing USING (subscription_id)\n    LEFT JOIN pct_trial_lead_attributed_to_other_marketing USING (subscription_id)\n    LEFT JOIN pct_trial_lead_attributed_to_paid_marketing USING (subscription_id)\n    LEFT JOIN trial_ended_at USING (subscription_id)\n    LEFT JOIN trial_start USING (subscription_id)\n    LEFT JOIN trust_status USING (subscription_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_metrics_current\""}, "model.drip_data_intelligence.subscription_oms_indicated_backfilled": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.current.subscription_details", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_oms_indicated_backfilled"], "unique_id": "model.drip_data_intelligence.subscription_oms_indicated_backfilled", "raw_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM {{ source('current', 'subscription_details') }}) s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\nSELECT subscription_id,\n       ISNULL(\n               ISNULL(\n                       NULLIF(oms_indicated, 'Unknown'),\n                       oms_detected,\n                       'Unknown'\n                   )\n           ) AS oms_indicated_backfilled\nFROM (\n      (SELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1) AS oms_indicated\n         LEFT JOIN (\n    SELECT subscription_id,\n           INITCAP(NULLIF(ecomm_platform, 'None')) AS oms_detected\n    FROM (\n             SELECT subscription_id,\n                    ecomm_platform,\n                    updated_at,\n                    ROW_NUMBER() OVER (\n                        PARTITION BY subscription_id\n                        ORDER BY\n                            updated_at ASC\n                        )\n             FROM (\n                   (\n                       SELECT account_public_id AS public_id,\n                              ecomm_platform,\n                              updated_at\n                       FROM current.account_technology_usages\n                   ) AS tech_usage\n                      JOIN (\n                 SELECT subscription_id,\n                        public_id\n                 FROM {{ ref(\"accounts\") }}\n             ) AS accounts USING (public_id)\n                 )\n         ) backfilled_oms_platform\n    WHERE ROW_NUMBER = 1\n) AS earliest_oms_detected USING (subscription_id))", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_oms_indicated_backfilled.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_oms_indicated_backfilled.sql", "name": "subscription_oms_indicated_backfilled", "alias": "subscription_oms_indicated_backfilled", "checksum": {"name": "sha256", "checksum": "7eeaf2b2228c3ae55d0bf70d696bcfd9b4b307bccdecec08b60b127c40a72d62"}, "tags": [], "refs": [["accounts"]], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_oms_indicated_backfilled.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.026432, "compiled_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM \"dumps\".\"current\".\"subscription_details\") s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\nSELECT subscription_id,\n       ISNULL(\n               ISNULL(\n                       NULLIF(oms_indicated, 'Unknown'),\n                       oms_detected,\n                       'Unknown'\n                   )\n           ) AS oms_indicated_backfilled\nFROM (\n      (SELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1) AS oms_indicated\n         LEFT JOIN (\n    SELECT subscription_id,\n           INITCAP(NULLIF(ecomm_platform, 'None')) AS oms_detected\n    FROM (\n             SELECT subscription_id,\n                    ecomm_platform,\n                    updated_at,\n                    ROW_NUMBER() OVER (\n                        PARTITION BY subscription_id\n                        ORDER BY\n                            updated_at ASC\n                        )\n             FROM (\n                   (\n                       SELECT account_public_id AS public_id,\n                              ecomm_platform,\n                              updated_at\n                       FROM current.account_technology_usages\n                   ) AS tech_usage\n                      JOIN (\n                 SELECT subscription_id,\n                        public_id\n                 FROM \"dumps\".\"dev\".\"accounts\"\n             ) AS accounts USING (public_id)\n                 )\n         ) backfilled_oms_platform\n    WHERE ROW_NUMBER = 1\n) AS earliest_oms_detected USING (subscription_id))", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_oms_indicated_backfilled\""}, "model.drip_data_intelligence.subscription_first_churned_at": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_first_churned_at"], "unique_id": "model.drip_data_intelligence.subscription_first_churned_at", "raw_code": "SELECT id AS subscription_id, MIN(occurred_at) first_churned_at\nFROM finance.lifecycle\nWHERE type = 'churned'\nGROUP BY id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_first_churned_at.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_first_churned_at.sql", "name": "subscription_first_churned_at", "alias": "subscription_first_churned_at", "checksum": {"name": "sha256", "checksum": "d00db2c98a54655755e87c83e1ad1102863258ec0ce5b34476d00c0db33b2036"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_first_churned_at.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.029846, "compiled_code": "SELECT id AS subscription_id, MIN(occurred_at) first_churned_at\nFROM finance.lifecycle\nWHERE type = 'churned'\nGROUP BY id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_first_churned_at\""}, "model.drip_data_intelligence.subscription_trust_status": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_trust_status"], "unique_id": "model.drip_data_intelligence.subscription_trust_status", "raw_code": "select\n    id as subscription_id,\n    trust_status\nfrom\n    {{ ref(\"subscriptions\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_trust_status.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_trust_status.sql", "name": "subscription_trust_status", "alias": "subscription_trust_status", "checksum": {"name": "sha256", "checksum": "1769e63e2ce2cc7084c9c10d7894d7c014fda8e696af1eb30360d24a72a5034e"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_trust_status.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.033442, "compiled_code": "select\n    id as subscription_id,\n    trust_status\nfrom\n    \"dumps\".\"dev\".\"subscriptions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_trust_status\""}, "model.drip_data_intelligence.subscription_oms_indicated": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.current.subscription_details"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_oms_indicated"], "unique_id": "model.drip_data_intelligence.subscription_oms_indicated", "raw_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM {{ source('current', 'subscription_details') }}) s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\nSELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_oms_indicated.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_oms_indicated.sql", "name": "subscription_oms_indicated", "alias": "subscription_oms_indicated", "checksum": {"name": "sha256", "checksum": "f962cae8400da28c587bf85a6ec11f7cb73b06e3d6f5ec09825cedb022feb7d1"}, "tags": [], "refs": [], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_oms_indicated.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.0360808, "compiled_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM \"dumps\".\"current\".\"subscription_details\") s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\nSELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_oms_indicated\""}, "model.drip_data_intelligence.subscription_is_unblocked": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_is_unblocked"], "unique_id": "model.drip_data_intelligence.subscription_is_unblocked", "raw_code": "select\n    id as subscription_id,\n    trust_status in ('trusted', 'untrusted', 'super_trusted') AS is_unblocked\nfrom\n    {{ ref(\"subscriptions\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_is_unblocked.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_is_unblocked.sql", "name": "subscription_is_unblocked", "alias": "subscription_is_unblocked", "checksum": {"name": "sha256", "checksum": "52876ff634b3439d75cb971a9b9913032218d0dcdd5d37ae7e623b01af4569e4"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_is_unblocked.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.039201, "compiled_code": "select\n    id as subscription_id,\n    trust_status in ('trusted', 'untrusted', 'super_trusted') AS is_unblocked\nfrom\n    \"dumps\".\"dev\".\"subscriptions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_is_unblocked\""}, "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_paid_marketing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_pct_trial_lead_attributed_to_paid_marketing"], "unique_id": "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_paid_marketing", "raw_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_paid_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c IN ('Paid Search', 'Paid Social', 'Display')\nGROUP BY drip_subscription_id__c", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_paid_marketing.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_paid_marketing.sql", "name": "subscription_pct_trial_lead_attributed_to_paid_marketing", "alias": "subscription_pct_trial_lead_attributed_to_paid_marketing", "checksum": {"name": "sha256", "checksum": "e2a955375e13776fb158e949ef4e8001d509fc9ee6ed528f7a6c37eaa63500a0"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_paid_marketing.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.041766, "compiled_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_paid_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c IN ('Paid Search', 'Paid Social', 'Display')\nGROUP BY drip_subscription_id__c", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_pct_trial_lead_attributed_to_paid_marketing\""}, "model.drip_data_intelligence.subscription_dimensions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_dimensions"], "unique_id": "model.drip_data_intelligence.subscription_dimensions", "raw_code": "SELECT subscription_id,\n       activated_at_month,\n       sales_sourced,\n       sales_agency_sourced,\n       category\nFROM current.subscription_dimensions", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_dimensions.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_dimensions.sql", "name": "subscription_dimensions", "alias": "subscription_dimensions", "checksum": {"name": "sha256", "checksum": "f7c763c4ef8a63e2a3f2d53d19766540217dfd6076c647818d8dcebaa09b51bb"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_dimensions.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.0443058, "compiled_code": "SELECT subscription_id,\n       activated_at_month,\n       sales_sourced,\n       sales_agency_sourced,\n       category\nFROM current.subscription_dimensions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_dimensions\""}, "model.drip_data_intelligence.subscription_indicated_an_oms_non_paid_marketing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.current.subscription_details", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_indicated_an_oms_non_paid_marketing"], "unique_id": "model.drip_data_intelligence.subscription_indicated_an_oms_non_paid_marketing", "raw_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM {{ source('current', 'subscription_details') }}) s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\n     SELECT subscription_id, pct_trial_lead_attributed_to_non_paid_marketing AS pct_indicated_oms_trial_attributed_to_non_paid_marketing FROM\n(SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_non_paid_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c NOT IN ('Paid Search', 'Paid Social', 'Display')\nGROUP BY drip_subscription_id__c)\nJOIN (SELECT subscription_id,\n       oms_indicated_backfilled IS NOT NULL AND oms_indicated_backfilled != 'None' AND\n       oms_indicated_backfilled != 'Unknown' AS indicated_an_oms\nFROM (SELECT subscription_id,\n             ISNULL(\n                     ISNULL(\n                             NULLIF(oms_indicated, 'Unknown'),\n                             oms_detected,\n                             'Unknown'\n                         )\n                 ) AS oms_indicated_backfilled\n      FROM (\n            (SELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1) AS oms_indicated\n               LEFT JOIN (\n          SELECT subscription_id,\n                 INITCAP(NULLIF(ecomm_platform, 'None')) AS oms_detected\n          FROM (\n                   SELECT subscription_id,\n                          ecomm_platform,\n                          updated_at,\n                          ROW_NUMBER() OVER (\n                              PARTITION BY subscription_id\n                              ORDER BY\n                                  updated_at ASC\n                              )\n                   FROM (\n                         (\n                             SELECT account_public_id AS public_id,\n                                    ecomm_platform,\n                                    updated_at\n                             FROM current.account_technology_usages\n                         ) AS tech_usage\n                            JOIN (\n                       SELECT subscription_id,\n                              public_id\n                       FROM {{ ref(\"accounts\") }}\n                   ) AS accounts USING (public_id)\n                       )\n               ) backfilled_oms_platform\n          WHERE ROW_NUMBER = 1\n      ) AS earliest_oms_detected USING (subscription_id)))\n) USING (subscription_id)\nWHERE pct_trial_lead_attributed_to_non_paid_marketing > 0 AND indicated_an_oms", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_indicated_an_oms_non_paid_marketing.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_indicated_an_oms_non_paid_marketing.sql", "name": "subscription_indicated_an_oms_non_paid_marketing", "alias": "subscription_indicated_an_oms_non_paid_marketing", "checksum": {"name": "sha256", "checksum": "a3d6240251a6bec5f89e80e5e0b3431a5430b62701b18250a49648fa813798f3"}, "tags": [], "refs": [["accounts"]], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_indicated_an_oms_non_paid_marketing.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.046895, "compiled_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM \"dumps\".\"current\".\"subscription_details\") s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\n     SELECT subscription_id, pct_trial_lead_attributed_to_non_paid_marketing AS pct_indicated_oms_trial_attributed_to_non_paid_marketing FROM\n(SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_non_paid_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c NOT IN ('Paid Search', 'Paid Social', 'Display')\nGROUP BY drip_subscription_id__c)\nJOIN (SELECT subscription_id,\n       oms_indicated_backfilled IS NOT NULL AND oms_indicated_backfilled != 'None' AND\n       oms_indicated_backfilled != 'Unknown' AS indicated_an_oms\nFROM (SELECT subscription_id,\n             ISNULL(\n                     ISNULL(\n                             NULLIF(oms_indicated, 'Unknown'),\n                             oms_detected,\n                             'Unknown'\n                         )\n                 ) AS oms_indicated_backfilled\n      FROM (\n            (SELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1) AS oms_indicated\n               LEFT JOIN (\n          SELECT subscription_id,\n                 INITCAP(NULLIF(ecomm_platform, 'None')) AS oms_detected\n          FROM (\n                   SELECT subscription_id,\n                          ecomm_platform,\n                          updated_at,\n                          ROW_NUMBER() OVER (\n                              PARTITION BY subscription_id\n                              ORDER BY\n                                  updated_at ASC\n                              )\n                   FROM (\n                         (\n                             SELECT account_public_id AS public_id,\n                                    ecomm_platform,\n                                    updated_at\n                             FROM current.account_technology_usages\n                         ) AS tech_usage\n                            JOIN (\n                       SELECT subscription_id,\n                              public_id\n                       FROM \"dumps\".\"dev\".\"accounts\"\n                   ) AS accounts USING (public_id)\n                       )\n               ) backfilled_oms_platform\n          WHERE ROW_NUMBER = 1\n      ) AS earliest_oms_detected USING (subscription_id)))\n) USING (subscription_id)\nWHERE pct_trial_lead_attributed_to_non_paid_marketing > 0 AND indicated_an_oms", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_indicated_an_oms_non_paid_marketing\""}, "model.drip_data_intelligence.subscription_indicated_an_oms_paid_marketing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.current.subscription_details", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_indicated_an_oms_paid_marketing"], "unique_id": "model.drip_data_intelligence.subscription_indicated_an_oms_paid_marketing", "raw_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM {{ source('current', 'subscription_details') }}) s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\n     SELECT subscription_id, pct_trial_lead_attributed_to_paid_marketing AS pct_indicated_oms_trial_attributed_to_paid_marketing FROM\n(SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_paid_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c IN ('Paid Search', 'Paid Social', 'Display')\nGROUP BY drip_subscription_id__c)\nJOIN (SELECT subscription_id,\n       oms_indicated_backfilled IS NOT NULL AND oms_indicated_backfilled != 'None' AND\n       oms_indicated_backfilled != 'Unknown' AS indicated_an_oms\nFROM (SELECT subscription_id,\n             ISNULL(\n                     ISNULL(\n                             NULLIF(oms_indicated, 'Unknown'),\n                             oms_detected,\n                             'Unknown'\n                         )\n                 ) AS oms_indicated_backfilled\n      FROM (\n            (SELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1) AS oms_indicated\n               LEFT JOIN (\n          SELECT subscription_id,\n                 INITCAP(NULLIF(ecomm_platform, 'None')) AS oms_detected\n          FROM (\n                   SELECT subscription_id,\n                          ecomm_platform,\n                          updated_at,\n                          ROW_NUMBER() OVER (\n                              PARTITION BY subscription_id\n                              ORDER BY\n                                  updated_at ASC\n                              )\n                   FROM (\n                         (\n                             SELECT account_public_id AS public_id,\n                                    ecomm_platform,\n                                    updated_at\n                             FROM current.account_technology_usages\n                         ) AS tech_usage\n                            JOIN (\n                       SELECT subscription_id,\n                              public_id\n                       FROM {{ ref(\"accounts\") }}\n                   ) AS accounts USING (public_id)\n                       )\n               ) backfilled_oms_platform\n          WHERE ROW_NUMBER = 1\n      ) AS earliest_oms_detected USING (subscription_id)))\n) USING (subscription_id)\nWHERE pct_trial_lead_attributed_to_paid_marketing > 0 AND indicated_an_oms", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_indicated_an_oms_paid_marketing.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_indicated_an_oms_paid_marketing.sql", "name": "subscription_indicated_an_oms_paid_marketing", "alias": "subscription_indicated_an_oms_paid_marketing", "checksum": {"name": "sha256", "checksum": "9fb59378e426d16c2ef4c7bb038f4942624159b9a3a2d39ac25864847021d477"}, "tags": [], "refs": [["accounts"]], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_indicated_an_oms_paid_marketing.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.049778, "compiled_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM \"dumps\".\"current\".\"subscription_details\") s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\n     SELECT subscription_id, pct_trial_lead_attributed_to_paid_marketing AS pct_indicated_oms_trial_attributed_to_paid_marketing FROM\n(SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_paid_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c IN ('Paid Search', 'Paid Social', 'Display')\nGROUP BY drip_subscription_id__c)\nJOIN (SELECT subscription_id,\n       oms_indicated_backfilled IS NOT NULL AND oms_indicated_backfilled != 'None' AND\n       oms_indicated_backfilled != 'Unknown' AS indicated_an_oms\nFROM (SELECT subscription_id,\n             ISNULL(\n                     ISNULL(\n                             NULLIF(oms_indicated, 'Unknown'),\n                             oms_detected,\n                             'Unknown'\n                         )\n                 ) AS oms_indicated_backfilled\n      FROM (\n            (SELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1) AS oms_indicated\n               LEFT JOIN (\n          SELECT subscription_id,\n                 INITCAP(NULLIF(ecomm_platform, 'None')) AS oms_detected\n          FROM (\n                   SELECT subscription_id,\n                          ecomm_platform,\n                          updated_at,\n                          ROW_NUMBER() OVER (\n                              PARTITION BY subscription_id\n                              ORDER BY\n                                  updated_at ASC\n                              )\n                   FROM (\n                         (\n                             SELECT account_public_id AS public_id,\n                                    ecomm_platform,\n                                    updated_at\n                             FROM current.account_technology_usages\n                         ) AS tech_usage\n                            JOIN (\n                       SELECT subscription_id,\n                              public_id\n                       FROM \"dumps\".\"dev\".\"accounts\"\n                   ) AS accounts USING (public_id)\n                       )\n               ) backfilled_oms_platform\n          WHERE ROW_NUMBER = 1\n      ) AS earliest_oms_detected USING (subscription_id)))\n) USING (subscription_id)\nWHERE pct_trial_lead_attributed_to_paid_marketing > 0 AND indicated_an_oms", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_indicated_an_oms_paid_marketing\""}, "model.drip_data_intelligence.subscription_id": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_id"], "unique_id": "model.drip_data_intelligence.subscription_id", "raw_code": "SELECT id AS subscription_id FROM {{ ref(\"subscriptions\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_id.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_id.sql", "name": "subscription_id", "alias": "subscription_id", "checksum": {"name": "sha256", "checksum": "7f39a96cdb7c5f148f528e540854860af85309247724b1ada048e0c18b88efa1"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.0527601, "compiled_code": "SELECT id AS subscription_id FROM \"dumps\".\"dev\".\"subscriptions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_id\""}, "model.drip_data_intelligence.subscription_activated_within_trial": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.current.subscription_details", "source.drip_data_intelligence.data_intelligence.subscription_state_transitions", "model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_activated_within_trial"], "unique_id": "model.drip_data_intelligence.subscription_activated_within_trial", "raw_code": "SELECT subscription_id,\n       activated AND (trial_expired_at IS NULL OR activated_at <= trial_expired_at) AS activated_within_trial,\n       activated AND activated_at > trial_expired_at                               AS activated_outside_trial\nFROM {{ ref('subscriptions') }} s\n         JOIN {{ source('current', 'subscription_details') }} sd ON s.id = sd.subscription_id\n         LEFT JOIN (SELECT subject_id AS subscription_id, MIN(created_at) AS trial_expired_at\n                    FROM {{ source('data_intelligence', 'subscription_state_transitions')}}\n                    WHERE \"to\" = 'trial_expired'\n                    GROUP BY subject_id) USING (subscription_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_activated_within_trial.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_activated_within_trial.sql", "name": "subscription_activated_within_trial", "alias": "subscription_activated_within_trial", "checksum": {"name": "sha256", "checksum": "cad0fa31190b15474dd2129c77246aa588c9ee5bde499d04bcdaed854f33e22f"}, "tags": [], "refs": [["subscriptions"]], "sources": [["current", "subscription_details"], ["data_intelligence", "subscription_state_transitions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_activated_within_trial.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.055462, "compiled_code": "SELECT subscription_id,\n       activated AND (trial_expired_at IS NULL OR activated_at <= trial_expired_at) AS activated_within_trial,\n       activated AND activated_at > trial_expired_at                               AS activated_outside_trial\nFROM \"dumps\".\"dev\".\"subscriptions\" s\n         JOIN \"dumps\".\"current\".\"subscription_details\" sd ON s.id = sd.subscription_id\n         LEFT JOIN (SELECT subject_id AS subscription_id, MIN(created_at) AS trial_expired_at\n                    FROM \"dumps\".\"data_intelligence\".\"subscription_state_transitions\"\n                    WHERE \"to\" = 'trial_expired'\n                    GROUP BY subject_id) USING (subscription_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_activated_within_trial\""}, "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_direct_marketing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_pct_trial_lead_attributed_to_direct_marketing"], "unique_id": "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_direct_marketing", "raw_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_direct_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c IN ('Direct', 'Nurture', 'Email', 'Sales Outbound')\nGROUP BY drip_subscription_id__c", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_direct_marketing.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_direct_marketing.sql", "name": "subscription_pct_trial_lead_attributed_to_direct_marketing", "alias": "subscription_pct_trial_lead_attributed_to_direct_marketing", "checksum": {"name": "sha256", "checksum": "3bfab7ee3d688de4124134d6897ec1b769dced4120ee48840c4f16e397533325"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_direct_marketing.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.0582678, "compiled_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_direct_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c IN ('Direct', 'Nurture', 'Email', 'Sales Outbound')\nGROUP BY drip_subscription_id__c", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_pct_trial_lead_attributed_to_direct_marketing\""}, "model.drip_data_intelligence.subscription_indicated_an_oms": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.current.subscription_details", "model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_indicated_an_oms"], "unique_id": "model.drip_data_intelligence.subscription_indicated_an_oms", "raw_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM {{ source('current', 'subscription_details') }}) s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\nSELECT subscription_id,\n       oms_indicated_backfilled IS NOT NULL AND oms_indicated_backfilled != 'None' AND\n       oms_indicated_backfilled != 'Unknown' AS indicated_an_oms\nFROM (SELECT subscription_id,\n             ISNULL(\n                     ISNULL(\n                             NULLIF(oms_indicated, 'Unknown'),\n                             oms_detected,\n                             'Unknown'\n                         )\n                 ) AS oms_indicated_backfilled\n      FROM (\n            (SELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1) AS oms_indicated\n               LEFT JOIN (\n          SELECT subscription_id,\n                 INITCAP(NULLIF(ecomm_platform, 'None')) AS oms_detected\n          FROM (\n                   SELECT subscription_id,\n                          ecomm_platform,\n                          updated_at,\n                          ROW_NUMBER() OVER (\n                              PARTITION BY subscription_id\n                              ORDER BY\n                                  updated_at ASC\n                              )\n                   FROM (\n                         (\n                             SELECT account_public_id AS public_id,\n                                    ecomm_platform,\n                                    updated_at\n                             FROM current.account_technology_usages\n                         ) AS tech_usage\n                            JOIN (\n                       SELECT subscription_id,\n                              public_id\n                       FROM {{ ref(\"accounts\") }}\n                   ) AS accounts USING (public_id)\n                       )\n               ) backfilled_oms_platform\n          WHERE ROW_NUMBER = 1\n      ) AS earliest_oms_detected USING (subscription_id)))", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_indicated_an_oms.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_indicated_an_oms.sql", "name": "subscription_indicated_an_oms", "alias": "subscription_indicated_an_oms", "checksum": {"name": "sha256", "checksum": "03f55d0c415e1b4ab7195c159cb25b17b4c4762ab357f164f06fca25a4550e4e"}, "tags": [], "refs": [["accounts"]], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_indicated_an_oms.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.0613718, "compiled_code": "WITH subscription_metrics_current_without_oms AS (\n    SELECT *\n    FROM (\n             SELECT *\n             FROM current.subscription_dimensions) sd\n             INNER JOIN (\n        SELECT *\n        FROM \"dumps\".\"current\".\"subscription_details\") s_det USING (subscription_id)\n),\n     oms_indicated_with_rows AS (\n         SELECT smc.*\n              , ois.oms_indicated\n              , ROW_NUMBER() OVER (PARTITION BY smc.subscription_id ORDER BY occurred_at DESC) AS row_num\n         FROM subscription_metrics_current_without_oms smc\n                  LEFT JOIN data_intelligence.oms_indicated_subscription_events ois\n                            ON ois.subscription_id = smc.subscription_id AND ois.occurred_at <= smc.trial_end_at\n     )\nSELECT subscription_id,\n       oms_indicated_backfilled IS NOT NULL AND oms_indicated_backfilled != 'None' AND\n       oms_indicated_backfilled != 'Unknown' AS indicated_an_oms\nFROM (SELECT subscription_id,\n             ISNULL(\n                     ISNULL(\n                             NULLIF(oms_indicated, 'Unknown'),\n                             oms_detected,\n                             'Unknown'\n                         )\n                 ) AS oms_indicated_backfilled\n      FROM (\n            (SELECT subscription_id, oms_indicated FROM oms_indicated_with_rows WHERE row_num = 1) AS oms_indicated\n               LEFT JOIN (\n          SELECT subscription_id,\n                 INITCAP(NULLIF(ecomm_platform, 'None')) AS oms_detected\n          FROM (\n                   SELECT subscription_id,\n                          ecomm_platform,\n                          updated_at,\n                          ROW_NUMBER() OVER (\n                              PARTITION BY subscription_id\n                              ORDER BY\n                                  updated_at ASC\n                              )\n                   FROM (\n                         (\n                             SELECT account_public_id AS public_id,\n                                    ecomm_platform,\n                                    updated_at\n                             FROM current.account_technology_usages\n                         ) AS tech_usage\n                            JOIN (\n                       SELECT subscription_id,\n                              public_id\n                       FROM \"dumps\".\"dev\".\"accounts\"\n                   ) AS accounts USING (public_id)\n                       )\n               ) backfilled_oms_platform\n          WHERE ROW_NUMBER = 1\n      ) AS earliest_oms_detected USING (subscription_id)))", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_indicated_an_oms\""}, "model.drip_data_intelligence.subscription_trial_start": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_trial_start"], "unique_id": "model.drip_data_intelligence.subscription_trial_start", "raw_code": "SELECT id                                                  AS subscription_id,\n       created_at                                          AS trial_lead_acquired_at,\n       DATE_ADD('day', -1, DATE_TRUNC('week', created_at)) AS trial_lead_week_cohort,\n       started_at                                          AS corrected_trial_start_at,\n       DATE_ADD('day', -1, DATE_TRUNC('week', started_at)) AS corrected_trial_week_cohort\nFROM {{ ref(\"subscriptions\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_trial_start.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_trial_start.sql", "name": "subscription_trial_start", "alias": "subscription_trial_start", "checksum": {"name": "sha256", "checksum": "10d2f38e4449e44b39e502870b21b016fb2e52a7b0743e146c615e4616eead70"}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_trial_start.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.0644789, "compiled_code": "SELECT id                                                  AS subscription_id,\n       created_at                                          AS trial_lead_acquired_at,\n       DATE_ADD('day', -1, DATE_TRUNC('week', created_at)) AS trial_lead_week_cohort,\n       started_at                                          AS corrected_trial_start_at,\n       DATE_ADD('day', -1, DATE_TRUNC('week', started_at)) AS corrected_trial_week_cohort\nFROM \"dumps\".\"dev\".\"subscriptions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_trial_start\""}, "model.drip_data_intelligence.subscription_has_marketing_attribution": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_has_marketing_attribution"], "unique_id": "model.drip_data_intelligence.subscription_has_marketing_attribution", "raw_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       TRUE AS has_marketing_attribution\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c IS NOT NULL\nGROUP BY drip_subscription_id__c", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_has_marketing_attribution.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_has_marketing_attribution.sql", "name": "subscription_has_marketing_attribution", "alias": "subscription_has_marketing_attribution", "checksum": {"name": "sha256", "checksum": "1ed0ecc03a0df207517a8108ec93e94d081ffc4170cc81141b02dbf51b3e81fe"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_has_marketing_attribution.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.0670662, "compiled_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       TRUE AS has_marketing_attribution\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c IS NOT NULL\nGROUP BY drip_subscription_id__c", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_has_marketing_attribution\""}, "model.drip_data_intelligence.subscription_created_by_drip_employee": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.users"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_created_by_drip_employee"], "unique_id": "model.drip_data_intelligence.subscription_created_by_drip_employee", "raw_code": "SELECT id                                              AS subscription_id,\n       primary_email LIKE '%@drip.com' OR comped = 't' AS created_by_drip_employee\nFROM {{ ref(\"subscriptions\") }}\n         INNER JOIN (SELECT id AS user_id, email AS primary_email FROM {{ ref(\"users\") }}) USING (user_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_created_by_drip_employee.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_created_by_drip_employee.sql", "name": "subscription_created_by_drip_employee", "alias": "subscription_created_by_drip_employee", "checksum": {"name": "sha256", "checksum": "f1270cc8e6eac1ef92c6ef7f7f1a06bd10f1e0b328f09b768657f68fa8d037ff"}, "tags": [], "refs": [["subscriptions"], ["users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_created_by_drip_employee.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.069629, "compiled_code": "SELECT id                                              AS subscription_id,\n       primary_email LIKE '%@drip.com' OR comped = 't' AS created_by_drip_employee\nFROM \"dumps\".\"dev\".\"subscriptions\"\n         INNER JOIN (SELECT id AS user_id, email AS primary_email FROM \"dumps\".\"dev\".\"users\") USING (user_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_created_by_drip_employee\""}, "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_organic_marketing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_pct_trial_lead_attributed_to_organic_marketing"], "unique_id": "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_organic_marketing", "raw_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_organic_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c = 'Organic'\nGROUP BY drip_subscription_id__c", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_organic_marketing.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_organic_marketing.sql", "name": "subscription_pct_trial_lead_attributed_to_organic_marketing", "alias": "subscription_pct_trial_lead_attributed_to_organic_marketing", "checksum": {"name": "sha256", "checksum": "3833af66582b30bd20a613218b3b014045b20f857ac802b2550117d4dcc860b2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_organic_marketing.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.072394, "compiled_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_organic_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c = 'Organic'\nGROUP BY drip_subscription_id__c", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_pct_trial_lead_attributed_to_organic_marketing\""}, "model.drip_data_intelligence.subscription_details": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.current.subscription_details"]}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_details"], "unique_id": "model.drip_data_intelligence.subscription_details", "raw_code": "SELECT subscription_id,\n       activated_at,\n       is_active,\n       activated_month_cohort,\n       activated_week_cohort,\n       initial_mrr,\n       current_mrr,\n       trial_intent,\n       activated\nFROM {{ source('current', 'subscription_details') }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_details.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_details.sql", "name": "subscription_details", "alias": "subscription_details", "checksum": {"name": "sha256", "checksum": "ebe634b4ead56d3b578fb09566df6ab695ee7adbb3f6551fa174721cf11f8feb"}, "tags": [], "refs": [], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_details.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.0751412, "compiled_code": "SELECT subscription_id,\n       activated_at,\n       is_active,\n       activated_month_cohort,\n       activated_week_cohort,\n       initial_mrr,\n       current_mrr,\n       trial_intent,\n       activated\nFROM \"dumps\".\"current\".\"subscription_details\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_details\""}, "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_other_marketing": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_pct_trial_lead_attributed_to_other_marketing"], "unique_id": "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_other_marketing", "raw_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_other_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c NOT IN ('Direct', 'Nurture', 'Email', 'Sales Outbound', 'Organic', 'Paid Search', 'Paid Social', 'Display')\nGROUP BY drip_subscription_id__c", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_other_marketing.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_other_marketing.sql", "name": "subscription_pct_trial_lead_attributed_to_other_marketing", "alias": "subscription_pct_trial_lead_attributed_to_other_marketing", "checksum": {"name": "sha256", "checksum": "d8b3a0c8c33dc403e91d231d6f72f7d072bbda135d1ec00ecb38c82871616246"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_pct_trial_lead_attributed_to_other_marketing.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.077847, "compiled_code": "SELECT CAST(drip_subscription_id__c AS INT)                     AS subscription_id,\n       SUM(subscription_tactic_u_shape_attribution) AS pct_trial_lead_attributed_to_other_marketing\nFROM sales_operations.subscription_attribution\nWHERE campaign_category__c = 'TACTIC' AND subscription_tactic_u_shape_attribution IS NOT NULL\nAND tactic__c NOT IN ('Direct', 'Nurture', 'Email', 'Sales Outbound', 'Organic', 'Paid Search', 'Paid Social', 'Display')\nGROUP BY drip_subscription_id__c", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_pct_trial_lead_attributed_to_other_marketing\""}, "model.drip_data_intelligence.subscription_trial_ended_at": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_trial_ended_at"], "unique_id": "model.drip_data_intelligence.subscription_trial_ended_at", "raw_code": "SELECT subject_id AS subscription_id, MIN(created_at) AS trial_expired_at\nFROM data_intelligence.subscription_state_transitions\nWHERE \"to\" = 'trial_expired'\nGROUP BY subject_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_trial_ended_at.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_trial_ended_at.sql", "name": "subscription_trial_ended_at", "alias": "subscription_trial_ended_at", "checksum": {"name": "sha256", "checksum": "44ac8e997dcec45677a6a0d63d2eb4965cba58c2d219d667f0344f091f7d1b86"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_trial_ended_at.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.0809531, "compiled_code": "SELECT subject_id AS subscription_id, MIN(created_at) AS trial_expired_at\nFROM data_intelligence.subscription_state_transitions\nWHERE \"to\" = 'trial_expired'\nGROUP BY subject_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_trial_ended_at\""}, "model.drip_data_intelligence.subscription_churned_before_n_days_active": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "alpha_build", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current", "components", "subscription_churned_before_n_days_active"], "unique_id": "model.drip_data_intelligence.subscription_churned_before_n_days_active", "raw_code": "{% set n_days = [32, 63, 93] %}\n\nWITH churn_events AS (SELECT id AS subscription_id, MIN(occurred_at) first_churned_at\n                      FROM finance.lifecycle\n                      WHERE type = 'churned'\n                      GROUP BY id),\n     activated_events AS (SELECT id AS subscription_id, MIN(occurred_at) activated_at\n                          FROM finance.lifecycle\n                          WHERE type = 'activated'\n                          GROUP BY id)\nSELECT {% for n in n_days %}\n         DATE_DIFF('days', activated_at, first_churned_at) < {{n}} AS churned_before_{{n}}_days_active,\n       {% endfor %}\n       subscription_id\nFROM activated_events\n         JOIN churn_events USING (subscription_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current/components/subscription_churned_before_n_days_active.sql", "original_file_path": "models/alpha/subscription_metrics_current/components/subscription_churned_before_n_days_active.sql", "name": "subscription_churned_before_n_days_active", "alias": "subscription_churned_before_n_days_active", "checksum": {"name": "sha256", "checksum": "8c3c783dc875942ceef753d179e5512cd44a854ea4a8969ece24423d741565db"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/subscription_metrics_current/components/subscription_churned_before_n_days_active.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha_build"}, "created_at": 1674498298.083803, "compiled_code": "\n\nWITH churn_events AS (SELECT id AS subscription_id, MIN(occurred_at) first_churned_at\n                      FROM finance.lifecycle\n                      WHERE type = 'churned'\n                      GROUP BY id),\n     activated_events AS (SELECT id AS subscription_id, MIN(occurred_at) activated_at\n                          FROM finance.lifecycle\n                          WHERE type = 'activated'\n                          GROUP BY id)\nSELECT \n         DATE_DIFF('days', activated_at, first_churned_at) < 32 AS churned_before_32_days_active,\n       \n         DATE_DIFF('days', activated_at, first_churned_at) < 63 AS churned_before_63_days_active,\n       \n         DATE_DIFF('days', activated_at, first_churned_at) < 93 AS churned_before_93_days_active,\n       \n       subscription_id\nFROM activated_events\n         JOIN churn_events USING (subscription_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"subscription_churned_before_n_days_active\""}, "model.drip_data_intelligence.account_metrics_current": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.300th_sms_person", "model.drip_data_intelligence.added_sms_credits", "model.drip_data_intelligence.first_attributed_revenue", "model.drip_data_intelligence.first_sent_sms", "model.drip_data_intelligence.first_sms_people", "model.drip_data_intelligence.has_purchases", "model.drip_data_intelligence.has_reserved_long_code", "model.drip_data_intelligence.mrr", "model.drip_data_intelligence.oms_indicated", "model.drip_data_intelligence.sms_forms_fields", "model.drip_data_intelligence.sms_people", "model.drip_data_intelligence.total_billable_subscribers"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "account_metrics_current"], "unique_id": "model.drip_data_intelligence.account_metrics_current", "raw_code": "WITH\n    base AS (\n        SELECT\n            id        account_id\n          , public_id account_public_id\n          , subscription_id\n          , name\n          , url\n          , created_at\n        FROM {{ ref('accounts') }}\n    )\nSELECT account_id\n     , account_public_id\n     , created_at\n     , created_sms_option_form_at\n     , estimated_mrr\n     , first_added_sms_credits_at\n     , first_attributed_purchase_at\n     , first_sent_sms_at\n     , first_sms_person_at\n     , has_added_sms_credits\n     , has_at_least_300_sms_people\n     , has_purchases\n     , has_reserved_long_code\n     , has_sent_sms\n     , has_sms_optin_form\n     , has_sms_people\n     , n_sms_people\n     , name\n     , oms_indicated\n     , recieved_300_sms_people_at\n     , reserved_long_code_at\n     , subscription_id\n     , total_billable_subscribers\n     , url\nFROM base\n     LEFT JOIN {{ ref(\"300th_sms_person\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"added_sms_credits\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"first_attributed_revenue\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"first_sent_sms\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"first_sms_people\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"has_purchases\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"has_reserved_long_code\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"mrr\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"oms_indicated\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"sms_forms_fields\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"sms_people\") }} USING (account_id)\n     LEFT JOIN {{ ref(\"total_billable_subscribers\") }} USING (account_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/account_metrics_current.sql", "original_file_path": "models/alpha/account_metrics_current/account_metrics_current.sql", "name": "account_metrics_current", "alias": "account_metrics_current", "checksum": {"name": "sha256", "checksum": "476f03c5e136274f6b9b90d21b13d6cf75c6703d7d36e995093fb857d27c20fd"}, "tags": [], "refs": [["accounts"], ["300th_sms_person"], ["added_sms_credits"], ["first_attributed_revenue"], ["first_sent_sms"], ["first_sms_people"], ["has_purchases"], ["has_reserved_long_code"], ["mrr"], ["oms_indicated"], ["sms_forms_fields"], ["sms_people"], ["total_billable_subscribers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/account_metrics_current.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.089854, "compiled_code": "WITH\n     __dbt__cte__300th_sms_person as (\nSELECT account_id,\n       TRUE AS has_at_least_300_sms_people,\n       sms_person_added_at AS recieved_300_sms_people_at\n       FROM\n(SELECT account_id,\n       ROW_NUMBER() OVER (PARTITION BY account_id ORDER BY created_at) AS row_num,\n       created_at AS sms_person_added_at\nFROM \"dumps\".\"current\".\"sms_people\")\nWHERE row_num = 300\n),  __dbt__cte__added_sms_credits as (\nSELECT\n  account_id,\n  MIN(created_at) AS first_added_sms_credits_at,\n  TRUE AS has_added_sms_credits\nFROM\n  \"dumps\".\"current\".\"sms_credit_rollups\"\nWHERE\n  1 = 1\n  AND credits_purchased > 0\nGROUP BY\n  account_id\n),  __dbt__cte__first_attributed_revenue as (\nSELECT account_id, MIN(occurred_at) AS first_attributed_purchase_at\nFROM \"dumps\".\"dev\".\"purchases\"\nWHERE attributed_sms_delivery_id IS NOT NULL\n   OR attributed_delivery_id IS NOT NULL\nGROUP BY account_id\n),  __dbt__cte__first_sent_sms as (\nSELECT\n  account_id,\n  MIN(usage_date) AS first_sent_sms_at,\n  TRUE AS has_sent_sms\nFROM\n  \"dumps\".\"current\".\"sms_credit_rollups\"\nWHERE\n  1 = 1\n  AND sms_messages > 0\nGROUP BY\n  account_id\n),  __dbt__cte__first_sms_people as (\nSELECT account_id,\n       MIN(created_at) AS first_sms_person_at\nFROM \"dumps\".\"current\".\"sms_people\"\nGROUP BY account_id\n),  __dbt__cte__has_purchases as (\nSELECT\n  a.account_id,\n  p.account_id IS NOT NULL as has_purchases\nFROM\n  (\n    SELECT\n      id AS account_id\n    FROM\n      \"dumps\".\"dev\".\"accounts\"\n  ) a\n  LEFT JOIN (\n    SELECT\n      DISTINCT account_id\n    FROM\n      \"dumps\".\"dev\".\"purchases\"\n  ) p USING (account_id)\n),  __dbt__cte__has_reserved_long_code as (\nSELECT\n\tts.account_id AS account_id,\n\tMIN(tfc.created_at) AS reserved_long_code_at,\n\t(reserved_long_code_at IS NOT NULL) AS has_reserved_long_code\nFROM\n\t\"dumps\".\"current\".\"twilio_subaccounts\" ts\n\tLEFT JOIN \"dumps\".\"current\".\"twilio_from_codes\" tfc ON twilio_subaccount_id = ts.id\nGROUP BY\n\tts.account_id\n),  __dbt__cte__mrr as (\nWITH metric_rows AS (\n  SELECT\n    account_id,\n    billable_subscribers_v2,\n    ROW_NUMBER() OVER (\n      PARTITION BY account_id\n      ORDER BY\n        occurred_on DESC\n    ) AS row_number\n  FROM\n    \"dumps\".\"current\".\"account_daily_usage_stats\"\n),\nmost_recent_metrics AS (\n  SELECT\n    account_id,\n    billable_subscribers_v2\n  FROM\n    metric_rows\n  WHERE\n    row_number = 1\n),\nmost_recent_metrics_with_subscription AS (\n  SELECT\n    *,\n    SUM(billable_subscribers_v2) OVER (PARTITION BY subscription_id) AS total_subscribers_in_subscription,\n    billable_subscribers_v2 :: FLOAT / NULLIF(total_subscribers_in_subscription, 0) :: FLOAT AS weight_by_pct_subscribers\n  FROM\n    most_recent_metrics\n    JOIN (\n      SELECT\n        id AS account_id,\n        subscription_id\n      FROM\n        \"dumps\".\"dev\".\"accounts\"\n    ) USING (account_id)\n),\naccount_count_subquery AS (\n  SELECT\n    subscription_id,\n    COUNT(*) AS n_accounts\n  FROM\n    \"dumps\".\"dev\".\"accounts\"\n  GROUP BY\n    subscription_id\n)\nSELECT\n  account_id,\n  pct_account_subscribers * current_mrr AS estimated_mrr\nFROM\n  (\n    SELECT\n      account_id,\n      subscription_id,\n      CASE\n        WHEN total_subscribers_in_subscription > 0 THEN weight_by_pct_subscribers\n        ELSE 1 / CAST(n_accounts AS FLOAT)\n      END AS pct_account_subscribers\n    FROM\n      most_recent_metrics_with_subscription\n      JOIN (\n        SELECT\n          *\n        FROM\n          account_count_subquery\n      ) USING (subscription_id)\n  )\n  JOIN (\n    SELECT\n      subscription_id,\n      CASE\n        WHEN current_mrr IS NULL THEN 0\n        ELSE current_mrr\n      END AS current_mrr\n    FROM\n      \"dumps\".\"dev\".\"subscription_metrics_current\"\n  ) USING (subscription_id)\n),  __dbt__cte__oms_indicated as (\nWITH most_recent_oms_indicated AS (\n      SELECT account_id\n           , oms_indicated\n           , row_number() OVER (PARTITION BY account_id ORDER BY occurred_at DESC) n\n        FROM \"dumps\".\"data_intelligence\".\"oms_indicated_account_events\"\n  )\nSELECT account_id\n     , oms_indicated\n  FROM most_recent_oms_indicated\n WHERE n = 1\n),  __dbt__cte__sms_forms_fields as (\nSELECT\nf.account_id AS account_id\n, TRUE AS has_sms_optin_form\n, MIN(cf.created_at) AS created_sms_option_form_at\nFROM \"dumps\".\"dev\".\"forms\" AS f\n\tJOIN \"dumps\".\"current\".\"custom_fields\" cf\n\tON f.id = cf.form_id\nWHERE 1 = 1\nAND cf.data_type = 'phone'\nAND cf.is_consent_asked = TRUE\nGROUP BY 1, 2\n),  __dbt__cte__sms_people as (\nSELECT account_id,\n       TRUE as has_sms_people,\n       COUNT(*) AS n_sms_people\nFROM \"dumps\".\"current\".\"sms_people\"\nWHERE status = 'opted_in'\nGROUP BY account_id\n),  __dbt__cte__total_billable_subscribers as (\nSELECT\n  account_id,\n  billable_subscribers_v2 AS total_billable_subscribers\nFROM\n  (\n    SELECT\n      account_id,\n      billable_subscribers_v2,\n      ROW_NUMBER() OVER (\n        PARTITION BY account_id\n        ORDER BY\n          occurred_on DESC\n      ) AS row_num\n    FROM\n      \"dumps\".\"current\".\"account_daily_usage_stats\"\n  )\nWHERE\n  row_num = 1\n),base AS (\n        SELECT\n            id        account_id\n          , public_id account_public_id\n          , subscription_id\n          , name\n          , url\n          , created_at\n        FROM \"dumps\".\"dev\".\"accounts\"\n    )\nSELECT account_id\n     , account_public_id\n     , created_at\n     , created_sms_option_form_at\n     , estimated_mrr\n     , first_added_sms_credits_at\n     , first_attributed_purchase_at\n     , first_sent_sms_at\n     , first_sms_person_at\n     , has_added_sms_credits\n     , has_at_least_300_sms_people\n     , has_purchases\n     , has_reserved_long_code\n     , has_sent_sms\n     , has_sms_optin_form\n     , has_sms_people\n     , n_sms_people\n     , name\n     , oms_indicated\n     , recieved_300_sms_people_at\n     , reserved_long_code_at\n     , subscription_id\n     , total_billable_subscribers\n     , url\nFROM base\n     LEFT JOIN __dbt__cte__300th_sms_person USING (account_id)\n     LEFT JOIN __dbt__cte__added_sms_credits USING (account_id)\n     LEFT JOIN __dbt__cte__first_attributed_revenue USING (account_id)\n     LEFT JOIN __dbt__cte__first_sent_sms USING (account_id)\n     LEFT JOIN __dbt__cte__first_sms_people USING (account_id)\n     LEFT JOIN __dbt__cte__has_purchases USING (account_id)\n     LEFT JOIN __dbt__cte__has_reserved_long_code USING (account_id)\n     LEFT JOIN __dbt__cte__mrr USING (account_id)\n     LEFT JOIN __dbt__cte__oms_indicated USING (account_id)\n     LEFT JOIN __dbt__cte__sms_forms_fields USING (account_id)\n     LEFT JOIN __dbt__cte__sms_people USING (account_id)\n     LEFT JOIN __dbt__cte__total_billable_subscribers USING (account_id)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.drip_data_intelligence.300th_sms_person", "sql": " __dbt__cte__300th_sms_person as (\nSELECT account_id,\n       TRUE AS has_at_least_300_sms_people,\n       sms_person_added_at AS recieved_300_sms_people_at\n       FROM\n(SELECT account_id,\n       ROW_NUMBER() OVER (PARTITION BY account_id ORDER BY created_at) AS row_num,\n       created_at AS sms_person_added_at\nFROM \"dumps\".\"current\".\"sms_people\")\nWHERE row_num = 300\n)"}, {"id": "model.drip_data_intelligence.added_sms_credits", "sql": " __dbt__cte__added_sms_credits as (\nSELECT\n  account_id,\n  MIN(created_at) AS first_added_sms_credits_at,\n  TRUE AS has_added_sms_credits\nFROM\n  \"dumps\".\"current\".\"sms_credit_rollups\"\nWHERE\n  1 = 1\n  AND credits_purchased > 0\nGROUP BY\n  account_id\n)"}, {"id": "model.drip_data_intelligence.first_attributed_revenue", "sql": " __dbt__cte__first_attributed_revenue as (\nSELECT account_id, MIN(occurred_at) AS first_attributed_purchase_at\nFROM \"dumps\".\"dev\".\"purchases\"\nWHERE attributed_sms_delivery_id IS NOT NULL\n   OR attributed_delivery_id IS NOT NULL\nGROUP BY account_id\n)"}, {"id": "model.drip_data_intelligence.first_sent_sms", "sql": " __dbt__cte__first_sent_sms as (\nSELECT\n  account_id,\n  MIN(usage_date) AS first_sent_sms_at,\n  TRUE AS has_sent_sms\nFROM\n  \"dumps\".\"current\".\"sms_credit_rollups\"\nWHERE\n  1 = 1\n  AND sms_messages > 0\nGROUP BY\n  account_id\n)"}, {"id": "model.drip_data_intelligence.first_sms_people", "sql": " __dbt__cte__first_sms_people as (\nSELECT account_id,\n       MIN(created_at) AS first_sms_person_at\nFROM \"dumps\".\"current\".\"sms_people\"\nGROUP BY account_id\n)"}, {"id": "model.drip_data_intelligence.has_purchases", "sql": " __dbt__cte__has_purchases as (\nSELECT\n  a.account_id,\n  p.account_id IS NOT NULL as has_purchases\nFROM\n  (\n    SELECT\n      id AS account_id\n    FROM\n      \"dumps\".\"dev\".\"accounts\"\n  ) a\n  LEFT JOIN (\n    SELECT\n      DISTINCT account_id\n    FROM\n      \"dumps\".\"dev\".\"purchases\"\n  ) p USING (account_id)\n)"}, {"id": "model.drip_data_intelligence.has_reserved_long_code", "sql": " __dbt__cte__has_reserved_long_code as (\nSELECT\n\tts.account_id AS account_id,\n\tMIN(tfc.created_at) AS reserved_long_code_at,\n\t(reserved_long_code_at IS NOT NULL) AS has_reserved_long_code\nFROM\n\t\"dumps\".\"current\".\"twilio_subaccounts\" ts\n\tLEFT JOIN \"dumps\".\"current\".\"twilio_from_codes\" tfc ON twilio_subaccount_id = ts.id\nGROUP BY\n\tts.account_id\n)"}, {"id": "model.drip_data_intelligence.mrr", "sql": " __dbt__cte__mrr as (\nWITH metric_rows AS (\n  SELECT\n    account_id,\n    billable_subscribers_v2,\n    ROW_NUMBER() OVER (\n      PARTITION BY account_id\n      ORDER BY\n        occurred_on DESC\n    ) AS row_number\n  FROM\n    \"dumps\".\"current\".\"account_daily_usage_stats\"\n),\nmost_recent_metrics AS (\n  SELECT\n    account_id,\n    billable_subscribers_v2\n  FROM\n    metric_rows\n  WHERE\n    row_number = 1\n),\nmost_recent_metrics_with_subscription AS (\n  SELECT\n    *,\n    SUM(billable_subscribers_v2) OVER (PARTITION BY subscription_id) AS total_subscribers_in_subscription,\n    billable_subscribers_v2 :: FLOAT / NULLIF(total_subscribers_in_subscription, 0) :: FLOAT AS weight_by_pct_subscribers\n  FROM\n    most_recent_metrics\n    JOIN (\n      SELECT\n        id AS account_id,\n        subscription_id\n      FROM\n        \"dumps\".\"dev\".\"accounts\"\n    ) USING (account_id)\n),\naccount_count_subquery AS (\n  SELECT\n    subscription_id,\n    COUNT(*) AS n_accounts\n  FROM\n    \"dumps\".\"dev\".\"accounts\"\n  GROUP BY\n    subscription_id\n)\nSELECT\n  account_id,\n  pct_account_subscribers * current_mrr AS estimated_mrr\nFROM\n  (\n    SELECT\n      account_id,\n      subscription_id,\n      CASE\n        WHEN total_subscribers_in_subscription > 0 THEN weight_by_pct_subscribers\n        ELSE 1 / CAST(n_accounts AS FLOAT)\n      END AS pct_account_subscribers\n    FROM\n      most_recent_metrics_with_subscription\n      JOIN (\n        SELECT\n          *\n        FROM\n          account_count_subquery\n      ) USING (subscription_id)\n  )\n  JOIN (\n    SELECT\n      subscription_id,\n      CASE\n        WHEN current_mrr IS NULL THEN 0\n        ELSE current_mrr\n      END AS current_mrr\n    FROM\n      \"dumps\".\"dev\".\"subscription_metrics_current\"\n  ) USING (subscription_id)\n)"}, {"id": "model.drip_data_intelligence.oms_indicated", "sql": " __dbt__cte__oms_indicated as (\nWITH most_recent_oms_indicated AS (\n      SELECT account_id\n           , oms_indicated\n           , row_number() OVER (PARTITION BY account_id ORDER BY occurred_at DESC) n\n        FROM \"dumps\".\"data_intelligence\".\"oms_indicated_account_events\"\n  )\nSELECT account_id\n     , oms_indicated\n  FROM most_recent_oms_indicated\n WHERE n = 1\n)"}, {"id": "model.drip_data_intelligence.sms_forms_fields", "sql": " __dbt__cte__sms_forms_fields as (\nSELECT\nf.account_id AS account_id\n, TRUE AS has_sms_optin_form\n, MIN(cf.created_at) AS created_sms_option_form_at\nFROM \"dumps\".\"dev\".\"forms\" AS f\n\tJOIN \"dumps\".\"current\".\"custom_fields\" cf\n\tON f.id = cf.form_id\nWHERE 1 = 1\nAND cf.data_type = 'phone'\nAND cf.is_consent_asked = TRUE\nGROUP BY 1, 2\n)"}, {"id": "model.drip_data_intelligence.sms_people", "sql": " __dbt__cte__sms_people as (\nSELECT account_id,\n       TRUE as has_sms_people,\n       COUNT(*) AS n_sms_people\nFROM \"dumps\".\"current\".\"sms_people\"\nWHERE status = 'opted_in'\nGROUP BY account_id\n)"}, {"id": "model.drip_data_intelligence.total_billable_subscribers", "sql": " __dbt__cte__total_billable_subscribers as (\nSELECT\n  account_id,\n  billable_subscribers_v2 AS total_billable_subscribers\nFROM\n  (\n    SELECT\n      account_id,\n      billable_subscribers_v2,\n      ROW_NUMBER() OVER (\n        PARTITION BY account_id\n        ORDER BY\n          occurred_on DESC\n      ) AS row_num\n    FROM\n      \"dumps\".\"current\".\"account_daily_usage_stats\"\n  )\nWHERE\n  row_num = 1\n)"}], "relation_name": "\"dumps\".\"dev\".\"account_metrics_current\""}, "model.drip_data_intelligence.first_sent_sms": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.sms_credit_rollups"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "first_sent_sms"], "unique_id": "model.drip_data_intelligence.first_sent_sms", "raw_code": "SELECT\n  account_id,\n  MIN(usage_date) AS first_sent_sms_at,\n  TRUE AS has_sent_sms\nFROM\n  {{ source('full_table_etl', 'sms_credit_rollups') }}\nWHERE\n  1 = 1\n  AND sms_messages > 0\nGROUP BY\n  account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/first_sent_sms.sql", "original_file_path": "models/alpha/account_metrics_current/components/first_sent_sms.sql", "name": "first_sent_sms", "alias": "first_sent_sms", "checksum": {"name": "sha256", "checksum": "9e093d75948232cf335128e2e0f4c86a20a7e042ed08a4556458406fe7bc17f4"}, "tags": [], "refs": [], "sources": [["full_table_etl", "sms_credit_rollups"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/first_sent_sms.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.092844, "compiled_code": "SELECT\n  account_id,\n  MIN(usage_date) AS first_sent_sms_at,\n  TRUE AS has_sent_sms\nFROM\n  \"dumps\".\"current\".\"sms_credit_rollups\"\nWHERE\n  1 = 1\n  AND sms_messages > 0\nGROUP BY\n  account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.sms_forms_fields": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.custom_fields", "model.drip_data_intelligence.forms"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "sms_forms_fields"], "unique_id": "model.drip_data_intelligence.sms_forms_fields", "raw_code": "SELECT\nf.account_id AS account_id\n, TRUE AS has_sms_optin_form\n, MIN(cf.created_at) AS created_sms_option_form_at\nFROM {{ ref(\"forms\") }} AS f\n\tJOIN {{ source(\"full_table_etl\", \"custom_fields\") }} cf\n\tON f.id = cf.form_id\nWHERE 1 = 1\nAND cf.data_type = 'phone'\nAND cf.is_consent_asked = TRUE\nGROUP BY 1, 2", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/sms_forms_fields.sql", "original_file_path": "models/alpha/account_metrics_current/components/sms_forms_fields.sql", "name": "sms_forms_fields", "alias": "sms_forms_fields", "checksum": {"name": "sha256", "checksum": "f8407c2724d2892b00c53395e3f7978821303cdb34cb13d88aa611781f998a60"}, "tags": [], "refs": [["forms"]], "sources": [["full_table_etl", "custom_fields"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/sms_forms_fields.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.095573, "compiled_code": "SELECT\nf.account_id AS account_id\n, TRUE AS has_sms_optin_form\n, MIN(cf.created_at) AS created_sms_option_form_at\nFROM \"dumps\".\"dev\".\"forms\" AS f\n\tJOIN \"dumps\".\"current\".\"custom_fields\" cf\n\tON f.id = cf.form_id\nWHERE 1 = 1\nAND cf.data_type = 'phone'\nAND cf.is_consent_asked = TRUE\nGROUP BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.has_reserved_long_code": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.twilio_from_codes", "source.drip_data_intelligence.full_table_etl.twilio_subaccounts"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "has_reserved_long_code"], "unique_id": "model.drip_data_intelligence.has_reserved_long_code", "raw_code": "SELECT\n\tts.account_id AS account_id,\n\tMIN(tfc.created_at) AS reserved_long_code_at,\n\t(reserved_long_code_at IS NOT NULL) AS has_reserved_long_code\nFROM\n\t{{ source(\"full_table_etl\", \"twilio_subaccounts\") }} ts\n\tLEFT JOIN {{ source(\"full_table_etl\", \"twilio_from_codes\") }} tfc ON twilio_subaccount_id = ts.id\nGROUP BY\n\tts.account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/has_reserved_long_code.sql", "original_file_path": "models/alpha/account_metrics_current/components/has_reserved_long_code.sql", "name": "has_reserved_long_code", "alias": "has_reserved_long_code", "checksum": {"name": "sha256", "checksum": "0ded616ba30b28d8912cd7f6068433215a9e4991090eb612ce9cc95dadb50b0a"}, "tags": [], "refs": [], "sources": [["full_table_etl", "twilio_from_codes"], ["full_table_etl", "twilio_subaccounts"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/has_reserved_long_code.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.098804, "compiled_code": "SELECT\n\tts.account_id AS account_id,\n\tMIN(tfc.created_at) AS reserved_long_code_at,\n\t(reserved_long_code_at IS NOT NULL) AS has_reserved_long_code\nFROM\n\t\"dumps\".\"current\".\"twilio_subaccounts\" ts\n\tLEFT JOIN \"dumps\".\"current\".\"twilio_from_codes\" tfc ON twilio_subaccount_id = ts.id\nGROUP BY\n\tts.account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.first_sms_people": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.sms_people"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "first_sms_people"], "unique_id": "model.drip_data_intelligence.first_sms_people", "raw_code": "SELECT account_id,\n       MIN(created_at) AS first_sms_person_at\nFROM {{ source('full_table_etl', 'sms_people') }}\nGROUP BY account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/first_sms_people.sql", "original_file_path": "models/alpha/account_metrics_current/components/first_sms_people.sql", "name": "first_sms_people", "alias": "first_sms_people", "checksum": {"name": "sha256", "checksum": "7d345836607f14ca5b00dce3ad2645d2dec0dfc1a9e12d9d6a4926606e87fd1e"}, "tags": [], "refs": [], "sources": [["full_table_etl", "sms_people"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/first_sms_people.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.10163, "compiled_code": "SELECT account_id,\n       MIN(created_at) AS first_sms_person_at\nFROM \"dumps\".\"current\".\"sms_people\"\nGROUP BY account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.sms_people": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.sms_people"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "sms_people"], "unique_id": "model.drip_data_intelligence.sms_people", "raw_code": "SELECT account_id,\n       TRUE as has_sms_people,\n       COUNT(*) AS n_sms_people\nFROM {{ source('full_table_etl', 'sms_people') }}\nWHERE status = 'opted_in'\nGROUP BY account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/sms_people.sql", "original_file_path": "models/alpha/account_metrics_current/components/sms_people.sql", "name": "sms_people", "alias": "sms_people", "checksum": {"name": "sha256", "checksum": "07241d77d15226c74c9181db3fa4dc34125988aa2dffd97c4bac8306941e340a"}, "tags": [], "refs": [], "sources": [["full_table_etl", "sms_people"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/sms_people.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.104345, "compiled_code": "SELECT account_id,\n       TRUE as has_sms_people,\n       COUNT(*) AS n_sms_people\nFROM \"dumps\".\"current\".\"sms_people\"\nWHERE status = 'opted_in'\nGROUP BY account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.has_purchases": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "has_purchases"], "unique_id": "model.drip_data_intelligence.has_purchases", "raw_code": "SELECT\n  a.account_id,\n  p.account_id IS NOT NULL as has_purchases\nFROM\n  (\n    SELECT\n      id AS account_id\n    FROM\n      {{ ref(\"accounts\")}}\n  ) a\n  LEFT JOIN (\n    SELECT\n      DISTINCT account_id\n    FROM\n      {{ ref(\"purchases\") }}\n  ) p USING (account_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/has_purchases.sql", "original_file_path": "models/alpha/account_metrics_current/components/has_purchases.sql", "name": "has_purchases", "alias": "has_purchases", "checksum": {"name": "sha256", "checksum": "073850eb763a47ccdae2d9cbc2a19107ee7154fe70eab175e65bd461dab0ef90"}, "tags": [], "refs": [["accounts"], ["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/has_purchases.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.107171, "compiled_code": "SELECT\n  a.account_id,\n  p.account_id IS NOT NULL as has_purchases\nFROM\n  (\n    SELECT\n      id AS account_id\n    FROM\n      \"dumps\".\"dev\".\"accounts\"\n  ) a\n  LEFT JOIN (\n    SELECT\n      DISTINCT account_id\n    FROM\n      \"dumps\".\"dev\".\"purchases\"\n  ) p USING (account_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.mrr": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.account_daily_usage_stats", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.subscription_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "mrr"], "unique_id": "model.drip_data_intelligence.mrr", "raw_code": "WITH metric_rows AS (\n  SELECT\n    account_id,\n    billable_subscribers_v2,\n    ROW_NUMBER() OVER (\n      PARTITION BY account_id\n      ORDER BY\n        occurred_on DESC\n    ) AS row_number\n  FROM\n    {{ source(\"full_table_etl\", \"account_daily_usage_stats\") }}\n),\nmost_recent_metrics AS (\n  SELECT\n    account_id,\n    billable_subscribers_v2\n  FROM\n    metric_rows\n  WHERE\n    row_number = 1\n),\nmost_recent_metrics_with_subscription AS (\n  SELECT\n    *,\n    SUM(billable_subscribers_v2) OVER (PARTITION BY subscription_id) AS total_subscribers_in_subscription,\n    billable_subscribers_v2 :: FLOAT / NULLIF(total_subscribers_in_subscription, 0) :: FLOAT AS weight_by_pct_subscribers\n  FROM\n    most_recent_metrics\n    JOIN (\n      SELECT\n        id AS account_id,\n        subscription_id\n      FROM\n        {{ ref(\"accounts\") }}\n    ) USING (account_id)\n),\naccount_count_subquery AS (\n  SELECT\n    subscription_id,\n    COUNT(*) AS n_accounts\n  FROM\n    {{ ref(\"accounts\") }}\n  GROUP BY\n    subscription_id\n)\nSELECT\n  account_id,\n  pct_account_subscribers * current_mrr AS estimated_mrr\nFROM\n  (\n    SELECT\n      account_id,\n      subscription_id,\n      CASE\n        WHEN total_subscribers_in_subscription > 0 THEN weight_by_pct_subscribers\n        ELSE 1 / CAST(n_accounts AS FLOAT)\n      END AS pct_account_subscribers\n    FROM\n      most_recent_metrics_with_subscription\n      JOIN (\n        SELECT\n          *\n        FROM\n          account_count_subquery\n      ) USING (subscription_id)\n  )\n  JOIN (\n    SELECT\n      subscription_id,\n      CASE\n        WHEN current_mrr IS NULL THEN 0\n        ELSE current_mrr\n      END AS current_mrr\n    FROM\n      {{ ref(\"subscription_metrics_current\") }}\n  ) USING (subscription_id)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/mrr.sql", "original_file_path": "models/alpha/account_metrics_current/components/mrr.sql", "name": "mrr", "alias": "mrr", "checksum": {"name": "sha256", "checksum": "7bc6ce3fa0c169175c7dd4b2403acac4ce604b26a51ca47033ca7263ee3a96f6"}, "tags": [], "refs": [["accounts"], ["accounts"], ["subscription_metrics_current"]], "sources": [["full_table_etl", "account_daily_usage_stats"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/mrr.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.110285, "compiled_code": "WITH metric_rows AS (\n  SELECT\n    account_id,\n    billable_subscribers_v2,\n    ROW_NUMBER() OVER (\n      PARTITION BY account_id\n      ORDER BY\n        occurred_on DESC\n    ) AS row_number\n  FROM\n    \"dumps\".\"current\".\"account_daily_usage_stats\"\n),\nmost_recent_metrics AS (\n  SELECT\n    account_id,\n    billable_subscribers_v2\n  FROM\n    metric_rows\n  WHERE\n    row_number = 1\n),\nmost_recent_metrics_with_subscription AS (\n  SELECT\n    *,\n    SUM(billable_subscribers_v2) OVER (PARTITION BY subscription_id) AS total_subscribers_in_subscription,\n    billable_subscribers_v2 :: FLOAT / NULLIF(total_subscribers_in_subscription, 0) :: FLOAT AS weight_by_pct_subscribers\n  FROM\n    most_recent_metrics\n    JOIN (\n      SELECT\n        id AS account_id,\n        subscription_id\n      FROM\n        \"dumps\".\"dev\".\"accounts\"\n    ) USING (account_id)\n),\naccount_count_subquery AS (\n  SELECT\n    subscription_id,\n    COUNT(*) AS n_accounts\n  FROM\n    \"dumps\".\"dev\".\"accounts\"\n  GROUP BY\n    subscription_id\n)\nSELECT\n  account_id,\n  pct_account_subscribers * current_mrr AS estimated_mrr\nFROM\n  (\n    SELECT\n      account_id,\n      subscription_id,\n      CASE\n        WHEN total_subscribers_in_subscription > 0 THEN weight_by_pct_subscribers\n        ELSE 1 / CAST(n_accounts AS FLOAT)\n      END AS pct_account_subscribers\n    FROM\n      most_recent_metrics_with_subscription\n      JOIN (\n        SELECT\n          *\n        FROM\n          account_count_subquery\n      ) USING (subscription_id)\n  )\n  JOIN (\n    SELECT\n      subscription_id,\n      CASE\n        WHEN current_mrr IS NULL THEN 0\n        ELSE current_mrr\n      END AS current_mrr\n    FROM\n      \"dumps\".\"dev\".\"subscription_metrics_current\"\n  ) USING (subscription_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.oms_indicated": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.data_intelligence.oms_indicated_account_events"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "oms_indicated"], "unique_id": "model.drip_data_intelligence.oms_indicated", "raw_code": "WITH most_recent_oms_indicated AS (\n      SELECT account_id\n           , oms_indicated\n           , row_number() OVER (PARTITION BY account_id ORDER BY occurred_at DESC) n\n        FROM {{ source('data_intelligence', 'oms_indicated_account_events') }}\n  )\nSELECT account_id\n     , oms_indicated\n  FROM most_recent_oms_indicated\n WHERE n = 1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/oms_indicated.sql", "original_file_path": "models/alpha/account_metrics_current/components/oms_indicated.sql", "name": "oms_indicated", "alias": "oms_indicated", "checksum": {"name": "sha256", "checksum": "78b51dda0e17a92d9882fbb32ee7a7486a7ba17cc4ce9a6dc9d1432d7087b9c7"}, "tags": [], "refs": [], "sources": [["data_intelligence", "oms_indicated_account_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/oms_indicated.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.113149, "compiled_code": "WITH most_recent_oms_indicated AS (\n      SELECT account_id\n           , oms_indicated\n           , row_number() OVER (PARTITION BY account_id ORDER BY occurred_at DESC) n\n        FROM \"dumps\".\"data_intelligence\".\"oms_indicated_account_events\"\n  )\nSELECT account_id\n     , oms_indicated\n  FROM most_recent_oms_indicated\n WHERE n = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.first_attributed_revenue": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "first_attributed_revenue"], "unique_id": "model.drip_data_intelligence.first_attributed_revenue", "raw_code": "SELECT account_id, MIN(occurred_at) AS first_attributed_purchase_at\nFROM {{ ref(\"purchases\") }}\nWHERE attributed_sms_delivery_id IS NOT NULL\n   OR attributed_delivery_id IS NOT NULL\nGROUP BY account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/first_attributed_revenue.sql", "original_file_path": "models/alpha/account_metrics_current/components/first_attributed_revenue.sql", "name": "first_attributed_revenue", "alias": "first_attributed_revenue", "checksum": {"name": "sha256", "checksum": "bee55ca85fd0357c8462085c9dd08f79abd4ebb85452c52a16c1734443a068d9"}, "tags": [], "refs": [["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/first_attributed_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.1158662, "compiled_code": "SELECT account_id, MIN(occurred_at) AS first_attributed_purchase_at\nFROM \"dumps\".\"dev\".\"purchases\"\nWHERE attributed_sms_delivery_id IS NOT NULL\n   OR attributed_delivery_id IS NOT NULL\nGROUP BY account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.total_billable_subscribers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.account_daily_usage_stats"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "total_billable_subscribers"], "unique_id": "model.drip_data_intelligence.total_billable_subscribers", "raw_code": "SELECT\n  account_id,\n  billable_subscribers_v2 AS total_billable_subscribers\nFROM\n  (\n    SELECT\n      account_id,\n      billable_subscribers_v2,\n      ROW_NUMBER() OVER (\n        PARTITION BY account_id\n        ORDER BY\n          occurred_on DESC\n      ) AS row_num\n    FROM\n      {{ source(\"full_table_etl\", \"account_daily_usage_stats\")}}\n  )\nWHERE\n  row_num = 1", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/total_billable_subscribers.sql", "original_file_path": "models/alpha/account_metrics_current/components/total_billable_subscribers.sql", "name": "total_billable_subscribers", "alias": "total_billable_subscribers", "checksum": {"name": "sha256", "checksum": "9cddb8f9433c2a7b5cfcac75b8de75ab1368225c3abe763010a652d3b813aaef"}, "tags": [], "refs": [], "sources": [["full_table_etl", "account_daily_usage_stats"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/total_billable_subscribers.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.118646, "compiled_code": "SELECT\n  account_id,\n  billable_subscribers_v2 AS total_billable_subscribers\nFROM\n  (\n    SELECT\n      account_id,\n      billable_subscribers_v2,\n      ROW_NUMBER() OVER (\n        PARTITION BY account_id\n        ORDER BY\n          occurred_on DESC\n      ) AS row_num\n    FROM\n      \"dumps\".\"current\".\"account_daily_usage_stats\"\n  )\nWHERE\n  row_num = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.added_sms_credits": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.sms_credit_rollups"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "added_sms_credits"], "unique_id": "model.drip_data_intelligence.added_sms_credits", "raw_code": "SELECT\n  account_id,\n  MIN(created_at) AS first_added_sms_credits_at,\n  TRUE AS has_added_sms_credits\nFROM\n  {{ source('full_table_etl', 'sms_credit_rollups') }}\nWHERE\n  1 = 1\n  AND credits_purchased > 0\nGROUP BY\n  account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/added_sms_credits.sql", "original_file_path": "models/alpha/account_metrics_current/components/added_sms_credits.sql", "name": "added_sms_credits", "alias": "added_sms_credits", "checksum": {"name": "sha256", "checksum": "768ddafe3dddd5911a0d5392046e5ab73160e67c37ab7689b71fddbf7c9a1127"}, "tags": [], "refs": [], "sources": [["full_table_etl", "sms_credit_rollups"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/added_sms_credits.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.121393, "compiled_code": "SELECT\n  account_id,\n  MIN(created_at) AS first_added_sms_credits_at,\n  TRUE AS has_added_sms_credits\nFROM\n  \"dumps\".\"current\".\"sms_credit_rollups\"\nWHERE\n  1 = 1\n  AND credits_purchased > 0\nGROUP BY\n  account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.300th_sms_person": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.sms_people"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "account_metrics_current", "components", "300th_sms_person"], "unique_id": "model.drip_data_intelligence.300th_sms_person", "raw_code": "SELECT account_id,\n       TRUE AS has_at_least_300_sms_people,\n       sms_person_added_at AS recieved_300_sms_people_at\n       FROM\n(SELECT account_id,\n       ROW_NUMBER() OVER (PARTITION BY account_id ORDER BY created_at) AS row_num,\n       created_at AS sms_person_added_at\nFROM {{ source('full_table_etl', 'sms_people') }})\nWHERE row_num = 300", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/account_metrics_current/components/300th_sms_person.sql", "original_file_path": "models/alpha/account_metrics_current/components/300th_sms_person.sql", "name": "300th_sms_person", "alias": "300th_sms_person", "checksum": {"name": "sha256", "checksum": "1158d20c9bbaebf41d3332bd1ed6d300e3af5da542fc3c101981c9ffcaffeb1b"}, "tags": [], "refs": [], "sources": [["full_table_etl", "sms_people"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/account_metrics_current/components/300th_sms_person.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "ephemeral", "schema": "alpha"}, "created_at": 1674498298.124814, "compiled_code": "SELECT account_id,\n       TRUE AS has_at_least_300_sms_people,\n       sms_person_added_at AS recieved_300_sms_people_at\n       FROM\n(SELECT account_id,\n       ROW_NUMBER() OVER (PARTITION BY account_id ORDER BY created_at) AS row_num,\n       created_at AS sms_person_added_at\nFROM \"dumps\".\"current\".\"sms_people\")\nWHERE row_num = 300", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.drip_data_intelligence.finance_monthly_transactions_full": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.transactions", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "model.drip_data_intelligence.invoice_item_allocations", "model.drip_data_intelligence.invoice_items", "model.drip_data_intelligence.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "finance_monthly", "finance_monthly_transactions_full"], "unique_id": "model.drip_data_intelligence.finance_monthly_transactions_full", "raw_code": "WITH\n  transaction_new_or_renewal_statuses AS (\n    SELECT\n      id\n    , ROW_NUMBER() OVER (\n        PARTITION BY subscription_id\n        ORDER BY\n          created_at\n      ) AS row_num\n    , CASE\n        WHEN row_num = 1 THEN 'New'\n        ELSE 'Renewal'\n      END AS new_renewal_status\n    FROM\n      {{ ref(\"transactions\") }}\n  )\n, subscription_plans AS (\n    -- Janky. For billing version 6, new/renewal transactions get a different plan id than refunds do\n    SELECT\n      id AS subscription_id\n    , CASE\n        WHEN billing_version = 6 THEN CONCAT('Plan ', plan_id)\n        ELSE plan_id\n      END AS transaction_plan_id\n    , plan_id AS refund_plan_id\n    , comped = 't' AS is_comped\n    FROM\n      {{ ref(\"subscriptions\") }}\n  )\n, monthly_service_split AS (\n    SELECT\n      transaction_id\n    , category\n    , nvl(amount_cents,0) amount_cents\n    , nvl(credits_used,0) credits_used\n    , nvl(tax_cents,0) tax_cents\n    FROM\n\t\t  {{ ref(\"monthly_service_transaction_totals_by_category\")}}\n    WHERE\n      amount_cents > 0\n      OR credits_used > 0\n  )\n, annual_taxes as (\n    SELECT iia.transaction_id\n         , sum(iia.amount) tax_cents\n      FROM {{ ref(\"invoice_item_allocations\") }} iia\n               LEFT JOIN {{ ref(\"invoice_items\") }} ii ON ii.id = iia.invoice_item_id\n     WHERE ii.category = 'sales_tax'\n  GROUP BY iia.transaction_id\n)\nSELECT\n  t.id AS transaction_id\n, t.subscription_id\n, new_renewal_status AS status\n, transaction_plan_id AS plan_id\n, status AS transaction_status\n, DATE(t.created_at) AS date_created_at\n, t.created_at\n, CASE\n    WHEN t.category = 'monthly' THEN monthly_service_split.credits_used * 0.01\n    ELSE t.credit_used * 0.01\n  END AS credits_used_in_USD\n, CASE\n    WHEN t.category = 'monthly' THEN (\n      monthly_service_split.amount_cents + monthly_service_split.credits_used -- Janky. monthly_service_split.amount_cents already has credits deducted, so add them back here\n    ) * 0.01\n    ELSE t.amount * 0.01\n  END AS gross_amount_in_USD\n, CASE\n    WHEN monthly_service_split.category = 'sms_monthly_service' THEN gross_amount_in_USD\n    ELSE gross_amount_in_USD - credits_used_in_USD\n  END AS net_amount_in_USD\n, NULL :: NUMERIC  AS USD_refunded\n, t.credit_remaining * 0.01 AS credits_remaining\n, t.stripe_charge_id\n, CASE\n    WHEN t.category IS NULL THEN 'SMS'\n    WHEN t.category = 'monthly' THEN CASE\n      WHEN monthly_service_split.category = 'sms_monthly_service' THEN 'sms_monthly'\n      ELSE t.category\n    END\n    ELSE t.category\n  END AS category\n, CASE\n    WHEN t.provider IS NULL and stripe_charge_id is not null THEN 'stripe'\n    ELSE provider\n  END AS transaction_source\n, memo\n, t.amount - t.credit_used AS total_transaction_amount\n, nvl(case\n    when t.category = 'monthly'  then monthly_service_split.tax_cents * 0.01\n    else annual_taxes.tax_cents * 0.01\n   end, 0) as tax_amount_in_usd\nFROM\n  {{ ref(\"transactions\") }} t\n  LEFT JOIN transaction_new_or_renewal_statuses USING (id)\n  LEFT JOIN subscription_plans USING (subscription_id)\n  LEFT JOIN monthly_service_split ON monthly_service_split.transaction_id = t.id and t.category = 'monthly'\n  LEFT JOIN annual_taxes on t.id = annual_taxes.transaction_id\nWHERE (stripe_charge_id != 'Drip Test Subscription' or stripe_charge_id is null)", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/finance_monthly/finance_monthly_transactions_full.sql", "original_file_path": "models/alpha/finance_monthly/finance_monthly_transactions_full.sql", "name": "finance_monthly_transactions_full", "alias": "finance_monthly_transactions_full", "checksum": {"name": "sha256", "checksum": "ecda24697e8bf8b3e3238074bbbc1935df52efb40f626a9d40c7be1aff790db0"}, "tags": [], "refs": [["transactions"], ["subscriptions"], ["monthly_service_transaction_totals_by_category"], ["invoice_item_allocations"], ["invoice_items"], ["transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/finance_monthly/finance_monthly_transactions_full.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.12742, "compiled_code": "WITH\n  transaction_new_or_renewal_statuses AS (\n    SELECT\n      id\n    , ROW_NUMBER() OVER (\n        PARTITION BY subscription_id\n        ORDER BY\n          created_at\n      ) AS row_num\n    , CASE\n        WHEN row_num = 1 THEN 'New'\n        ELSE 'Renewal'\n      END AS new_renewal_status\n    FROM\n      \"dumps\".\"dev\".\"transactions\"\n  )\n, subscription_plans AS (\n    -- Janky. For billing version 6, new/renewal transactions get a different plan id than refunds do\n    SELECT\n      id AS subscription_id\n    , CASE\n        WHEN billing_version = 6 THEN CONCAT('Plan ', plan_id)\n        ELSE plan_id\n      END AS transaction_plan_id\n    , plan_id AS refund_plan_id\n    , comped = 't' AS is_comped\n    FROM\n      \"dumps\".\"dev\".\"subscriptions\"\n  )\n, monthly_service_split AS (\n    SELECT\n      transaction_id\n    , category\n    , nvl(amount_cents,0) amount_cents\n    , nvl(credits_used,0) credits_used\n    , nvl(tax_cents,0) tax_cents\n    FROM\n\t\t  \"dumps\".\"dev\".\"monthly_service_transaction_totals_by_category\"\n    WHERE\n      amount_cents > 0\n      OR credits_used > 0\n  )\n, annual_taxes as (\n    SELECT iia.transaction_id\n         , sum(iia.amount) tax_cents\n      FROM \"dumps\".\"dev\".\"invoice_item_allocations\" iia\n               LEFT JOIN \"dumps\".\"dev\".\"invoice_items\" ii ON ii.id = iia.invoice_item_id\n     WHERE ii.category = 'sales_tax'\n  GROUP BY iia.transaction_id\n)\nSELECT\n  t.id AS transaction_id\n, t.subscription_id\n, new_renewal_status AS status\n, transaction_plan_id AS plan_id\n, status AS transaction_status\n, DATE(t.created_at) AS date_created_at\n, t.created_at\n, CASE\n    WHEN t.category = 'monthly' THEN monthly_service_split.credits_used * 0.01\n    ELSE t.credit_used * 0.01\n  END AS credits_used_in_USD\n, CASE\n    WHEN t.category = 'monthly' THEN (\n      monthly_service_split.amount_cents + monthly_service_split.credits_used -- Janky. monthly_service_split.amount_cents already has credits deducted, so add them back here\n    ) * 0.01\n    ELSE t.amount * 0.01\n  END AS gross_amount_in_USD\n, CASE\n    WHEN monthly_service_split.category = 'sms_monthly_service' THEN gross_amount_in_USD\n    ELSE gross_amount_in_USD - credits_used_in_USD\n  END AS net_amount_in_USD\n, NULL :: NUMERIC  AS USD_refunded\n, t.credit_remaining * 0.01 AS credits_remaining\n, t.stripe_charge_id\n, CASE\n    WHEN t.category IS NULL THEN 'SMS'\n    WHEN t.category = 'monthly' THEN CASE\n      WHEN monthly_service_split.category = 'sms_monthly_service' THEN 'sms_monthly'\n      ELSE t.category\n    END\n    ELSE t.category\n  END AS category\n, CASE\n    WHEN t.provider IS NULL and stripe_charge_id is not null THEN 'stripe'\n    ELSE provider\n  END AS transaction_source\n, memo\n, t.amount - t.credit_used AS total_transaction_amount\n, nvl(case\n    when t.category = 'monthly'  then monthly_service_split.tax_cents * 0.01\n    else annual_taxes.tax_cents * 0.01\n   end, 0) as tax_amount_in_usd\nFROM\n  \"dumps\".\"dev\".\"transactions\" t\n  LEFT JOIN transaction_new_or_renewal_statuses USING (id)\n  LEFT JOIN subscription_plans USING (subscription_id)\n  LEFT JOIN monthly_service_split ON monthly_service_split.transaction_id = t.id and t.category = 'monthly'\n  LEFT JOIN annual_taxes on t.id = annual_taxes.transaction_id\nWHERE (stripe_charge_id != 'Drip Test Subscription' or stripe_charge_id is null)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"finance_monthly_transactions_full\""}, "model.drip_data_intelligence.finance_monthly_report": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.drip_data_intelligence.finance_monthly_transactions_full", "model.drip_data_intelligence.finance_monthly_transactions_full", "model.drip_data_intelligence.finance_monthly_refunds_full", "model.drip_data_intelligence.finance_monthly_refunds_full"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "finance_monthly", "finance_monthly_report"], "unique_id": "model.drip_data_intelligence.finance_monthly_report", "raw_code": "SELECT\n  DISTINCT -- TODO: DISTINCT here is a total kludge. Handles when annual credits are added covering both email and SMS\n  transaction_id :: TEXT\n, stripe_charge_id\n, subscription_id :: TEXT\n, status\n, plan_id\n, CASE\n    WHEN category = 'monthly' THEN CASE\n      WHEN ABS(gross_amount_in_USD) = 0 THEN 'Starter'\n      WHEN (\n        ABS(gross_amount_in_USD) > 0\n        AND ABS(gross_amount_in_USD) < 40.83\n      ) THEN 'Lite'\n      WHEN (\n        ABS(gross_amount_in_USD) >= 40.83\n        AND ABS(gross_amount_in_USD) <= 49.00\n      ) THEN 'Basic'\n      WHEN (\n        ABS(gross_amount_in_USD) > 49.00\n        AND ABS(gross_amount_in_USD) <= 122.00\n      ) THEN 'Pro'\n      WHEN ABS(gross_amount_in_USD) > 122.00 THEN 'High Value'\n    END\n    WHEN category = 'annual' THEN CASE\n      WHEN ABS(gross_amount_in_USD) = 0 THEN 'Starter'\n      WHEN (\n        ABS(gross_amount_in_USD) > 0\n        AND ABS(gross_amount_in_USD) < 408.30\n      ) THEN 'Lite'\n      WHEN (\n        ABS(gross_amount_in_USD) >= 408.30\n        AND ABS(gross_amount_in_USD) <= 490.00\n      ) THEN 'Basic'\n      WHEN (\n        ABS(gross_amount_in_USD) > 490.00\n        AND ABS(gross_amount_in_USD) <= 1220.00\n      ) THEN 'Pro'\n      WHEN ABS(gross_amount_in_USD) > 1220.00 THEN 'High Value'\n    END\n    ELSE 'High Value'\n  END AS plan_estimate\n, transaction_status\n, created_at\n, date_created_at\n, credits_remaining\n, transaction_source\n, memo\n, category\n, gross_amount_in_usd\n, credits_used_in_USD AS credits_used\n, usd_refunded\n, tax_amount_in_usd\n, case when status = 'refunded' then 0\n       when category = 'annual' then gross_amount_in_usd - tax_amount_in_usd\n       else gross_amount_in_usd - credits_used - tax_amount_in_usd\n    end as net_usd_after_tax\n, case when status = 'refunded' then 0\n       when category = 'annual' then gross_amount_in_usd\n       else gross_amount_in_usd - credits_used\n    end as net_usd_before_tax\nFROM\n  (\n    SELECT {{ dbt_utils.star(ref(\"finance_monthly_transactions_full\")) }}\n    FROM\n      {{ ref(\"finance_monthly_transactions_full\") }}\n    UNION\n    SELECT {{ dbt_utils.star(ref(\"finance_monthly_refunds_full\")) }}\n        , 0 as tax\n    FROM\n      {{ ref(\"finance_monthly_refunds_full\") }}\n  ) iww\nWHERE date_trunc ('mon',created_at) >= '01-jun-2022'\n  AND (\n    total_transaction_amount != 0\n    OR (\n      usd_refunded IS NOT NULL\n      AND status = 'refunded'\n    )\n  )\nORDER BY\n  created_at", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/finance_monthly/finance_monthly_report.sql", "original_file_path": "models/alpha/finance_monthly/finance_monthly_report.sql", "name": "finance_monthly_report", "alias": "finance_monthly_report", "checksum": {"name": "sha256", "checksum": "7cd1a78608c0f534dbda0fbeebff038be185c610dec155a0ef0ff3778bd8c15f"}, "tags": [], "refs": [["finance_monthly_transactions_full"], ["finance_monthly_transactions_full"], ["finance_monthly_refunds_full"], ["finance_monthly_refunds_full"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/finance_monthly/finance_monthly_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.130187, "compiled_code": "SELECT\n  DISTINCT -- TODO: DISTINCT here is a total kludge. Handles when annual credits are added covering both email and SMS\n  transaction_id :: TEXT\n, stripe_charge_id\n, subscription_id :: TEXT\n, status\n, plan_id\n, CASE\n    WHEN category = 'monthly' THEN CASE\n      WHEN ABS(gross_amount_in_USD) = 0 THEN 'Starter'\n      WHEN (\n        ABS(gross_amount_in_USD) > 0\n        AND ABS(gross_amount_in_USD) < 40.83\n      ) THEN 'Lite'\n      WHEN (\n        ABS(gross_amount_in_USD) >= 40.83\n        AND ABS(gross_amount_in_USD) <= 49.00\n      ) THEN 'Basic'\n      WHEN (\n        ABS(gross_amount_in_USD) > 49.00\n        AND ABS(gross_amount_in_USD) <= 122.00\n      ) THEN 'Pro'\n      WHEN ABS(gross_amount_in_USD) > 122.00 THEN 'High Value'\n    END\n    WHEN category = 'annual' THEN CASE\n      WHEN ABS(gross_amount_in_USD) = 0 THEN 'Starter'\n      WHEN (\n        ABS(gross_amount_in_USD) > 0\n        AND ABS(gross_amount_in_USD) < 408.30\n      ) THEN 'Lite'\n      WHEN (\n        ABS(gross_amount_in_USD) >= 408.30\n        AND ABS(gross_amount_in_USD) <= 490.00\n      ) THEN 'Basic'\n      WHEN (\n        ABS(gross_amount_in_USD) > 490.00\n        AND ABS(gross_amount_in_USD) <= 1220.00\n      ) THEN 'Pro'\n      WHEN ABS(gross_amount_in_USD) > 1220.00 THEN 'High Value'\n    END\n    ELSE 'High Value'\n  END AS plan_estimate\n, transaction_status\n, created_at\n, date_created_at\n, credits_remaining\n, transaction_source\n, memo\n, category\n, gross_amount_in_usd\n, credits_used_in_USD AS credits_used\n, usd_refunded\n, tax_amount_in_usd\n, case when status = 'refunded' then 0\n       when category = 'annual' then gross_amount_in_usd - tax_amount_in_usd\n       else gross_amount_in_usd - credits_used - tax_amount_in_usd\n    end as net_usd_after_tax\n, case when status = 'refunded' then 0\n       when category = 'annual' then gross_amount_in_usd\n       else gross_amount_in_usd - credits_used\n    end as net_usd_before_tax\nFROM\n  (\n    SELECT \"transaction_id\",\n  \"subscription_id\",\n  \"status\",\n  \"plan_id\",\n  \"transaction_status\",\n  \"date_created_at\",\n  \"created_at\",\n  \"credits_used_in_usd\",\n  \"gross_amount_in_usd\",\n  \"net_amount_in_usd\",\n  \"usd_refunded\",\n  \"credits_remaining\",\n  \"stripe_charge_id\",\n  \"category\",\n  \"transaction_source\",\n  \"memo\",\n  \"total_transaction_amount\",\n  \"tax_amount_in_usd\"\n    FROM\n      \"dumps\".\"dev\".\"finance_monthly_transactions_full\"\n    UNION\n    SELECT \"transaction_id\",\n  \"subscription_id\",\n  \"status\",\n  \"plan_id\",\n  \"transaction_status\",\n  \"date_created_at\",\n  \"created_at\",\n  \"credits_used\",\n  \"gross_amount_in_usd\",\n  \"net_amount_in_usd\",\n  \"usd_refunded\",\n  \"credits_remaining\",\n  \"stripe_charge_id\",\n  \"category\",\n  \"transaction_source\",\n  \"memo\",\n  \"total_transaction_amount\"\n        , 0 as tax\n    FROM\n      \"dumps\".\"dev\".\"finance_monthly_refunds_full\"\n  ) iww\nWHERE date_trunc ('mon',created_at) >= '01-jun-2022'\n  AND (\n    total_transaction_amount != 0\n    OR (\n      usd_refunded IS NOT NULL\n      AND status = 'refunded'\n    )\n  )\nORDER BY\n  created_at", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"finance_monthly_report\""}, "model.drip_data_intelligence.finance_monthly_report_old": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.transactions", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "finance_monthly", "finance_monthly_report_old"], "unique_id": "model.drip_data_intelligence.finance_monthly_report_old", "raw_code": "-- This is a refactor of https://metabase.insights.drip.sh/question/49-finance-transaction-record\nWITH\n  transaction_new_or_renewal_statuses AS (\n    SELECT\n      id\n    , ROW_NUMBER() OVER (\n        PARTITION BY subscription_id\n        ORDER BY\n          created_at\n      ) AS row_num\n    , CASE\n        WHEN row_num = 1 THEN 'New'\n        ELSE 'Renewal'\n      END AS new_renewal_status\n    FROM\n      {{ ref(\"transactions\") }}\n  )\n, subscription_plans AS (\n    -- Janky. For billing version 6, new/renewal transactions get a different plan id than refunds do\n    SELECT\n      id AS subscription_id\n    , CASE\n        WHEN billing_version = 6 THEN CONCAT('Plan ', plan_id)\n        ELSE plan_id\n      END AS transaction_plan_id\n    , plan_id AS refund_plan_id\n    FROM\n      {{ ref(\"subscriptions\") }}\n  )\n, transactions AS (\n    SELECT\n      t.id AS transaction_id\n    , t.subscription_id\n    , new_renewal_status AS status\n    , transaction_plan_id AS plan_id\n    , status AS transaction_status\n    , DATE(t.created_at) AS date_created_at\n    , t.created_at\n    , t.amount * 0.01 AS gross_amount_in_USD\n    , credit_used * 0.01 AS credits_used\n    , (t.amount - credit_used) * 0.01 AS net_amount_in_USD\n    , NULL AS USD_refunded\n    , credit_remaining * 0.01 AS credits_remaining\n    , t.stripe_charge_id\n    , CASE\n        WHEN category IS NULL THEN 'SMS'\n        ELSE category\n      END AS category\n    , CASE\n        WHEN t.provider IS NULL THEN 'stripe'\n        ELSE provider\n      END AS transaction_source\n    , memo\n    FROM\n      {{ ref(\"transactions\") }} t\n      LEFT JOIN transaction_new_or_renewal_statuses USING (id)\n      LEFT JOIN subscription_plans USING (subscription_id)\n  )\n, refunds AS (\n    SELECT\n      transaction_id\n    , r.subscription_id\n    , 'refunded' AS status\n    , refund_plan_id AS plan_id\n    , NULL AS transaction_status\n    , DATE(r.created_at) AS date_created_at\n    , r.created_at :: TIMESTAMPTZ\n    , r.amount * 0.01 AS gross_amount_in_USD\n    , NULL AS credits_used\n    , NULL AS net_amount_in_USD\n    , r.amount * 0.01 AS USD_refunded\n    , NULL AS credits_remaining\n    , r.stripe_charge_id\n    , transactions.category\n    , 'stripe' AS transaction_source\n    , 'FROM DRIP REFUNDS TABLE' AS memo\n    FROM\n      finance.refunds r\n      LEFT JOIN subscription_plans USING (subscription_id)\n      LEFT JOIN transactions USING (transaction_id)\n  )\nSELECT\n  transaction_id :: TEXT\n, stripe_charge_id\n, subscription_id :: TEXT\n, status\n, plan_id\n,\n--  CASE\n--     WHEN category = 'monthly' THEN CASE\n--       WHEN ABS(gross_amount_in_USD) = 0 THEN 'Starter'\n--       WHEN (\n--         ABS(gross_amount_in_USD) > 0\n--         AND ABS(gross_amount_in_USD) < 40.83\n--       ) THEN 'Lite'\n--       WHEN (\n--         ABS(gross_amount_in_USD) >= 40.83\n--         AND ABS(gross_amount_in_USD) <= 49.00\n--       ) THEN 'Basic'\n--       WHEN (\n--         ABS(gross_amount_in_USD) > 49.00\n--         AND ABS(gross_amount_in_USD) <= 122.00\n--       ) THEN 'Pro'\n--       WHEN ABS(gross_amount_in_USD) > 122.00 THEN 'High Value'\n--     END\n--     WHEN category = 'annual' THEN CASE\n--       WHEN ABS(gross_amount_in_USD) = 0 THEN 'Starter'\n--       WHEN (\n--         ABS(gross_amount_in_USD) > 0\n--         AND ABS(gross_amount_in_USD) < 408.30\n--       ) THEN 'Lite'\n--       WHEN (\n--         ABS(gross_amount_in_USD) >= 408.30\n--         AND ABS(gross_amount_in_USD) <= 490.00\n--       ) THEN 'Basic'\n--       WHEN (\n--         ABS(gross_amount_in_USD) > 490.00\n--         AND ABS(gross_amount_in_USD) <= 1220.00\n--       ) THEN 'Pro'\n--       WHEN ABS(gross_amount_in_USD) > 1220.00 THEN 'High Value'\n--     END\n--     ELSE 'High Value'\n--   END\n  NULL AS plan_estimate -- NOTE: this is to be able to compare against the new report, rolled up\n, transaction_status\n, created_at\n, date_created_at\n, credits_remaining\n, transaction_source\n, memo\n, category\n, gross_amount_in_usd\n, credits_used\n, usd_refunded\nFROM\n  (\n    SELECT\n      *\n    FROM\n      transactions\n    UNION\n    SELECT\n      *\n    FROM\n      refunds\n  )\nWHERE\n  EXTRACT(\n    YEAR\n    FROM\n      created_at\n  ) = 2022\n  -- \tAND EXTRACT(MONTH\n  -- FROM\n  -- \tcreated_at) = 07\n  AND (\n    net_amount_in_usd != 0\n    OR usd_refunded IS NOT NULL\n  )\nORDER BY\n  created_at", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/finance_monthly/finance_monthly_report_old.sql", "original_file_path": "models/alpha/finance_monthly/finance_monthly_report_old.sql", "name": "finance_monthly_report_old", "alias": "finance_monthly_report_old", "checksum": {"name": "sha256", "checksum": "5d89d6ad898d3f91a7d6af493dc9a74cb242cd41bd972f92ce60407d10084a67"}, "tags": [], "refs": [["transactions"], ["subscriptions"], ["transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/finance_monthly/finance_monthly_report_old.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.1377761, "compiled_code": "-- This is a refactor of https://metabase.insights.drip.sh/question/49-finance-transaction-record\nWITH\n  transaction_new_or_renewal_statuses AS (\n    SELECT\n      id\n    , ROW_NUMBER() OVER (\n        PARTITION BY subscription_id\n        ORDER BY\n          created_at\n      ) AS row_num\n    , CASE\n        WHEN row_num = 1 THEN 'New'\n        ELSE 'Renewal'\n      END AS new_renewal_status\n    FROM\n      \"dumps\".\"dev\".\"transactions\"\n  )\n, subscription_plans AS (\n    -- Janky. For billing version 6, new/renewal transactions get a different plan id than refunds do\n    SELECT\n      id AS subscription_id\n    , CASE\n        WHEN billing_version = 6 THEN CONCAT('Plan ', plan_id)\n        ELSE plan_id\n      END AS transaction_plan_id\n    , plan_id AS refund_plan_id\n    FROM\n      \"dumps\".\"dev\".\"subscriptions\"\n  )\n, transactions AS (\n    SELECT\n      t.id AS transaction_id\n    , t.subscription_id\n    , new_renewal_status AS status\n    , transaction_plan_id AS plan_id\n    , status AS transaction_status\n    , DATE(t.created_at) AS date_created_at\n    , t.created_at\n    , t.amount * 0.01 AS gross_amount_in_USD\n    , credit_used * 0.01 AS credits_used\n    , (t.amount - credit_used) * 0.01 AS net_amount_in_USD\n    , NULL AS USD_refunded\n    , credit_remaining * 0.01 AS credits_remaining\n    , t.stripe_charge_id\n    , CASE\n        WHEN category IS NULL THEN 'SMS'\n        ELSE category\n      END AS category\n    , CASE\n        WHEN t.provider IS NULL THEN 'stripe'\n        ELSE provider\n      END AS transaction_source\n    , memo\n    FROM\n      \"dumps\".\"dev\".\"transactions\" t\n      LEFT JOIN transaction_new_or_renewal_statuses USING (id)\n      LEFT JOIN subscription_plans USING (subscription_id)\n  )\n, refunds AS (\n    SELECT\n      transaction_id\n    , r.subscription_id\n    , 'refunded' AS status\n    , refund_plan_id AS plan_id\n    , NULL AS transaction_status\n    , DATE(r.created_at) AS date_created_at\n    , r.created_at :: TIMESTAMPTZ\n    , r.amount * 0.01 AS gross_amount_in_USD\n    , NULL AS credits_used\n    , NULL AS net_amount_in_USD\n    , r.amount * 0.01 AS USD_refunded\n    , NULL AS credits_remaining\n    , r.stripe_charge_id\n    , transactions.category\n    , 'stripe' AS transaction_source\n    , 'FROM DRIP REFUNDS TABLE' AS memo\n    FROM\n      finance.refunds r\n      LEFT JOIN subscription_plans USING (subscription_id)\n      LEFT JOIN transactions USING (transaction_id)\n  )\nSELECT\n  transaction_id :: TEXT\n, stripe_charge_id\n, subscription_id :: TEXT\n, status\n, plan_id\n,\n--  CASE\n--     WHEN category = 'monthly' THEN CASE\n--       WHEN ABS(gross_amount_in_USD) = 0 THEN 'Starter'\n--       WHEN (\n--         ABS(gross_amount_in_USD) > 0\n--         AND ABS(gross_amount_in_USD) < 40.83\n--       ) THEN 'Lite'\n--       WHEN (\n--         ABS(gross_amount_in_USD) >= 40.83\n--         AND ABS(gross_amount_in_USD) <= 49.00\n--       ) THEN 'Basic'\n--       WHEN (\n--         ABS(gross_amount_in_USD) > 49.00\n--         AND ABS(gross_amount_in_USD) <= 122.00\n--       ) THEN 'Pro'\n--       WHEN ABS(gross_amount_in_USD) > 122.00 THEN 'High Value'\n--     END\n--     WHEN category = 'annual' THEN CASE\n--       WHEN ABS(gross_amount_in_USD) = 0 THEN 'Starter'\n--       WHEN (\n--         ABS(gross_amount_in_USD) > 0\n--         AND ABS(gross_amount_in_USD) < 408.30\n--       ) THEN 'Lite'\n--       WHEN (\n--         ABS(gross_amount_in_USD) >= 408.30\n--         AND ABS(gross_amount_in_USD) <= 490.00\n--       ) THEN 'Basic'\n--       WHEN (\n--         ABS(gross_amount_in_USD) > 490.00\n--         AND ABS(gross_amount_in_USD) <= 1220.00\n--       ) THEN 'Pro'\n--       WHEN ABS(gross_amount_in_USD) > 1220.00 THEN 'High Value'\n--     END\n--     ELSE 'High Value'\n--   END\n  NULL AS plan_estimate -- NOTE: this is to be able to compare against the new report, rolled up\n, transaction_status\n, created_at\n, date_created_at\n, credits_remaining\n, transaction_source\n, memo\n, category\n, gross_amount_in_usd\n, credits_used\n, usd_refunded\nFROM\n  (\n    SELECT\n      *\n    FROM\n      transactions\n    UNION\n    SELECT\n      *\n    FROM\n      refunds\n  )\nWHERE\n  EXTRACT(\n    YEAR\n    FROM\n      created_at\n  ) = 2022\n  -- \tAND EXTRACT(MONTH\n  -- FROM\n  -- \tcreated_at) = 07\n  AND (\n    net_amount_in_usd != 0\n    OR usd_refunded IS NOT NULL\n  )\nORDER BY\n  created_at", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"finance_monthly_report_old\""}, "model.drip_data_intelligence.monthly_service_transaction_totals_by_category": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.transactions", "model.drip_data_intelligence.invoice_item_allocations", "model.drip_data_intelligence.invoice_items", "model.drip_data_intelligence.invoice_item_allocations", "model.drip_data_intelligence.invoice_items", "model.drip_data_intelligence.invoice_item_allocations"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "finance_monthly", "monthly_service_transaction_totals_by_category"], "unique_id": "model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "raw_code": "WITH transactions AS (\n    select id transaction_id\n         , subscription_id\n    from {{ ref(\"transactions\") }}\n    WHERE '2022-10-01' <= created_at -- TODO: convert this to an incremental model for speed\n      AND amount > 0\n    )\n   , invoice_item_allocations AS (\n    SELECT transaction_id\n         , amount\n         , credit\n         , invoice_item_id\n         , category\n    FROM transactions\n         LEFT JOIN {{ ref(\"invoice_item_allocations\") }} iia USING (transaction_id)\n         INNER JOIN {{ ref(\"invoice_items\") }} ii ON ii.id = iia.invoice_item_id\n    )\n   , invoice_items AS (\n    SELECT DISTINCT invoice_item_id\n                  , category\n    FROM invoice_item_allocations\n    )\n   , paid_amounts AS (\n    SELECT transaction_id\n         , SUM(CASE WHEN category = 'sms_monthly_service' THEN amount ELSE 0 END) sms_paid_amount\n         , SUM(CASE WHEN category = 'monthly_service' THEN amount ELSE 0 END)     email_paid_amount\n    FROM invoice_item_allocations\n    WHERE credit = FALSE\n    GROUP BY\n        transaction_id\n    )\n   , tax_amounts AS (\n    SELECT tax_iia.transaction_id\n         , SUM(CASE WHEN ii.category = 'sms_monthly_service' THEN tax_iia.amount ELSE 0 END) sms_tax_amount\n         , SUM(CASE WHEN ii.category = 'monthly_service' THEN tax_iia.amount ELSE 0 END)     email_tax_amount\n    FROM {{ ref(\"invoice_item_allocations\") }} tax_iia\n         INNER JOIN {{ ref(\"invoice_items\") }} tax_ii ON tax_iia.invoice_item_id = tax_ii.id\n         INNER JOIN invoice_items ii ON tax_ii.taxable_item_id = ii.invoice_item_id\n    WHERE tax_iia.credit = FALSE\n    GROUP BY tax_iia.transaction_id\n    )\n--     select * from tax_amounts;\n   , credits_used AS (\n    SELECT transaction_id\n         , SUM(CASE WHEN ii.category = 'sms_monthly_service' THEN credit_iia.amount ELSE 0 END) sms_credits_used\n         , SUM(CASE WHEN ii.category = 'monthly_service' THEN credit_iia.amount ELSE 0 END)     email_credits_used\n    FROM {{ ref(\"invoice_item_allocations\") }} credit_iia\n         INNER JOIN invoice_items ii USING (invoice_item_id)\n    WHERE credit_iia.credit = TRUE\n    GROUP BY transaction_id\n    )\n--     select * from credits_used;\n   , sms_totals as (\n    select transaction_id\n         , subscription_id\n         , 'sms_monthly_service'                                  category\n         , ISNULL(sms_paid_amount, 0) + ISNULL(sms_tax_amount, 0) amount_cents\n         , ISNULL(sms_tax_amount, 0)                              tax_cents\n         , ISNULL(sms_credits_used, 0)                            credits_used\n    from transactions\n         LEFT JOIN paid_amounts USING (transaction_id)\n         LEFT JOIN tax_amounts USING (transaction_id)\n         LEFT JOIN credits_used USING (transaction_id)\n    )\n   , email_totals as (\n    select transaction_id\n         , subscription_id\n         , 'monthly_service'                                          category\n         , ISNULL(email_paid_amount, 0) + ISNULL(email_tax_amount, 0) amount_cents\n         , ISNULL(email_tax_amount, 0)                                tax_cents\n         , ISNULL(email_credits_used, 0)                              credits_used\n    from transactions\n         LEFT JOIN paid_amounts USING (transaction_id)\n         LEFT JOIN tax_amounts USING (transaction_id)\n         LEFT JOIN credits_used USING (transaction_id)\n    )\n--  select* from email_totals;\n   , totals AS (\n    select *\n    from sms_totals\n    UNION ALL\n    select *\n    from email_totals\n    )\nselect *\nfrom totals\norder by\n    transaction_id, category", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/finance_monthly/monthly_service_transaction_totals_by_category.sql", "original_file_path": "models/alpha/finance_monthly/monthly_service_transaction_totals_by_category.sql", "name": "monthly_service_transaction_totals_by_category", "alias": "monthly_service_transaction_totals_by_category", "checksum": {"name": "sha256", "checksum": "f85e006a5d343eeed236cc155847a4706b0dcc2dd0a6878486eb1923cd2f9369"}, "tags": [], "refs": [["transactions"], ["invoice_item_allocations"], ["invoice_items"], ["invoice_item_allocations"], ["invoice_items"], ["invoice_item_allocations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/finance_monthly/monthly_service_transaction_totals_by_category.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.140448, "compiled_code": "WITH transactions AS (\n    select id transaction_id\n         , subscription_id\n    from \"dumps\".\"dev\".\"transactions\"\n    WHERE '2022-10-01' <= created_at -- TODO: convert this to an incremental model for speed\n      AND amount > 0\n    )\n   , invoice_item_allocations AS (\n    SELECT transaction_id\n         , amount\n         , credit\n         , invoice_item_id\n         , category\n    FROM transactions\n         LEFT JOIN \"dumps\".\"dev\".\"invoice_item_allocations\" iia USING (transaction_id)\n         INNER JOIN \"dumps\".\"dev\".\"invoice_items\" ii ON ii.id = iia.invoice_item_id\n    )\n   , invoice_items AS (\n    SELECT DISTINCT invoice_item_id\n                  , category\n    FROM invoice_item_allocations\n    )\n   , paid_amounts AS (\n    SELECT transaction_id\n         , SUM(CASE WHEN category = 'sms_monthly_service' THEN amount ELSE 0 END) sms_paid_amount\n         , SUM(CASE WHEN category = 'monthly_service' THEN amount ELSE 0 END)     email_paid_amount\n    FROM invoice_item_allocations\n    WHERE credit = FALSE\n    GROUP BY\n        transaction_id\n    )\n   , tax_amounts AS (\n    SELECT tax_iia.transaction_id\n         , SUM(CASE WHEN ii.category = 'sms_monthly_service' THEN tax_iia.amount ELSE 0 END) sms_tax_amount\n         , SUM(CASE WHEN ii.category = 'monthly_service' THEN tax_iia.amount ELSE 0 END)     email_tax_amount\n    FROM \"dumps\".\"dev\".\"invoice_item_allocations\" tax_iia\n         INNER JOIN \"dumps\".\"dev\".\"invoice_items\" tax_ii ON tax_iia.invoice_item_id = tax_ii.id\n         INNER JOIN invoice_items ii ON tax_ii.taxable_item_id = ii.invoice_item_id\n    WHERE tax_iia.credit = FALSE\n    GROUP BY tax_iia.transaction_id\n    )\n--     select * from tax_amounts;\n   , credits_used AS (\n    SELECT transaction_id\n         , SUM(CASE WHEN ii.category = 'sms_monthly_service' THEN credit_iia.amount ELSE 0 END) sms_credits_used\n         , SUM(CASE WHEN ii.category = 'monthly_service' THEN credit_iia.amount ELSE 0 END)     email_credits_used\n    FROM \"dumps\".\"dev\".\"invoice_item_allocations\" credit_iia\n         INNER JOIN invoice_items ii USING (invoice_item_id)\n    WHERE credit_iia.credit = TRUE\n    GROUP BY transaction_id\n    )\n--     select * from credits_used;\n   , sms_totals as (\n    select transaction_id\n         , subscription_id\n         , 'sms_monthly_service'                                  category\n         , ISNULL(sms_paid_amount, 0) + ISNULL(sms_tax_amount, 0) amount_cents\n         , ISNULL(sms_tax_amount, 0)                              tax_cents\n         , ISNULL(sms_credits_used, 0)                            credits_used\n    from transactions\n         LEFT JOIN paid_amounts USING (transaction_id)\n         LEFT JOIN tax_amounts USING (transaction_id)\n         LEFT JOIN credits_used USING (transaction_id)\n    )\n   , email_totals as (\n    select transaction_id\n         , subscription_id\n         , 'monthly_service'                                          category\n         , ISNULL(email_paid_amount, 0) + ISNULL(email_tax_amount, 0) amount_cents\n         , ISNULL(email_tax_amount, 0)                                tax_cents\n         , ISNULL(email_credits_used, 0)                              credits_used\n    from transactions\n         LEFT JOIN paid_amounts USING (transaction_id)\n         LEFT JOIN tax_amounts USING (transaction_id)\n         LEFT JOIN credits_used USING (transaction_id)\n    )\n--  select* from email_totals;\n   , totals AS (\n    select *\n    from sms_totals\n    UNION ALL\n    select *\n    from email_totals\n    )\nselect *\nfrom totals\norder by\n    transaction_id, category", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"monthly_service_transaction_totals_by_category\""}, "model.drip_data_intelligence.finance_monthly_discrepancies": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "model.drip_data_intelligence.transactions", "model.drip_data_intelligence.finance_monthly_report_rollup", "model.drip_data_intelligence.finance_monthly_report_old", "model.drip_data_intelligence.finance_monthly_report_old", "model.drip_data_intelligence.finance_monthly_report_rollup"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "finance_monthly", "finance_monthly_discrepancies"], "unique_id": "model.drip_data_intelligence.finance_monthly_discrepancies", "raw_code": "WITH max_transaction_id AS (\n\tSELECT\n\t\tmax(transaction_id) id\n\tFROM\n\t\t{{ ref(\"monthly_service_transaction_totals_by_category\")}}\n),\nmax_transaction_date AS (\n\tSELECT\n\t\tDATE_TRUNC('day',\n\t\t\tcreated_at) transaction_date\n\tFROM\n\t\tmax_transaction_id\n\tLEFT JOIN {{ ref(\"transactions\") }} USING (id)\n)\nSELECT\n  *\nFROM\n  (\n    SELECT\n      'new' AS TABLE_NAME\n    , *\n    FROM\n      (\n        SELECT\n          *\n        FROM\n          {{ ref(\"finance_monthly_report_rollup\") }}\n        MINUS\n        SELECT\n          *\n        FROM\n          {{ ref(\"finance_monthly_report_old\") }}\n      )\n    UNION ALL\n    SELECT\n      'old' AS TABLE_NAME\n    , *\n    FROM\n      (\n        SELECT\n          *\n        FROM\n          {{ ref(\"finance_monthly_report_old\") }}\n        MINUS\n        SELECT\n          *\n        FROM\n          {{ ref(\"finance_monthly_report_rollup\") }}\n      )\n  )\nWHERE\n  created_at BETWEEN\n    '2022-06-01'\n    AND\n    (SELECT\ttransaction_date FROM max_transaction_date)\nORDER BY\n  transaction_id\n, TABLE_NAME", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/finance_monthly/finance_monthly_discrepancies.sql", "original_file_path": "models/alpha/finance_monthly/finance_monthly_discrepancies.sql", "name": "finance_monthly_discrepancies", "alias": "finance_monthly_discrepancies", "checksum": {"name": "sha256", "checksum": "241293a349cae81bf05c5d579e5f39d0384dd7bae2612d022be6ec9ed2131197"}, "tags": [], "refs": [["monthly_service_transaction_totals_by_category"], ["transactions"], ["finance_monthly_report_rollup"], ["finance_monthly_report_old"], ["finance_monthly_report_old"], ["finance_monthly_report_rollup"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/finance_monthly/finance_monthly_discrepancies.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.143497, "compiled_code": "WITH max_transaction_id AS (\n\tSELECT\n\t\tmax(transaction_id) id\n\tFROM\n\t\t\"dumps\".\"dev\".\"monthly_service_transaction_totals_by_category\"\n),\nmax_transaction_date AS (\n\tSELECT\n\t\tDATE_TRUNC('day',\n\t\t\tcreated_at) transaction_date\n\tFROM\n\t\tmax_transaction_id\n\tLEFT JOIN \"dumps\".\"dev\".\"transactions\" USING (id)\n)\nSELECT\n  *\nFROM\n  (\n    SELECT\n      'new' AS TABLE_NAME\n    , *\n    FROM\n      (\n        SELECT\n          *\n        FROM\n          \"dumps\".\"dev\".\"finance_monthly_report_rollup\"\n        MINUS\n        SELECT\n          *\n        FROM\n          \"dumps\".\"dev\".\"finance_monthly_report_old\"\n      )\n    UNION ALL\n    SELECT\n      'old' AS TABLE_NAME\n    , *\n    FROM\n      (\n        SELECT\n          *\n        FROM\n          \"dumps\".\"dev\".\"finance_monthly_report_old\"\n        MINUS\n        SELECT\n          *\n        FROM\n          \"dumps\".\"dev\".\"finance_monthly_report_rollup\"\n      )\n  )\nWHERE\n  created_at BETWEEN\n    '2022-06-01'\n    AND\n    (SELECT\ttransaction_date FROM max_transaction_date)\nORDER BY\n  transaction_id\n, TABLE_NAME", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"finance_monthly_discrepancies\""}, "model.drip_data_intelligence.finance_monthly_refunds_full": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "finance_monthly", "finance_monthly_refunds_full"], "unique_id": "model.drip_data_intelligence.finance_monthly_refunds_full", "raw_code": "WITH\n  subscription_plans AS (\n    SELECT\n      id AS subscription_id\n    , plan_id\n    , comped = 't' AS is_comped\n    FROM\n      {{ ref(\"subscriptions\") }}\n  )\nSELECT\n  transaction_id\n, r.subscription_id\n, 'refunded' AS status\n, subscription_plans.plan_id\n, NULL AS transaction_status\n, DATE(r.created_at) AS date_created_at\n, r.created_at :: TIMESTAMP\n, NULL :: NUMERIC AS credits_used\n, r.amount * 0.01 AS gross_amount_in_USD\n, NULL :: NUMERIC AS net_amount_in_USD\n, r.amount * 0.01 AS USD_refunded\n, NULL :: NUMERIC AS credits_remaining\n, r.stripe_charge_id\n, t.category\n, 'stripe' AS transaction_source\n, 'FROM DRIP REFUNDS TABLE' AS memo\n, t.amount - t.credit_used AS total_transaction_amount\nFROM\n  finance.refunds r\n  LEFT JOIN subscription_plans USING (subscription_id)\n  LEFT JOIN {{ ref(\"transactions\") }} t ON t.id = r.transaction_id\nWHERE\n  category != 'sms_monthly_service'", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/finance_monthly/finance_monthly_refunds_full.sql", "original_file_path": "models/alpha/finance_monthly/finance_monthly_refunds_full.sql", "name": "finance_monthly_refunds_full", "alias": "finance_monthly_refunds_full", "checksum": {"name": "sha256", "checksum": "db2220e2827d293b8881a81f30cec8c1bb8067feee2838cc779d81114902a461"}, "tags": [], "refs": [["subscriptions"], ["transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/finance_monthly/finance_monthly_refunds_full.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.146409, "compiled_code": "WITH\n  subscription_plans AS (\n    SELECT\n      id AS subscription_id\n    , plan_id\n    , comped = 't' AS is_comped\n    FROM\n      \"dumps\".\"dev\".\"subscriptions\"\n  )\nSELECT\n  transaction_id\n, r.subscription_id\n, 'refunded' AS status\n, subscription_plans.plan_id\n, NULL AS transaction_status\n, DATE(r.created_at) AS date_created_at\n, r.created_at :: TIMESTAMP\n, NULL :: NUMERIC AS credits_used\n, r.amount * 0.01 AS gross_amount_in_USD\n, NULL :: NUMERIC AS net_amount_in_USD\n, r.amount * 0.01 AS USD_refunded\n, NULL :: NUMERIC AS credits_remaining\n, r.stripe_charge_id\n, t.category\n, 'stripe' AS transaction_source\n, 'FROM DRIP REFUNDS TABLE' AS memo\n, t.amount - t.credit_used AS total_transaction_amount\nFROM\n  finance.refunds r\n  LEFT JOIN subscription_plans USING (subscription_id)\n  LEFT JOIN \"dumps\".\"dev\".\"transactions\" t ON t.id = r.transaction_id\nWHERE\n  category != 'sms_monthly_service'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"finance_monthly_refunds_full\""}, "model.drip_data_intelligence.finance_monthly_report_rollup": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.finance_monthly_report"]}, "config": {"enabled": true, "alias": null, "schema": "alpha", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "finance_monthly", "finance_monthly_report_rollup"], "unique_id": "model.drip_data_intelligence.finance_monthly_report_rollup", "raw_code": "-- This rolls SMS/email monthly subscription transactions back into one row. Allows comparing against old report\nSELECT\n\ttransaction_id,\n\tstripe_charge_id,\n\tsubscription_id,\n\tstatus,\n\tplan_id,\n\tNULL plan_estimate, -- This changes after rollup, so ignore\n\ttransaction_status,\n\tcreated_at,\n\tdate_created_at,\n\tcredits_remaining,\n\ttransaction_source,\n\tmemo,\n\tmin(replace(category, 'sms_', '')) category,\n\tsum(gross_amount_in_usd) gross_amount_in_usd,\n\tsum(credits_used) credits_used,\n\tsum(usd_refunded) usd_refunded\nFROM\n\t{{ ref(\"finance_monthly_report\") }}\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/finance_monthly/finance_monthly_report_rollup.sql", "original_file_path": "models/alpha/finance_monthly/finance_monthly_report_rollup.sql", "name": "finance_monthly_report_rollup", "alias": "finance_monthly_report_rollup", "checksum": {"name": "sha256", "checksum": "125ce914141f9e6b75bbeea49e7fe2ace9b34ba6a52f8c93db52b5f5f63bd8f9"}, "tags": [], "refs": [["finance_monthly_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/finance_monthly/finance_monthly_report_rollup.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "materialized": "table", "schema": "alpha"}, "created_at": 1674498298.149173, "compiled_code": "-- This rolls SMS/email monthly subscription transactions back into one row. Allows comparing against old report\nSELECT\n\ttransaction_id,\n\tstripe_charge_id,\n\tsubscription_id,\n\tstatus,\n\tplan_id,\n\tNULL plan_estimate, -- This changes after rollup, so ignore\n\ttransaction_status,\n\tcreated_at,\n\tdate_created_at,\n\tcredits_remaining,\n\ttransaction_source,\n\tmemo,\n\tmin(replace(category, 'sms_', '')) category,\n\tsum(gross_amount_in_usd) gross_amount_in_usd,\n\tsum(credits_used) credits_used,\n\tsum(usd_refunded) usd_refunded\nFROM\n\t\"dumps\".\"dev\".\"finance_monthly_report\"\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"finance_monthly_report_rollup\""}, "model.drip_data_intelligence.onsite_campaign_totals": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.drip_data_intelligence.full_table_etl.sn_forms"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {"select": ["group product"]}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "onsite", "onsite_campaign_totals"], "unique_id": "model.drip_data_intelligence.onsite_campaign_totals", "raw_code": "SELECT account_id\n    , count(*)                                            onsite_campaigns_total\n    , sum(CASE WHEN status = 'active' THEN 1 ELSE 0 END)  onsite_campaigns_active_current\nFROM {{ source(\"full_table_etl\", \"sn_forms\")}}\nGROUP BY account_id", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "onsite/onsite_campaign_totals.sql", "original_file_path": "models/onsite/onsite_campaign_totals.sql", "name": "onsite_campaign_totals", "alias": "onsite_campaign_totals", "checksum": {"name": "sha256", "checksum": "256b0a05af4fc99e7581b9b625574506e597ecd75e36e8bcb80859063a4e2e7f"}, "tags": [], "refs": [], "sources": [["full_table_etl", "sn_forms"]], "metrics": [], "description": "Counts of onsite campaigns by account", "columns": {"account_id": {"name": "account_id", "description": "Drip account id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "onsite_campaigns_total": {"name": "onsite_campaigns_total", "description": "Total number of campaigns created by account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "onsite_campaigns_active_current": {"name": "onsite_campaigns_active_current", "description": "Currently active campaigns on the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "drip_data_intelligence://models/onsite/onsite.yml", "compiled_path": "./docs/compiled/drip_data_intelligence/models/onsite/onsite_campaign_totals.sql", "build_path": null, "deferred": false, "unrendered_config": {"grants": {"select": ["group product"]}, "schema": "onsite", "materialized": "table"}, "created_at": 1674498298.417061, "compiled_code": "SELECT account_id\n    , count(*)                                            onsite_campaigns_total\n    , sum(CASE WHEN status = 'active' THEN 1 ELSE 0 END)  onsite_campaigns_active_current\nFROM \"dumps\".\"current\".\"sn_forms\"\nGROUP BY account_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"dev\".\"onsite_campaign_totals\""}, "snapshot.drip_data_intelligence.sn_forms_adoption_snapshot": {"compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscription_metrics_current", "model.drip_data_intelligence.account_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "account_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "alpha", "target_database": "dumps", "updated_at": "as_of_date", "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "alpha", "fqn": ["drip_data_intelligence", "alpha", "sn_forms_adoption_snapshot", "sn_forms_adoption_snapshot"], "unique_id": "snapshot.drip_data_intelligence.sn_forms_adoption_snapshot", "raw_code": "\n\n{{\n    config(\n      target_database='dumps',\n      target_schema='alpha',\n      unique_key='account_id',\n\n      strategy='timestamp',\n      updated_at='as_of_date',\n    )\n}}\nwith test_account_blacklist as\n         (\n             select distinct account_id, created_by_drip_employee blacklist\n             from {{ ref(\"subscription_metrics_current\") }}\n                      join {{ ref(\"account_metrics_current\") }} using (subscription_id)\n         ),\n     forms_grain as\n         (\n             select account_id,\n                    id,\n                    status,\n                    max(date_trunc('d',occurred_at)) over ()::date                          as_of_date,\n                    sum(case when action in ('auto_open', 'manual_open') then 1 else 0 end) campaign_views,\n                    sum(case when action in ('submit') then 1 else 0 end)                   campaign_submissions\n             from current.sn_forms sf\n                      left join current.sleeknote_form_events sfe using (account_id, form_id)\n             group by sf.account_id, id, status, date_trunc('d',occurred_at)\n         )\nselect account_id,\n       as_of_date,\n       count(id)                                                                       account_forms_count,\n       sum(case when status = 'active' then 1 else 0 end)                              account_forms_active,\n       sum(campaign_views)                                                             account_forms_views,\n       sum(campaign_submissions)                                                       account_forms_submissions\nfrom forms_grain\n         left join test_account_blacklist using (account_id)\nwhere not blacklist\ngroup by account_id, as_of_date\n  ", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/sn_forms_adoption_snapshot.sql", "original_file_path": "snapshots/alpha/sn_forms_adoption_snapshot.sql", "name": "sn_forms_adoption_snapshot", "alias": "sn_forms_adoption_snapshot", "checksum": {"name": "sha256", "checksum": "1c62322f2110bbbca88930dfcebc300d5733ee9be3815028eba3dd0a463e8a28"}, "tags": [], "refs": [["subscription_metrics_current"], ["account_metrics_current"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "dumps", "target_schema": "alpha", "unique_key": "account_id", "strategy": "timestamp", "updated_at": "as_of_date"}, "created_at": 1674498298.168309, "compiled_code": "\n\n\nwith test_account_blacklist as\n         (\n             select distinct account_id, created_by_drip_employee blacklist\n             from \"dumps\".\"dev\".\"subscription_metrics_current\"\n                      join \"dumps\".\"dev\".\"account_metrics_current\" using (subscription_id)\n         ),\n     forms_grain as\n         (\n             select account_id,\n                    id,\n                    status,\n                    max(date_trunc('d',occurred_at)) over ()::date                          as_of_date,\n                    sum(case when action in ('auto_open', 'manual_open') then 1 else 0 end) campaign_views,\n                    sum(case when action in ('submit') then 1 else 0 end)                   campaign_submissions\n             from current.sn_forms sf\n                      left join current.sleeknote_form_events sfe using (account_id, form_id)\n             group by sf.account_id, id, status, date_trunc('d',occurred_at)\n         )\nselect account_id,\n       as_of_date,\n       count(id)                                                                       account_forms_count,\n       sum(case when status = 'active' then 1 else 0 end)                              account_forms_active,\n       sum(campaign_views)                                                             account_forms_views,\n       sum(campaign_submissions)                                                       account_forms_submissions\nfrom forms_grain\n         left join test_account_blacklist using (account_id)\nwhere not blacklist\ngroup by account_id, as_of_date\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"alpha\".\"sn_forms_adoption_snapshot\""}, "snapshot.drip_data_intelligence.delivery_events_by_email_at_7_days": {"compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.broadcasts", "model.drip_data_intelligence.broadcasts", "model.drip_data_intelligence.delivery_events", "model.drip_data_intelligence.purchases_corrected"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "email_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "alpha", "target_database": "dumps", "updated_at": "as_of_date", "post-hook": [], "pre-hook": []}, "database": "dumps", "schema": "alpha", "fqn": ["drip_data_intelligence", "alpha", "deliveries_by_email_at_7_days", "delivery_events_by_email_at_7_days"], "unique_id": "snapshot.drip_data_intelligence.delivery_events_by_email_at_7_days", "raw_code": "\n\n{{\n    config(\n      target_database='dumps',\n      target_schema='alpha',\n      unique_key='email_id',\n\n      strategy='timestamp',\n      updated_at='as_of_date',\n    )\n}}\n    WITH run_date AS\n        (\n            SELECT max(date_add('d', -7, date_trunc('d', sent_at)))::date run_date\n              FROM {{ ref(\"broadcasts\") }}\n        )\n       , catch_up_date AS\n        (\n            SELECT max(date_trunc('d', as_of_date))::date run_date_catch_up\n              FROM alpha.delivery_events_by_email_at_7_days -- NOTE: not a hard `ref()` (or `source()`) because dbt can't handle that sort of self-reference. We probably need to make a sub-table or something for this model to really fit the snapshot/dbt paradigm\n        )\n       , broadcasts AS\n        (\n            SELECT email_id\n                 , id                             attributed_emailable_id\n                 , sent_at\n                 , date_trunc('d', sent_at)::date as_of_date\n                 , delivery_count\n              FROM {{ ref(\"broadcasts\") }}\n                       JOIN run_date ON TRUE\n                       JOIN catch_up_date ON TRUE\n             WHERE status = 'sent'\n               AND date_trunc('d', sent_at) <= run_date\n               AND date_trunc('d', sent_at) > run_date_catch_up\n               AND delivery_count > 0\n        )\n       , delivery_events AS\n        (\n            SELECT account_id\n                 , email_id\n                 , as_of_date\n                 , sum(CASE WHEN action = 'bounce' THEN 1 ELSE 0 END)      bounces\n                 , sum(CASE WHEN action = 'click' THEN 1 ELSE 0 END)       clicks\n                 , sum(CASE WHEN action = 'deliver' THEN 1 ELSE 0 END)     deliveries\n                 , sum(CASE WHEN action = 'deferral' THEN 1 ELSE 0 END)    deferrals\n                 , sum(CASE WHEN action = 'drop' THEN 1 ELSE 0 END)        drops\n                 , sum(CASE WHEN action = 'soft_bounce' THEN 1 ELSE 0 END) soft_bounces\n              FROM {{ ref(\"delivery_events\") }}\n                       JOIN broadcasts USING (email_id)\n             where date_diff('d', sent_at, occurred_at) <= 7\n             GROUP BY account_id, email_id, as_of_date\n        )\n       , attributed_purchases AS\n        (\n            SELECT account_id\n                 , email_id\n                 , sum(amount) attributed_purchase_amount\n                 , count(*)    attributed_purchase_count\n              FROM {{ ref(\"purchases_corrected\") }}\n                       JOIN broadcasts USING (attributed_emailable_id)\n             WHERE canceled_at IS NULL\n             GROUP BY account_id, email_id\n        )\n  SELECT account_id\n       , email_id\n       , as_of_date\n       , deliveries\n       , bounces\n       , bounces::real / deliveries::real                   bounce_rate\n       , clicks\n       , clicks::real / deliveries::real                    click_rate\n       , deferrals\n       , deferrals::real / deliveries::real                 deferral_rate\n       , drops\n       , drops::real / deliveries::real                     drop_rate\n       , soft_bounces\n       , soft_bounces::real / deliveries::real              soft_bounce_rate\n       , attributed_purchase_amount\n       , attributed_purchase_count\n       , attributed_purchase_count::real / deliveries::real attributed_purchase_rate\n    FROM delivery_events\n             LEFT JOIN attributed_purchases USING (account_id, email_id)\n   WHERE deliveries > 0\n     ", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/deliveries_by_email_at_7_days.sql", "original_file_path": "snapshots/alpha/deliveries_by_email_at_7_days.sql", "name": "delivery_events_by_email_at_7_days", "alias": "delivery_events_by_email_at_7_days", "checksum": {"name": "sha256", "checksum": "979e78b13088910ad1e4c969defe1d6f818b51f622c8eb8077ea6165403fd4eb"}, "tags": [], "refs": [["broadcasts"], ["broadcasts"], ["delivery_events"], ["purchases_corrected"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "dumps", "target_schema": "alpha", "unique_key": "email_id", "strategy": "timestamp", "updated_at": "as_of_date"}, "created_at": 1674498298.1791182, "compiled_code": "\n\n\n    WITH run_date AS\n        (\n            SELECT max(date_add('d', -7, date_trunc('d', sent_at)))::date run_date\n              FROM \"dumps\".\"dev\".\"broadcasts\"\n        )\n       , catch_up_date AS\n        (\n            SELECT max(date_trunc('d', as_of_date))::date run_date_catch_up\n              FROM alpha.delivery_events_by_email_at_7_days -- NOTE: not a hard `ref()` (or `source()`) because dbt can't handle that sort of self-reference. We probably need to make a sub-table or something for this model to really fit the snapshot/dbt paradigm\n        )\n       , broadcasts AS\n        (\n            SELECT email_id\n                 , id                             attributed_emailable_id\n                 , sent_at\n                 , date_trunc('d', sent_at)::date as_of_date\n                 , delivery_count\n              FROM \"dumps\".\"dev\".\"broadcasts\"\n                       JOIN run_date ON TRUE\n                       JOIN catch_up_date ON TRUE\n             WHERE status = 'sent'\n               AND date_trunc('d', sent_at) <= run_date\n               AND date_trunc('d', sent_at) > run_date_catch_up\n               AND delivery_count > 0\n        )\n       , delivery_events AS\n        (\n            SELECT account_id\n                 , email_id\n                 , as_of_date\n                 , sum(CASE WHEN action = 'bounce' THEN 1 ELSE 0 END)      bounces\n                 , sum(CASE WHEN action = 'click' THEN 1 ELSE 0 END)       clicks\n                 , sum(CASE WHEN action = 'deliver' THEN 1 ELSE 0 END)     deliveries\n                 , sum(CASE WHEN action = 'deferral' THEN 1 ELSE 0 END)    deferrals\n                 , sum(CASE WHEN action = 'drop' THEN 1 ELSE 0 END)        drops\n                 , sum(CASE WHEN action = 'soft_bounce' THEN 1 ELSE 0 END) soft_bounces\n              FROM \"dumps\".\"dev\".\"delivery_events\"\n                       JOIN broadcasts USING (email_id)\n             where date_diff('d', sent_at, occurred_at) <= 7\n             GROUP BY account_id, email_id, as_of_date\n        )\n       , attributed_purchases AS\n        (\n            SELECT account_id\n                 , email_id\n                 , sum(amount) attributed_purchase_amount\n                 , count(*)    attributed_purchase_count\n              FROM \"dumps\".\"dev\".\"purchases_corrected\"\n                       JOIN broadcasts USING (attributed_emailable_id)\n             WHERE canceled_at IS NULL\n             GROUP BY account_id, email_id\n        )\n  SELECT account_id\n       , email_id\n       , as_of_date\n       , deliveries\n       , bounces\n       , bounces::real / deliveries::real                   bounce_rate\n       , clicks\n       , clicks::real / deliveries::real                    click_rate\n       , deferrals\n       , deferrals::real / deliveries::real                 deferral_rate\n       , drops\n       , drops::real / deliveries::real                     drop_rate\n       , soft_bounces\n       , soft_bounces::real / deliveries::real              soft_bounce_rate\n       , attributed_purchase_amount\n       , attributed_purchase_count\n       , attributed_purchase_count::real / deliveries::real attributed_purchase_rate\n    FROM delivery_events\n             LEFT JOIN attributed_purchases USING (account_id, email_id)\n   WHERE deliveries > 0\n     ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dumps\".\"alpha\".\"delivery_events_by_email_at_7_days\""}, "test.drip_data_intelligence.subscription_metrics_current_all_rows": {"compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.drip_data_intelligence.subscription_id", "model.drip_data_intelligence.subscription_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "subscription_metrics_current_all_rows"], "unique_id": "test.drip_data_intelligence.subscription_metrics_current_all_rows", "raw_code": "SELECT s.subscription_id\nFROM {{ref('subscription_id')}} s\n         LEFT JOIN {{ref('subscription_metrics_current')}} smc USING (subscription_id)\nWHERE smc.subscription_id IS NULL", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "alpha/subscription_metrics_current_all_rows.sql", "original_file_path": "tests/alpha/subscription_metrics_current_all_rows.sql", "name": "subscription_metrics_current_all_rows", "alias": "subscription_metrics_current_all_rows", "checksum": {"name": "sha256", "checksum": "173f2b95a57e78bea44191c0597dd9e9087c30be7ed489d654a4718bc150d179"}, "tags": [], "refs": [["subscription_id"], ["subscription_metrics_current"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/tests/alpha/subscription_metrics_current_all_rows.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.197356, "compiled_code": "SELECT s.subscription_id\nFROM \"dumps\".\"dev\".\"subscription_id\" s\n         LEFT JOIN \"dumps\".\"dev\".\"subscription_metrics_current\" smc USING (subscription_id)\nWHERE smc.subscription_id IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.drip_data_intelligence.unique_subscriptions_id.03e6d0c90c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('subscriptions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_subscriptions_id"], "unique_id": "test.drip_data_intelligence.unique_subscriptions_id.03e6d0c90c", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_subscriptions_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_subscriptions_id", "alias": "unique_subscriptions_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_subscriptions_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.32605, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"subscriptions\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.subscriptions"}, "test.drip_data_intelligence.not_null_subscriptions_id.56827336e3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('subscriptions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_subscriptions_id"], "unique_id": "test.drip_data_intelligence.not_null_subscriptions_id.56827336e3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_subscriptions_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_subscriptions_id", "alias": "not_null_subscriptions_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_subscriptions_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.328011, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"subscriptions\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.subscriptions"}, "test.drip_data_intelligence.not_null_subscriptions_created_at.7462c715ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('subscriptions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.subscriptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_subscriptions_created_at"], "unique_id": "test.drip_data_intelligence.not_null_subscriptions_created_at.7462c715ab", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_subscriptions_created_at.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_subscriptions_created_at", "alias": "not_null_subscriptions_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["subscriptions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_subscriptions_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.329668, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom \"dumps\".\"dev\".\"subscriptions\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.subscriptions"}, "test.drip_data_intelligence.unique_accounts_id.ce4d3187e0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_accounts_id"], "unique_id": "test.drip_data_intelligence.unique_accounts_id.ce4d3187e0", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_accounts_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_accounts_id", "alias": "unique_accounts_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_accounts_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.331367, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"accounts\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.accounts"}, "test.drip_data_intelligence.not_null_accounts_id.521ffc790d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_accounts_id"], "unique_id": "test.drip_data_intelligence.not_null_accounts_id.521ffc790d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_accounts_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_accounts_id", "alias": "not_null_accounts_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_accounts_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.333077, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"accounts\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.accounts"}, "test.drip_data_intelligence.not_null_accounts_subscription_id.78236922b7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_accounts_subscription_id"], "unique_id": "test.drip_data_intelligence.not_null_accounts_subscription_id.78236922b7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_accounts_subscription_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_accounts_subscription_id", "alias": "not_null_accounts_subscription_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_accounts_subscription_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.3349152, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"dumps\".\"dev\".\"accounts\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "models.accounts"}, "test.drip_data_intelligence.unique_users_id.ec952d9777": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_users_id"], "unique_id": "test.drip_data_intelligence.unique_users_id.ec952d9777", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_users_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_users_id", "alias": "unique_users_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_users_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.336788, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"users\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.users"}, "test.drip_data_intelligence.not_null_users_id.4db5ed5c63": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_users_id"], "unique_id": "test.drip_data_intelligence.not_null_users_id.4db5ed5c63", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_users_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_users_id", "alias": "not_null_users_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_users_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.338593, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"users\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.users"}, "test.drip_data_intelligence.not_null_users_email.f0068076e4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_users_email"], "unique_id": "test.drip_data_intelligence.not_null_users_email.f0068076e4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_users_email.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_users_email", "alias": "not_null_users_email", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_users_email.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.340231, "compiled_code": "\n    \n    \n\n\n\nselect email\nfrom \"dumps\".\"dev\".\"users\"\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email", "file_key_name": "models.users"}, "test.drip_data_intelligence.unique_account_events_id.34b699cca8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('account_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.account_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_account_events_id"], "unique_id": "test.drip_data_intelligence.unique_account_events_id.34b699cca8", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_account_events_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_account_events_id", "alias": "unique_account_events_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["account_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_account_events_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.3418822, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"account_events\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.account_events"}, "test.drip_data_intelligence.not_null_account_events_id.8abdf520c6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('account_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.account_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_account_events_id"], "unique_id": "test.drip_data_intelligence.not_null_account_events_id.8abdf520c6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_account_events_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_account_events_id", "alias": "not_null_account_events_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["account_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_account_events_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.3435872, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"account_events\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.account_events"}, "test.drip_data_intelligence.not_null_account_events_account_id.a49868ae22": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('account_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.account_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_account_events_account_id"], "unique_id": "test.drip_data_intelligence.not_null_account_events_account_id.a49868ae22", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_account_events_account_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_account_events_account_id", "alias": "not_null_account_events_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["account_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_account_events_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.345653, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"dumps\".\"dev\".\"account_events\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.account_events"}, "test.drip_data_intelligence.unique_transactions_id.684003eda7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_transactions_id"], "unique_id": "test.drip_data_intelligence.unique_transactions_id.684003eda7", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_transactions_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_transactions_id", "alias": "unique_transactions_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_transactions_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.347286, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"transactions\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.transactions"}, "test.drip_data_intelligence.not_null_transactions_id.6462b524d8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_transactions_id"], "unique_id": "test.drip_data_intelligence.not_null_transactions_id.6462b524d8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_transactions_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_transactions_id", "alias": "not_null_transactions_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_transactions_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.3489149, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"transactions\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.transactions"}, "test.drip_data_intelligence.not_null_transactions_subscription_id.bfc061815b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_transactions_subscription_id"], "unique_id": "test.drip_data_intelligence.not_null_transactions_subscription_id.bfc061815b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_transactions_subscription_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_transactions_subscription_id", "alias": "not_null_transactions_subscription_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_transactions_subscription_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.350555, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"dumps\".\"dev\".\"transactions\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "models.transactions"}, "test.drip_data_intelligence.unique_forms_id.cbc3b08181": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('forms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.forms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_forms_id"], "unique_id": "test.drip_data_intelligence.unique_forms_id.cbc3b08181", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_forms_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_forms_id", "alias": "unique_forms_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["forms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_forms_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.352442, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"forms\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.forms"}, "test.drip_data_intelligence.not_null_forms_id.226b7696d6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('forms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.forms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_forms_id"], "unique_id": "test.drip_data_intelligence.not_null_forms_id.226b7696d6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_forms_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_forms_id", "alias": "not_null_forms_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["forms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_forms_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.354074, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"forms\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.forms"}, "test.drip_data_intelligence.unique_workflows_id.6b2033703e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('workflows')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.workflows"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_workflows_id"], "unique_id": "test.drip_data_intelligence.unique_workflows_id.6b2033703e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_workflows_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_workflows_id", "alias": "unique_workflows_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["workflows"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_workflows_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.355953, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"workflows\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.workflows"}, "test.drip_data_intelligence.not_null_workflows_id.b155a0a179": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('workflows')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.workflows"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_workflows_id"], "unique_id": "test.drip_data_intelligence.not_null_workflows_id.b155a0a179", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_workflows_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_workflows_id", "alias": "not_null_workflows_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["workflows"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_workflows_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.3576262, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"workflows\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.workflows"}, "test.drip_data_intelligence.unique_automation_emails_id.3d9d204e81": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('automation_emails')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.automation_emails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_automation_emails_id"], "unique_id": "test.drip_data_intelligence.unique_automation_emails_id.3d9d204e81", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_automation_emails_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_automation_emails_id", "alias": "unique_automation_emails_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["automation_emails"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_automation_emails_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.359288, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"automation_emails\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.automation_emails"}, "test.drip_data_intelligence.not_null_automation_emails_id.53164739f9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('automation_emails')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.automation_emails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_automation_emails_id"], "unique_id": "test.drip_data_intelligence.not_null_automation_emails_id.53164739f9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_automation_emails_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_automation_emails_id", "alias": "not_null_automation_emails_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["automation_emails"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_automation_emails_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.361173, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"automation_emails\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.automation_emails"}, "test.drip_data_intelligence.unique_broadcasts_id.038d4c0591": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('broadcasts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.broadcasts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_broadcasts_id"], "unique_id": "test.drip_data_intelligence.unique_broadcasts_id.038d4c0591", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_broadcasts_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_broadcasts_id", "alias": "unique_broadcasts_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["broadcasts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_broadcasts_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.362827, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"broadcasts\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.broadcasts"}, "test.drip_data_intelligence.not_null_broadcasts_id.cf66366499": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('broadcasts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.broadcasts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_broadcasts_id"], "unique_id": "test.drip_data_intelligence.not_null_broadcasts_id.cf66366499", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_broadcasts_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_broadcasts_id", "alias": "not_null_broadcasts_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["broadcasts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_broadcasts_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.364618, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"broadcasts\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.broadcasts"}, "test.drip_data_intelligence.unique_purchases_id.d4642fbd37": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_purchases_id"], "unique_id": "test.drip_data_intelligence.unique_purchases_id.d4642fbd37", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_purchases_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_purchases_id", "alias": "unique_purchases_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_purchases_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.366343, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"purchases\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.purchases"}, "test.drip_data_intelligence.not_null_purchases_id.2c6aea8f54": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_purchases_id"], "unique_id": "test.drip_data_intelligence.not_null_purchases_id.2c6aea8f54", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_purchases_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_purchases_id", "alias": "not_null_purchases_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_purchases_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.368261, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"purchases\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.purchases"}, "test.drip_data_intelligence.unique_invoices_id.53ab04bd4a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('invoices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.invoices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_invoices_id"], "unique_id": "test.drip_data_intelligence.unique_invoices_id.53ab04bd4a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_invoices_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_invoices_id", "alias": "unique_invoices_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["invoices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_invoices_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.369925, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"invoices\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.invoices"}, "test.drip_data_intelligence.not_null_invoices_id.f86c186a49": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('invoices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.invoices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_invoices_id"], "unique_id": "test.drip_data_intelligence.not_null_invoices_id.f86c186a49", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_invoices_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_invoices_id", "alias": "not_null_invoices_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["invoices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_invoices_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.3717701, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"invoices\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.invoices"}, "test.drip_data_intelligence.unique_invoice_items_id.b24044a75d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('invoice_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.invoice_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "unique_invoice_items_id"], "unique_id": "test.drip_data_intelligence.unique_invoice_items_id.b24044a75d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_invoice_items_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "unique_invoice_items_id", "alias": "unique_invoice_items_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["invoice_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/unique_invoice_items_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.373617, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"invoice_items\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.invoice_items"}, "test.drip_data_intelligence.not_null_invoice_items_id.f6d1aaa50a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('invoice_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.invoice_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "monolith", "not_null_invoice_items_id"], "unique_id": "test.drip_data_intelligence.not_null_invoice_items_id.f6d1aaa50a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_invoice_items_id.sql", "original_file_path": "models/monolith/monolith.yml", "name": "not_null_invoice_items_id", "alias": "not_null_invoice_items_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["invoice_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/monolith/monolith.yml/not_null_invoice_items_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.3753102, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dumps\".\"dev\".\"invoice_items\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.invoice_items"}, "test.drip_data_intelligence.unique_segment_groups_account_public_id.891e5e90cc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "account_public_id", "model": "{{ get_where_subquery(ref('segment_groups')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.segment_groups"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "unique_segment_groups_account_public_id"], "unique_id": "test.drip_data_intelligence.unique_segment_groups_account_public_id.891e5e90cc", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_segment_groups_account_public_id.sql", "original_file_path": "models/segment/segment.yml", "name": "unique_segment_groups_account_public_id", "alias": "unique_segment_groups_account_public_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["segment_groups"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment.yml/unique_segment_groups_account_public_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.381547, "compiled_code": "\n    \n    \n\nselect\n    account_public_id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"segment_groups\"\nwhere account_public_id is not null\ngroup by account_public_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_public_id", "file_key_name": "models.segment_groups"}, "test.drip_data_intelligence.not_null_segment_groups_account_public_id.b262fae539": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_public_id", "model": "{{ get_where_subquery(ref('segment_groups')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.segment_groups"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "not_null_segment_groups_account_public_id"], "unique_id": "test.drip_data_intelligence.not_null_segment_groups_account_public_id.b262fae539", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_segment_groups_account_public_id.sql", "original_file_path": "models/segment/segment.yml", "name": "not_null_segment_groups_account_public_id", "alias": "not_null_segment_groups_account_public_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["segment_groups"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment.yml/not_null_segment_groups_account_public_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.383256, "compiled_code": "\n    \n    \n\n\n\nselect account_public_id\nfrom \"dumps\".\"dev\".\"segment_groups\"\nwhere account_public_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_public_id", "file_key_name": "models.segment_groups"}, "test.drip_data_intelligence.not_null_segment_groups_subscription_public_id.466e7d62b0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_public_id", "model": "{{ get_where_subquery(ref('segment_groups')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.segment_groups"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "not_null_segment_groups_subscription_public_id"], "unique_id": "test.drip_data_intelligence.not_null_segment_groups_subscription_public_id.466e7d62b0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_segment_groups_subscription_public_id.sql", "original_file_path": "models/segment/segment.yml", "name": "not_null_segment_groups_subscription_public_id", "alias": "not_null_segment_groups_subscription_public_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["segment_groups"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment.yml/not_null_segment_groups_subscription_public_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.3851452, "compiled_code": "\n    \n    \n\n\n\nselect subscription_public_id\nfrom \"dumps\".\"dev\".\"segment_groups\"\nwhere subscription_public_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_public_id", "file_key_name": "models.segment_groups"}, "test.drip_data_intelligence.unique_segment_users_user_public_id.b1b772c05d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_public_id", "model": "{{ get_where_subquery(ref('segment_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.segment_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "unique_segment_users_user_public_id"], "unique_id": "test.drip_data_intelligence.unique_segment_users_user_public_id.b1b772c05d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_segment_users_user_public_id.sql", "original_file_path": "models/segment/segment.yml", "name": "unique_segment_users_user_public_id", "alias": "unique_segment_users_user_public_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["segment_users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment.yml/unique_segment_users_user_public_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.38677, "compiled_code": "\n    \n    \n\nselect\n    user_public_id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"segment_users\"\nwhere user_public_id is not null\ngroup by user_public_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_public_id", "file_key_name": "models.segment_users"}, "test.drip_data_intelligence.not_null_segment_users_user_public_id.6aceac260d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_public_id", "model": "{{ get_where_subquery(ref('segment_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.segment_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "not_null_segment_users_user_public_id"], "unique_id": "test.drip_data_intelligence.not_null_segment_users_user_public_id.6aceac260d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_segment_users_user_public_id.sql", "original_file_path": "models/segment/segment.yml", "name": "not_null_segment_users_user_public_id", "alias": "not_null_segment_users_user_public_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["segment_users"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment.yml/not_null_segment_users_user_public_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.388376, "compiled_code": "\n    \n    \n\n\n\nselect user_public_id\nfrom \"dumps\".\"dev\".\"segment_users\"\nwhere user_public_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_public_id", "file_key_name": "models.segment_users"}, "test.drip_data_intelligence.not_null_segment_user_group_mapping_user_public_id.2884a2749c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_public_id", "model": "{{ get_where_subquery(ref('segment_user_group_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.segment_user_group_mapping"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "not_null_segment_user_group_mapping_user_public_id"], "unique_id": "test.drip_data_intelligence.not_null_segment_user_group_mapping_user_public_id.2884a2749c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_segment_user_group_mapping_user_public_id.sql", "original_file_path": "models/segment/segment.yml", "name": "not_null_segment_user_group_mapping_user_public_id", "alias": "not_null_segment_user_group_mapping_user_public_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["segment_user_group_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment.yml/not_null_segment_user_group_mapping_user_public_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.390028, "compiled_code": "\n    \n    \n\n\n\nselect user_public_id\nfrom \"dumps\".\"dev\".\"segment_user_group_mapping\"\nwhere user_public_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_public_id", "file_key_name": "models.segment_user_group_mapping"}, "test.drip_data_intelligence.not_null_segment_user_group_mapping_account_public_id.a636092582": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_public_id", "model": "{{ get_where_subquery(ref('segment_user_group_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.segment_user_group_mapping"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "segment", "not_null_segment_user_group_mapping_account_public_id"], "unique_id": "test.drip_data_intelligence.not_null_segment_user_group_mapping_account_public_id.a636092582", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_segment_user_group_mapping_account_public_id.sql", "original_file_path": "models/segment/segment.yml", "name": "not_null_segment_user_group_mapping_account_public_id", "alias": "not_null_segment_user_group_mapping_account_public_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["segment_user_group_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/segment/segment.yml/not_null_segment_user_group_mapping_account_public_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.391809, "compiled_code": "\n    \n    \n\n\n\nselect account_public_id\nfrom \"dumps\".\"dev\".\"segment_user_group_mapping\"\nwhere account_public_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_public_id", "file_key_name": "models.segment_user_group_mapping"}, "test.drip_data_intelligence.unique_account_dimensions_account_public_id.929bd9194f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "account_public_id", "model": "{{ get_where_subquery(ref('account_dimensions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.account_dimensions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "legacy", "unique_account_dimensions_account_public_id"], "unique_id": "test.drip_data_intelligence.unique_account_dimensions_account_public_id.929bd9194f", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_account_dimensions_account_public_id.sql", "original_file_path": "models/legacy/legacy.yml", "name": "unique_account_dimensions_account_public_id", "alias": "unique_account_dimensions_account_public_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["account_dimensions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/legacy/legacy.yml/unique_account_dimensions_account_public_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.3951738, "compiled_code": "\n    \n    \n\nselect\n    account_public_id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"account_dimensions\"\nwhere account_public_id is not null\ngroup by account_public_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_public_id", "file_key_name": "models.account_dimensions"}, "test.drip_data_intelligence.not_null_account_dimensions_account_public_id.5808828b1b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_public_id", "model": "{{ get_where_subquery(ref('account_dimensions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.account_dimensions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "legacy", "not_null_account_dimensions_account_public_id"], "unique_id": "test.drip_data_intelligence.not_null_account_dimensions_account_public_id.5808828b1b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_account_dimensions_account_public_id.sql", "original_file_path": "models/legacy/legacy.yml", "name": "not_null_account_dimensions_account_public_id", "alias": "not_null_account_dimensions_account_public_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["account_dimensions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/legacy/legacy.yml/not_null_account_dimensions_account_public_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.396799, "compiled_code": "\n    \n    \n\n\n\nselect account_public_id\nfrom \"dumps\".\"dev\".\"account_dimensions\"\nwhere account_public_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_public_id", "file_key_name": "models.account_dimensions"}, "test.drip_data_intelligence.not_null_customer_mrr_changed_action.bcf260f120": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "action", "model": "{{ get_where_subquery(ref('customer_mrr_changed')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.customer_mrr_changed"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "events", "not_null_customer_mrr_changed_action"], "unique_id": "test.drip_data_intelligence.not_null_customer_mrr_changed_action.bcf260f120", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_customer_mrr_changed_action.sql", "original_file_path": "models/events/events.yml", "name": "not_null_customer_mrr_changed_action", "alias": "not_null_customer_mrr_changed_action", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customer_mrr_changed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/events/events.yml/not_null_customer_mrr_changed_action.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.408871, "compiled_code": "\n    \n    \n\n\n\nselect action\nfrom \"dumps\".\"dev\".\"customer_mrr_changed\"\nwhere action is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "action", "file_key_name": "models.customer_mrr_changed"}, "test.drip_data_intelligence.unique_subscription_metrics_current_subscription_id.3beee15e61": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('subscription_metrics_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.subscription_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "unique_subscription_metrics_current_subscription_id"], "unique_id": "test.drip_data_intelligence.unique_subscription_metrics_current_subscription_id.3beee15e61", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_subscription_metrics_current_subscription_id.sql", "original_file_path": "models/alpha/alpha.yml", "name": "unique_subscription_metrics_current_subscription_id", "alias": "unique_subscription_metrics_current_subscription_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["subscription_metrics_current"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/alpha.yml/unique_subscription_metrics_current_subscription_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.412676, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"subscription_metrics_current\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "models.subscription_metrics_current"}, "test.drip_data_intelligence.not_null_subscription_metrics_current_subscription_id.28de3d7385": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('subscription_metrics_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.subscription_metrics_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "alpha", "not_null_subscription_metrics_current_subscription_id"], "unique_id": "test.drip_data_intelligence.not_null_subscription_metrics_current_subscription_id.28de3d7385", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_subscription_metrics_current_subscription_id.sql", "original_file_path": "models/alpha/alpha.yml", "name": "not_null_subscription_metrics_current_subscription_id", "alias": "not_null_subscription_metrics_current_subscription_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["subscription_metrics_current"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/alpha/alpha.yml/not_null_subscription_metrics_current_subscription_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.414504, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"dumps\".\"dev\".\"subscription_metrics_current\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "models.subscription_metrics_current"}, "test.drip_data_intelligence.unique_onsite_campaign_totals_account_id.8fd1f0b508": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('onsite_campaign_totals')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.onsite_campaign_totals"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "onsite", "unique_onsite_campaign_totals_account_id"], "unique_id": "test.drip_data_intelligence.unique_onsite_campaign_totals_account_id.8fd1f0b508", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "unique_onsite_campaign_totals_account_id.sql", "original_file_path": "models/onsite/onsite.yml", "name": "unique_onsite_campaign_totals_account_id", "alias": "unique_onsite_campaign_totals_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_campaign_totals"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/onsite/onsite.yml/unique_onsite_campaign_totals_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.418164, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"dev\".\"onsite_campaign_totals\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.onsite_campaign_totals"}, "test.drip_data_intelligence.not_null_onsite_campaign_totals_account_id.628bc9214f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('onsite_campaign_totals')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.drip_data_intelligence.onsite_campaign_totals"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "onsite", "not_null_onsite_campaign_totals_account_id"], "unique_id": "test.drip_data_intelligence.not_null_onsite_campaign_totals_account_id.628bc9214f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "not_null_onsite_campaign_totals_account_id.sql", "original_file_path": "models/onsite/onsite.yml", "name": "not_null_onsite_campaign_totals_account_id", "alias": "not_null_onsite_campaign_totals_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_campaign_totals"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/onsite/onsite.yml/not_null_onsite_campaign_totals_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.4197881, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"dumps\".\"dev\".\"onsite_campaign_totals\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.onsite_campaign_totals"}, "test.drip_data_intelligence.source_unique_current_subscription_details_subscription_id.959a3beee6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(source('current', 'subscription_details')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.drip_data_intelligence.current.subscription_details"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "source_unique_current_subscription_details_subscription_id"], "unique_id": "test.drip_data_intelligence.source_unique_current_subscription_details_subscription_id.959a3beee6", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "source_unique_current_subscription_details_subscription_id.sql", "original_file_path": "models/sources.yml", "name": "source_unique_current_subscription_details_subscription_id", "alias": "source_unique_current_subscription_details_subscription_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/sources.yml/source_unique_current_subscription_details_subscription_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.4277241, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"current\".\"subscription_details\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "sources.current"}, "test.drip_data_intelligence.source_not_null_current_subscription_details_subscription_id.17456a7ee2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(source('current', 'subscription_details')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.drip_data_intelligence.current.subscription_details"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "source_not_null_current_subscription_details_subscription_id"], "unique_id": "test.drip_data_intelligence.source_not_null_current_subscription_details_subscription_id.17456a7ee2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "source_not_null_current_subscription_details_subscription_id.sql", "original_file_path": "models/sources.yml", "name": "source_not_null_current_subscription_details_subscription_id", "alias": "source_not_null_current_subscription_details_subscription_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/sources.yml/source_not_null_current_subscription_details_subscription_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674498298.4294431, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"dumps\".\"current\".\"subscription_details\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "sources.current"}, "test.drip_data_intelligence.source_relationships_current_subscription_details_subscription_id__id__source_full_table_etl_subscriptions_.f111c3c56a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('full_table_etl', 'subscriptions')", "field": "id", "column_name": "subscription_id", "model": "{{ get_where_subquery(source('current', 'subscription_details')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.drip_data_intelligence.full_table_etl.subscriptions", "source.drip_data_intelligence.current.subscription_details"]}, "config": {"enabled": true, "alias": "source_relationships_current_s_018d67f12d3a45641d621a18c2aae668", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "source_relationships_current_subscription_details_subscription_id__id__source_full_table_etl_subscriptions_"], "unique_id": "test.drip_data_intelligence.source_relationships_current_subscription_details_subscription_id__id__source_full_table_etl_subscriptions_.f111c3c56a", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_current_s_018d67f12d3a45641d621a18c2aae668\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "source_relationships_current_s_018d67f12d3a45641d621a18c2aae668.sql", "original_file_path": "models/sources.yml", "name": "source_relationships_current_subscription_details_subscription_id__id__source_full_table_etl_subscriptions_", "alias": "source_relationships_current_s_018d67f12d3a45641d621a18c2aae668", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["full_table_etl", "subscriptions"], ["current", "subscription_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/sources.yml/source_relationships_current_s_018d67f12d3a45641d621a18c2aae668.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_current_s_018d67f12d3a45641d621a18c2aae668"}, "created_at": 1674498298.431221, "compiled_code": "\n    \n    \n\nwith child as (\n    select subscription_id as from_field\n    from \"dumps\".\"current\".\"subscription_details\"\n    where subscription_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"dumps\".\"current\".\"subscriptions\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "sources.current"}, "test.drip_data_intelligence.source_unique_full_table_etl_subscription_billing_attributes_subscription_id.37e379903a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(source('full_table_etl', 'subscription_billing_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.drip_data_intelligence.full_table_etl.subscription_billing_attributes"]}, "config": {"enabled": true, "alias": "source_unique_full_table_etl_s_35a23f334cf0a361f2c5359f4c3a19a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "source_unique_full_table_etl_subscription_billing_attributes_subscription_id"], "unique_id": "test.drip_data_intelligence.source_unique_full_table_etl_subscription_billing_attributes_subscription_id.37e379903a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_full_table_etl_s_35a23f334cf0a361f2c5359f4c3a19a2\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "source_unique_full_table_etl_s_35a23f334cf0a361f2c5359f4c3a19a2.sql", "original_file_path": "models/sources.yml", "name": "source_unique_full_table_etl_subscription_billing_attributes_subscription_id", "alias": "source_unique_full_table_etl_s_35a23f334cf0a361f2c5359f4c3a19a2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["full_table_etl", "subscription_billing_attributes"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/sources.yml/source_unique_full_table_etl_s_35a23f334cf0a361f2c5359f4c3a19a2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_full_table_etl_s_35a23f334cf0a361f2c5359f4c3a19a2"}, "created_at": 1674498298.4456131, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"dumps\".\"current\".\"subscription_billing_attributes\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "sources.full_table_etl"}, "test.drip_data_intelligence.source_not_null_full_table_etl_subscription_billing_attributes_subscription_id.0a3672935c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(source('full_table_etl', 'subscription_billing_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.drip_data_intelligence.full_table_etl.subscription_billing_attributes"]}, "config": {"enabled": true, "alias": "source_not_null_full_table_etl_728f623ab7d8d90fb84577a206ff6062", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "source_not_null_full_table_etl_subscription_billing_attributes_subscription_id"], "unique_id": "test.drip_data_intelligence.source_not_null_full_table_etl_subscription_billing_attributes_subscription_id.0a3672935c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_full_table_etl_728f623ab7d8d90fb84577a206ff6062\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "source_not_null_full_table_etl_728f623ab7d8d90fb84577a206ff6062.sql", "original_file_path": "models/sources.yml", "name": "source_not_null_full_table_etl_subscription_billing_attributes_subscription_id", "alias": "source_not_null_full_table_etl_728f623ab7d8d90fb84577a206ff6062", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["full_table_etl", "subscription_billing_attributes"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/sources.yml/source_not_null_full_table_etl_728f623ab7d8d90fb84577a206ff6062.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_full_table_etl_728f623ab7d8d90fb84577a206ff6062"}, "created_at": 1674498298.447467, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"dumps\".\"current\".\"subscription_billing_attributes\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "sources.full_table_etl"}, "test.drip_data_intelligence.source_relationships_full_table_etl_subscription_billing_attributes_subscription_id__id__source_full_table_etl_subscriptions_.9a47ec55a5": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('full_table_etl', 'subscriptions')", "field": "id", "column_name": "subscription_id", "model": "{{ get_where_subquery(source('full_table_etl', 'subscription_billing_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.drip_data_intelligence.full_table_etl.subscriptions", "source.drip_data_intelligence.full_table_etl.subscription_billing_attributes"]}, "config": {"enabled": true, "alias": "source_relationships_full_tabl_1f4e0c18cfb17238fbd6f25a4b45fc2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dumps", "schema": "dev", "fqn": ["drip_data_intelligence", "source_relationships_full_table_etl_subscription_billing_attributes_subscription_id__id__source_full_table_etl_subscriptions_"], "unique_id": "test.drip_data_intelligence.source_relationships_full_table_etl_subscription_billing_attributes_subscription_id__id__source_full_table_etl_subscriptions_.9a47ec55a5", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_full_tabl_1f4e0c18cfb17238fbd6f25a4b45fc2a\") }}", "language": "sql", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "source_relationships_full_tabl_1f4e0c18cfb17238fbd6f25a4b45fc2a.sql", "original_file_path": "models/sources.yml", "name": "source_relationships_full_table_etl_subscription_billing_attributes_subscription_id__id__source_full_table_etl_subscriptions_", "alias": "source_relationships_full_tabl_1f4e0c18cfb17238fbd6f25a4b45fc2a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["full_table_etl", "subscriptions"], ["full_table_etl", "subscription_billing_attributes"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "./docs/compiled/drip_data_intelligence/models/sources.yml/source_relationships_full_tabl_1f4e0c18cfb17238fbd6f25a4b45fc2a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_full_tabl_1f4e0c18cfb17238fbd6f25a4b45fc2a"}, "created_at": 1674498298.4492118, "compiled_code": "\n    \n    \n\nwith child as (\n    select subscription_id as from_field\n    from \"dumps\".\"current\".\"subscription_billing_attributes\"\n    where subscription_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"dumps\".\"current\".\"subscriptions\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "sources.full_table_etl"}}, "sources": {"source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date": {"fqn": ["drip_data_intelligence", "alpha_not_owned_by_dbt", "dim_date"], "database": "dumps", "schema": "alpha", "unique_id": "source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "dim_date", "source_name": "alpha_not_owned_by_dbt", "source_description": "", "loader": "", "identifier": "dim_date", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"alpha\".\"dim_date\"", "created_at": 1674498298.421037}, "source.drip_data_intelligence.alpha_not_owned_by_dbt.historical_currency_conversion": {"fqn": ["drip_data_intelligence", "alpha_not_owned_by_dbt", "historical_currency_conversion"], "database": "dumps", "schema": "alpha", "unique_id": "source.drip_data_intelligence.alpha_not_owned_by_dbt.historical_currency_conversion", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "historical_currency_conversion", "source_name": "alpha_not_owned_by_dbt", "source_description": "", "loader": "", "identifier": "historical_currency_conversion", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"alpha\".\"historical_currency_conversion\"", "created_at": 1674498298.4212039}, "source.drip_data_intelligence.current.subscription_details": {"fqn": ["drip_data_intelligence", "current", "subscription_details"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.current.subscription_details", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "subscription_details", "source_name": "current", "source_description": "", "loader": "", "identifier": "subscription_details", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Finance-related fields for each subscription. Generated in a drip-finance job.\n", "columns": {"subscription_id": {"name": "subscription_id", "description": "Foreign key to the subscriptions table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"subscription_details\"", "created_at": 1674498298.4420211}, "source.drip_data_intelligence.data_intelligence.backfill_calendar": {"fqn": ["drip_data_intelligence", "data_intelligence", "backfill_calendar"], "database": "dumps", "schema": "data_intelligence", "unique_id": "source.drip_data_intelligence.data_intelligence.backfill_calendar", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "backfill_calendar", "source_name": "data_intelligence", "source_description": "", "loader": "", "identifier": "backfill_calendar", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "occurred_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"data_intelligence\".\"backfill_calendar\"", "created_at": 1674498298.442167}, "source.drip_data_intelligence.data_intelligence.oms_indicated_account_events": {"fqn": ["drip_data_intelligence", "data_intelligence", "oms_indicated_account_events"], "database": "dumps", "schema": "data_intelligence", "unique_id": "source.drip_data_intelligence.data_intelligence.oms_indicated_account_events", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "oms_indicated_account_events", "source_name": "data_intelligence", "source_description": "", "loader": "", "identifier": "oms_indicated_account_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "occurred_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"data_intelligence\".\"oms_indicated_account_events\"", "created_at": 1674498298.4422941}, "source.drip_data_intelligence.data_intelligence.oms_indicated_subscription_events": {"fqn": ["drip_data_intelligence", "data_intelligence", "oms_indicated_subscription_events"], "database": "dumps", "schema": "data_intelligence", "unique_id": "source.drip_data_intelligence.data_intelligence.oms_indicated_subscription_events", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "oms_indicated_subscription_events", "source_name": "data_intelligence", "source_description": "", "loader": "", "identifier": "oms_indicated_subscription_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "occurred_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"data_intelligence\".\"oms_indicated_subscription_events\"", "created_at": 1674498298.4424179}, "source.drip_data_intelligence.data_intelligence.subscription_state_transitions": {"fqn": ["drip_data_intelligence", "data_intelligence", "subscription_state_transitions"], "database": "dumps", "schema": "data_intelligence", "unique_id": "source.drip_data_intelligence.data_intelligence.subscription_state_transitions", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "subscription_state_transitions", "source_name": "data_intelligence", "source_description": "", "loader": "", "identifier": "subscription_state_transitions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "occurred_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"data_intelligence\".\"subscription_state_transitions\"", "created_at": 1674498298.44254}, "source.drip_data_intelligence.finance.mrr_kpi": {"fqn": ["drip_data_intelligence", "finance", "mrr_kpi"], "database": "dumps", "schema": "finance", "unique_id": "source.drip_data_intelligence.finance.mrr_kpi", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "mrr_kpi", "source_name": "finance", "source_description": "", "loader": "", "identifier": "mrr_kpi", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "occurred_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"finance\".\"mrr_kpi\"", "created_at": 1674498298.442661}, "source.drip_data_intelligence.finance.sms_credit_ledgers": {"fqn": ["drip_data_intelligence", "finance", "sms_credit_ledgers"], "database": "dumps", "schema": "finance", "unique_id": "source.drip_data_intelligence.finance.sms_credit_ledgers", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "sms_credit_ledgers", "source_name": "finance", "source_description": "", "loader": "", "identifier": "sms_credit_ledgers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "occurred_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"finance\".\"sms_credit_ledgers\"", "created_at": 1674498298.442781}, "source.drip_data_intelligence.full_table_etl.account_daily_usage_stats": {"fqn": ["drip_data_intelligence", "full_table_etl", "account_daily_usage_stats"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.account_daily_usage_stats", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "account_daily_usage_stats", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "account_daily_usage_stats", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"account_daily_usage_stats\"", "created_at": 1674498298.442902}, "source.drip_data_intelligence.full_table_etl.account_events": {"fqn": ["drip_data_intelligence", "full_table_etl", "account_events"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.account_events", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "account_events", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "account_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"account_events\"", "created_at": 1674498298.443021}, "source.drip_data_intelligence.full_table_etl.accounts": {"fqn": ["drip_data_intelligence", "full_table_etl", "accounts"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.accounts", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "accounts", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "accounts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"accounts\"", "created_at": 1674498298.44314}, "source.drip_data_intelligence.full_table_etl.automation_emails": {"fqn": ["drip_data_intelligence", "full_table_etl", "automation_emails"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.automation_emails", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "automation_emails", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "automation_emails", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"automation_emails\"", "created_at": 1674498298.443263}, "source.drip_data_intelligence.full_table_etl.broadcasts": {"fqn": ["drip_data_intelligence", "full_table_etl", "broadcasts"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.broadcasts", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "broadcasts", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "broadcasts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"broadcasts\"", "created_at": 1674498298.443382}, "source.drip_data_intelligence.full_table_etl.custom_fields": {"fqn": ["drip_data_intelligence", "full_table_etl", "custom_fields"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.custom_fields", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "custom_fields", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "custom_fields", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"custom_fields\"", "created_at": 1674498298.443499}, "source.drip_data_intelligence.full_table_etl.forms": {"fqn": ["drip_data_intelligence", "full_table_etl", "forms"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.forms", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "forms", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "forms", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"forms\"", "created_at": 1674498298.443617}, "source.drip_data_intelligence.full_table_etl.invoice_item_allocations": {"fqn": ["drip_data_intelligence", "full_table_etl", "invoice_item_allocations"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.invoice_item_allocations", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "invoice_item_allocations", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "invoice_item_allocations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"invoice_item_allocations\"", "created_at": 1674498298.4437351}, "source.drip_data_intelligence.full_table_etl.invoice_items": {"fqn": ["drip_data_intelligence", "full_table_etl", "invoice_items"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.invoice_items", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "invoice_items", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "invoice_items", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"invoice_items\"", "created_at": 1674498298.4438531}, "source.drip_data_intelligence.full_table_etl.invoices": {"fqn": ["drip_data_intelligence", "full_table_etl", "invoices"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.invoices", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "invoices", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "invoices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"invoices\"", "created_at": 1674498298.443975}, "source.drip_data_intelligence.full_table_etl.memberships": {"fqn": ["drip_data_intelligence", "full_table_etl", "memberships"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.memberships", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "memberships", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "memberships", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"memberships\"", "created_at": 1674498298.4440918}, "source.drip_data_intelligence.full_table_etl.purchases": {"fqn": ["drip_data_intelligence", "full_table_etl", "purchases"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.purchases", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "purchases", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "purchases", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"purchases\"", "created_at": 1674498298.4442098}, "source.drip_data_intelligence.full_table_etl.sms_credit_rollups": {"fqn": ["drip_data_intelligence", "full_table_etl", "sms_credit_rollups"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.sms_credit_rollups", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "sms_credit_rollups", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "sms_credit_rollups", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"sms_credit_rollups\"", "created_at": 1674498298.444442}, "source.drip_data_intelligence.full_table_etl.sms_people": {"fqn": ["drip_data_intelligence", "full_table_etl", "sms_people"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.sms_people", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "sms_people", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "sms_people", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"sms_people\"", "created_at": 1674498298.444584}, "source.drip_data_intelligence.full_table_etl.sn_forms": {"fqn": ["drip_data_intelligence", "full_table_etl", "sn_forms"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.sn_forms", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "sn_forms", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "sn_forms", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"sn_forms\"", "created_at": 1674498298.444711}, "source.drip_data_intelligence.full_table_etl.subscription_billing_attributes": {"fqn": ["drip_data_intelligence", "full_table_etl", "subscription_billing_attributes"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.subscription_billing_attributes", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "subscription_billing_attributes", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "subscription_billing_attributes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "Various billing-related attributes for each subscription\n", "columns": {"subscription_id": {"name": "subscription_id", "description": "Foreign key to the subscriptions table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"subscription_billing_attributes\"", "created_at": 1674498298.453312}, "source.drip_data_intelligence.full_table_etl.subscription_recurring_revenues": {"fqn": ["drip_data_intelligence", "full_table_etl", "subscription_recurring_revenues"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.subscription_recurring_revenues", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "subscription_recurring_revenues", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "subscription_recurring_revenues", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"subscription_recurring_revenues\"", "created_at": 1674498298.4534478}, "source.drip_data_intelligence.full_table_etl.subscriptions": {"fqn": ["drip_data_intelligence", "full_table_etl", "subscriptions"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.subscriptions", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "subscriptions", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "subscriptions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"subscriptions\"", "created_at": 1674498298.453574}, "source.drip_data_intelligence.full_table_etl.transactions": {"fqn": ["drip_data_intelligence", "full_table_etl", "transactions"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.transactions", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transactions", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"transactions\"", "created_at": 1674498298.453697}, "source.drip_data_intelligence.full_table_etl.twilio_from_codes": {"fqn": ["drip_data_intelligence", "full_table_etl", "twilio_from_codes"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.twilio_from_codes", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "twilio_from_codes", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "twilio_from_codes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"twilio_from_codes\"", "created_at": 1674498298.4538171}, "source.drip_data_intelligence.full_table_etl.twilio_subaccounts": {"fqn": ["drip_data_intelligence", "full_table_etl", "twilio_subaccounts"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.twilio_subaccounts", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "twilio_subaccounts", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "twilio_subaccounts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"twilio_subaccounts\"", "created_at": 1674498298.453936}, "source.drip_data_intelligence.full_table_etl.users": {"fqn": ["drip_data_intelligence", "full_table_etl", "users"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.users", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "users", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"users\"", "created_at": 1674498298.454098}, "source.drip_data_intelligence.full_table_etl.workflows": {"fqn": ["drip_data_intelligence", "full_table_etl", "workflows"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.full_table_etl.workflows", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "workflows", "source_name": "full_table_etl", "source_description": "", "loader": "", "identifier": "workflows", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"workflows\"", "created_at": 1674498298.4542148}, "source.drip_data_intelligence.stream_events_etl.delivery_events": {"fqn": ["drip_data_intelligence", "stream_events_etl", "delivery_events"], "database": "dumps", "schema": "current", "unique_id": "source.drip_data_intelligence.stream_events_etl.delivery_events", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "delivery_events", "source_name": "stream_events_etl", "source_description": "", "loader": "", "identifier": "delivery_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "occurred_at", "freshness": {"warn_after": {"count": 2, "period": "hour"}, "error_after": {"count": 3, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dumps\".\"current\".\"delivery_events\"", "created_at": 1674498298.454336}}, "macros": {"macro.drip_data_intelligence.generate_schema_name": {"unique_id": "macro.drip_data_intelligence.generate_schema_name", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.generate_schema_name_for_env"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.654049, "supported_languages": null}, "macro.drip_data_intelligence.run_date": {"unique_id": "macro.drip_data_intelligence.run_date", "package_name": "drip_data_intelligence", "root_path": "/Users/joshuajorenby/dev/drip-data-intelligence/src/waterworks/dbt", "path": "macros/run_date.sql", "original_file_path": "macros/run_date.sql", "name": "run_date", "macro_sql": "{% macro run_date() %}\n    {% set run_date = var('run_date', '') %}\n\n    {% if run_date %}\n        TO_DATE('{{ run_date }}', 'YYYY-MM-DD')\n    {% else %}\n        CURRENT_DATE\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.6552901, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n    getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.656089, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_get_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n    {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.656407, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.656953, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp_backcompat": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp_backcompat", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "redshift__current_timestamp_backcompat", "macro_sql": "{% macro redshift__current_timestamp_backcompat() -%}\n    getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.657184, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "redshift__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro redshift__current_timestamp_in_utc_backcompat() -%}\n    getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.657414, "supported_languages": null}, "macro.dbt_redshift.redshift__get_base_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.667265, "supported_languages": null}, "macro.dbt_redshift.redshift__get_extended_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.668544, "supported_languages": null}, "macro.dbt_redshift.redshift__can_select_from": {"unique_id": "macro.dbt_redshift.redshift__can_select_from", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.669353, "supported_languages": null}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.669942, "supported_languages": null}, "macro.dbt_redshift.redshift__get_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_catalog", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_base_catalog", "macro.dbt_redshift.redshift__can_select_from", "macro.dbt_redshift.redshift__get_extended_catalog", "macro.dbt_redshift.redshift__no_svv_table_info_warning"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.6713321, "supported_languages": null}, "macro.dbt_redshift.redshift__get_relations": {"unique_id": "macro.dbt_redshift.redshift__get_relations", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres__get_relations()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.671884, "supported_languages": null}, "macro.dbt_redshift.dist": {"unique_id": "macro.dbt_redshift.dist", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.686551, "supported_languages": null}, "macro.dbt_redshift.sort": {"unique_id": "macro.dbt_redshift.sort", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.6876101, "supported_languages": null}, "macro.dbt_redshift.redshift__create_table_as": {"unique_id": "macro.dbt_redshift.redshift__create_table_as", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set backup = config.get('backup') -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {% if backup == false -%}backup no{%- endif %}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.dist", "macro.dbt_redshift.sort"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.689777, "supported_languages": null}, "macro.dbt_redshift.redshift__create_view_as": {"unique_id": "macro.dbt_redshift.redshift__create_view_as", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.690774, "supported_languages": null}, "macro.dbt_redshift.redshift__create_schema": {"unique_id": "macro.dbt_redshift.redshift__create_schema", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.691146, "supported_languages": null}, "macro.dbt_redshift.redshift__drop_schema": {"unique_id": "macro.dbt_redshift.redshift__drop_schema", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.6914299, "supported_languages": null}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.6928, "supported_languages": null}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.69314, "supported_languages": null}, "macro.dbt_redshift.redshift__information_schema_name": {"unique_id": "macro.dbt_redshift.redshift__information_schema_name", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.6934552, "supported_languages": null}, "macro.dbt_redshift.redshift__list_schemas": {"unique_id": "macro.dbt_redshift.redshift__list_schemas", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.693769, "supported_languages": null}, "macro.dbt_redshift.redshift__check_schema_exists": {"unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.694131, "supported_languages": null}, "macro.dbt_redshift.redshift__persist_docs": {"unique_id": "macro.dbt_redshift.redshift__persist_docs", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.695641, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_relation_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.696071, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_column_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.696477, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_add_remove_columns", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_add_remove_columns", "macro_sql": "{% macro redshift__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% for column in add_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% for column in remove_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.698036, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.698679, "supported_languages": null}, "macro.dbt_redshift.redshift__length": {"unique_id": "macro.dbt_redshift.redshift__length", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.69917, "supported_languages": null}, "macro.dbt_redshift.redshift__dateadd": {"unique_id": "macro.dbt_redshift.redshift__dateadd", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.6998432, "supported_languages": null}, "macro.dbt_redshift.redshift__listagg": {"unique_id": "macro.dbt_redshift.redshift__listagg", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}\n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7033541, "supported_languages": null}, "macro.dbt_redshift.redshift__datediff": {"unique_id": "macro.dbt_redshift.redshift__datediff", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.704027, "supported_languages": null}, "macro.dbt_redshift.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_redshift.redshift__cast_bool_to_text", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.704576, "supported_languages": null}, "macro.dbt_redshift.redshift__array_concat": {"unique_id": "macro.dbt_redshift.redshift__array_concat", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7051232, "supported_languages": null}, "macro.dbt_redshift.redshift__last_day": {"unique_id": "macro.dbt_redshift.redshift__last_day", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7059982, "supported_languages": null}, "macro.dbt_redshift.redshift__split_part": {"unique_id": "macro.dbt_redshift.redshift__split_part", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.707057, "supported_languages": null}, "macro.dbt_redshift.redshift__array_construct": {"unique_id": "macro.dbt_redshift.redshift__array_construct", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7076328, "supported_languages": null}, "macro.dbt_redshift.redshift__array_append": {"unique_id": "macro.dbt_redshift.redshift__array_append", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.708261, "supported_languages": null}, "macro.dbt_redshift.redshift__get_show_grant_sql": {"unique_id": "macro.dbt_redshift.redshift__get_show_grant_sql", "package_name": "dbt_redshift", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "redshift__get_show_grant_sql", "macro_sql": "{% macro redshift__get_show_grant_sql(relation) %}\n\nwith privileges as (\n\n    -- valid options per https://docs.aws.amazon.com/redshift/latest/dg/r_HAS_TABLE_PRIVILEGE.html\n    select 'select' as privilege_type\n    union all\n    select 'insert' as privilege_type\n    union all\n    select 'update' as privilege_type\n    union all\n    select 'delete' as privilege_type\n    union all\n    select 'references' as privilege_type\n\n)\n\nselect\n    u.usename as grantee,\n    p.privilege_type\nfrom pg_user u\ncross join privileges p\nwhere has_table_privilege(u.usename, '{{ relation }}', privilege_type)\n    and u.usename != current_user\n    and not u.usesuper\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7088552, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.709561, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.709994, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.710252, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.710498, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "name": "postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7107441, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.712953, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.71424, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.724319, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7255812, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.726291, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7270012, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.728056, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.728885, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.729284, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.730061, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7309382, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.732803, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.733243, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.733957, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.734622, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.735584, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7361012, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.737459, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.737924, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"unique_id": "macro.dbt_postgres.postgres__copy_grants", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.738196, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "name": "postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.739255, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.740869, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"unique_id": "macro.dbt_postgres.postgres__dateadd", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.74152, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"unique_id": "macro.dbt_postgres.postgres__listagg", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7429628, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"unique_id": "macro.dbt_postgres.postgres__datediff", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.749364, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"unique_id": "macro.dbt_postgres.postgres__any_value", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.749868, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"unique_id": "macro.dbt_postgres.postgres__last_day", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.751102, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"unique_id": "macro.dbt_postgres.postgres__split_part", "package_name": "dbt_postgres", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.752157, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.754504, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.754944, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7552772, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.755604, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7559302, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7568269, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.757525, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.758265, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.759289, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.759896, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.76629, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.766672, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.767185, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.768967, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7693498, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.769751, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.772845, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.77581, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7822971, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.782948, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7833312, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.783541, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7838771, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.784149, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.784618, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.786518, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.7869382, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.787507, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.788508, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.799965, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8042738, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.805303, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8060212, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8069398, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.807782, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.810712, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.811925, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.813376, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.813895, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8154728, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.822886, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8265731, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.827094, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.828722, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.829298, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.83077, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.832226, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.833936, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.834635, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.835062, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.835648, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8360682, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8366568, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8370812, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8376691, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.838088, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.838433, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8390532, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.84898, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.857905, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.860547, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.863311, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.865164, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.870946, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.872118, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.872561, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.8735108, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.87453, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.879971, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.880818, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.881325, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.885062, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.885995, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.886394, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.886809, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.887615, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.894506, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.902326, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.904285, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.904799, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9058619, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9062898, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.906591, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9069078, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9071732, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.907531, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.907796, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.908882, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9092941, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9121, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.91303, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.913541, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.914691, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.915272, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.915906, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.916851, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.917419, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9182699, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9190772, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.919759, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.921085, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.924202, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9254668, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.926219, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.929451, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.932147, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.933776, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.934297, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9349551, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.935137, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.935976, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.936348, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.937035, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9373178, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9380212, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9382641, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.939119, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.939491, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.940138, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9403598, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9410932, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9414139, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9422379, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.942555, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.943897, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.94481, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.94567, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9460502, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.946831, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9473028, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.948011, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9484181, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.949101, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.949465, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9502301, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.950478, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9512541, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.951564, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9522932, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9525352, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.954334, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.95468, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.955046, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.95539, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.955751, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.956091, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9564621, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.956863, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.957237, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.957644, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.958146, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.95848, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.958842, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9591732, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.959929, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.960237, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9610019, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9612448, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9621062, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.96269, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9630249, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.964164, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.964535, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.965028, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9657779, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.966079, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.967073, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.967618, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9684238, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.96877, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9697258, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.970162, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.970528, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.971104, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9721658, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9725041, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.972832, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.973082, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.973456, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.973635, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9740531, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_redshift.redshift__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.974435, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9755762, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.975892, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.976251, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9772, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9826381, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.983022, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.983507, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.98415, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9846961, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9853928, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9857972, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.986275, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9867961, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.987167, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.987617, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9882472, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9887931, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9899971, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9905071, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.990829, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.991266, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.992312, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.9932349, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.996324, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.996594, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.996969, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.997229, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.998046, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.998558, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.998793, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.999294, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498296.999721, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.000236, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0006888, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.001203, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.002836, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.00326, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.003805, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.004576, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0072918, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.009006, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.009392, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0098891, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.010273, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.010871, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.012179, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0153759, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0159738, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.016403, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.01676, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.017163, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.017715, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.018167, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.018847, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.019263, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.019629, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.022709, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0230742, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.023777, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0244339, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0252118, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.025781, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0271099, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.027679, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.029789, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.033015, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.034059, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.03508, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0362828, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.03646, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0376918, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.038214, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.03885, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0394619, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.04037, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.041539, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0426528, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.044085, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.044918, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0456362, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.047762, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.050389, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0524108, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.055388, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.057178, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.058162, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0602298, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0627992, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.064288, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.065669, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.067549, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.068991, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.070712, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0719402, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.073421, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0748138, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.076604, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.078548, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0802848, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0814168, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.082784, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.084364, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.086129, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.0884962, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.09072, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.093312, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.095296, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.097861, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"unique_id": "macro.dbt_utils.test_not_empty_string", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.099303, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"unique_id": "macro.dbt_utils.default__test_not_empty_string", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.100127, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1068459, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.110996, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.111937, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1123872, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.11378, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.114728, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.115275, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.116168, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.116652, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.118554, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.120842, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.122607, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1243892, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.125023, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.126001, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.127007, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.127923, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1296709, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.131886, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.133873, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1350029, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.135512, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1369002, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.138737, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1408372, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.142045, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1427252, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1458921, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.149651, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.152782, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.157115, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"unique_id": "macro.dbt_utils.safe_divide", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "name": "safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.158122, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"unique_id": "macro.dbt_utils.default__safe_divide", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "name": "default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.158498, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1648, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1738722, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.174849, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1754508, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1770408, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1775239, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.177981, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.178427, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1788108, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1792052, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.180177, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.180712, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.18165, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.18296, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1839302, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.1850429, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.18816, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.189012, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.19083, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.192054, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.194644, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.198303, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.200704, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.202841, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.204424, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.2063859, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.2095768, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.210809, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.212041, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.2125728, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.213811, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.2154691, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"unique_id": "macro.dbt_utils.generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.216796, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"unique_id": "macro.dbt_utils.default__generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.218557, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.2196329, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.220001, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.220348, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"unique_id": "macro.dbt_utils.get_single_value", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "name": "get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.221636, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"unique_id": "macro.dbt_utils.default__get_single_value", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "name": "default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.2235148, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.225627, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.2262778, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.227627, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/dbt/packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674498297.2295182, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/joshuajorenby/Library/Caches/pypoetry/virtualenvs/drip-data-intelligence-MhVwUFLQ-py3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.drip_data_intelligence.backfill_calendar": [], "model.drip_data_intelligence.invoice_item_allocations": ["source.drip_data_intelligence.full_table_etl.invoice_item_allocations"], "model.drip_data_intelligence.users": ["source.drip_data_intelligence.full_table_etl.users"], "model.drip_data_intelligence.accounts": ["source.drip_data_intelligence.full_table_etl.accounts"], "model.drip_data_intelligence.sms_credit_rollups": ["source.drip_data_intelligence.full_table_etl.sms_credit_rollups"], "model.drip_data_intelligence.automation_emails": ["source.drip_data_intelligence.full_table_etl.automation_emails"], "model.drip_data_intelligence.invoice_items": ["source.drip_data_intelligence.full_table_etl.invoice_items"], "model.drip_data_intelligence.purchases": ["source.drip_data_intelligence.full_table_etl.purchases"], "model.drip_data_intelligence.invoices": ["source.drip_data_intelligence.full_table_etl.invoices"], "model.drip_data_intelligence.delivery_events": ["source.drip_data_intelligence.stream_events_etl.delivery_events"], "model.drip_data_intelligence.forms": ["source.drip_data_intelligence.full_table_etl.forms"], "model.drip_data_intelligence.subscriptions": ["source.drip_data_intelligence.full_table_etl.subscriptions"], "model.drip_data_intelligence.transactions": ["source.drip_data_intelligence.full_table_etl.transactions"], "model.drip_data_intelligence.account_events": ["source.drip_data_intelligence.full_table_etl.account_events"], "model.drip_data_intelligence.broadcasts": ["source.drip_data_intelligence.full_table_etl.broadcasts"], "model.drip_data_intelligence.purchases_corrected": ["model.drip_data_intelligence.purchases", "source.drip_data_intelligence.alpha_not_owned_by_dbt.historical_currency_conversion"], "model.drip_data_intelligence.workflows": ["source.drip_data_intelligence.full_table_etl.workflows"], "model.drip_data_intelligence.memberships": ["source.drip_data_intelligence.full_table_etl.memberships"], "model.drip_data_intelligence.segment_subscription_properties": ["model.drip_data_intelligence.accounts_with_api_purchases", "model.drip_data_intelligence.accounts_with_email_campaigns_sent", "model.drip_data_intelligence.accounts_with_first_email_sent", "model.drip_data_intelligence.accounts_with_first_person_added", "model.drip_data_intelligence.accounts_with_first_registration_date", "model.drip_data_intelligence.accounts_with_first_sms_sent", "model.drip_data_intelligence.accounts_with_has_ever_connected_oms", "model.drip_data_intelligence.accounts_with_installed_snippet_action", "model.drip_data_intelligence.accounts_with_legacy_form_activated_events", "model.drip_data_intelligence.accounts_with_oms_connected_provider", "model.drip_data_intelligence.accounts_with_oms_indicated_provider", "model.drip_data_intelligence.accounts_with_sms_campaigns_sent", "model.drip_data_intelligence.accounts_with_workflow_enabled", "model.drip_data_intelligence.num_accounts_connected_to_subscription", "model.drip_data_intelligence.onsite_campaign_totals", "model.drip_data_intelligence.segment_filtered_users_recently_not_churned", "model.drip_data_intelligence.store_revenue_stats", "model.drip_data_intelligence.subscriptions_with_activation_dates", "model.drip_data_intelligence.subscriptions_with_active_workflows", "model.drip_data_intelligence.subscriptions_with_api_enablement", "model.drip_data_intelligence.subscriptions_with_churn_dates", "model.drip_data_intelligence.subscriptions_with_company_information", "model.drip_data_intelligence.subscriptions_with_current_mrr", "model.drip_data_intelligence.subscriptions_with_financial_statuses", "model.drip_data_intelligence.subscriptions_with_first_payment_value_mrr", "model.drip_data_intelligence.subscriptions_with_industries", "model.drip_data_intelligence.subscriptions_with_last_payments", "model.drip_data_intelligence.subscriptions_with_list_size", "model.drip_data_intelligence.subscriptions_with_pricing_amounts", "model.drip_data_intelligence.subscriptions_with_sku_count", "model.drip_data_intelligence.subscriptions_with_sms_subscribers_count", "model.drip_data_intelligence.subscriptions_with_store_revenue_attributes", "model.drip_data_intelligence.subscriptions_with_success_managers", "model.drip_data_intelligence.subscriptions_with_trial_end_date", "model.drip_data_intelligence.subscriptions_with_trial_start_at", "model.drip_data_intelligence.subscriptions_with_trial_weeks", "model.drip_data_intelligence.subscriptions_with_trust_status", "model.drip_data_intelligence.subscriptions_with_user_counts"], "model.drip_data_intelligence.segment_user_group_mapping": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.memberships", "model.drip_data_intelligence.segment_filtered_users_recently_not_churned", "model.drip_data_intelligence.users"], "model.drip_data_intelligence.segment_groups": ["model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts_with_legacy_form_activated_events", "model.drip_data_intelligence.accounts_with_oms_connected_provider", "model.drip_data_intelligence.legacy_form_totals", "model.drip_data_intelligence.marketing_subscription_status", "model.drip_data_intelligence.memberships", "model.drip_data_intelligence.onsite_campaign_totals", "model.drip_data_intelligence.segment_user_group_mapping", "model.drip_data_intelligence.store_revenue_stats", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.subscriptions_with_current_mrr", "model.drip_data_intelligence.subscriptions_with_list_size", "model.drip_data_intelligence.users", "model.drip_data_intelligence.users"], "model.drip_data_intelligence.segment_users": ["model.drip_data_intelligence.segment_user_group_mapping", "model.drip_data_intelligence.users"], "model.drip_data_intelligence.subscriptions_with_api_enablement": [], "model.drip_data_intelligence.subscriptions_with_churn_dates": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.subscriptions_with_trial_weeks": ["source.drip_data_intelligence.current.subscription_details"], "model.drip_data_intelligence.accounts_with_first_sms_sent": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.subscriptions_with_trial_end_date": [], "model.drip_data_intelligence.accounts_with_oms_connected_provider": ["model.drip_data_intelligence.accounts"], "model.drip_data_intelligence.accounts_with_api_purchases": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.purchases"], "model.drip_data_intelligence.segment_filtered_users": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.marketing_subscription_status", "model.drip_data_intelligence.marketing_subscription_status", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.users", "model.drip_data_intelligence.users"], "model.drip_data_intelligence.accounts_with_installed_snippet_action": ["model.drip_data_intelligence.account_events"], "model.drip_data_intelligence.subscriptions_with_first_payment_value_mrr": ["model.drip_data_intelligence.transactions"], "model.drip_data_intelligence.subscriptions_with_sms_subscribers_count": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.subscriptions_with_list_size": ["model.drip_data_intelligence.accounts"], "model.drip_data_intelligence.subscriptions_with_store_revenue_attributes": ["model.drip_data_intelligence.account_attributed_revenue", "model.drip_data_intelligence.accounts"], "model.drip_data_intelligence.accounts_with_first_registration_date": ["model.drip_data_intelligence.account_events"], "model.drip_data_intelligence.subscriptions_with_trial_start_at": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.segment_filtered_users_recently_not_churned": ["model.drip_data_intelligence.segment_filtered_users"], "model.drip_data_intelligence.accounts_with_legacy_form_activated_events": ["model.drip_data_intelligence.account_events", "model.drip_data_intelligence.accounts"], "model.drip_data_intelligence.subscriptions_with_active_workflows": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.workflows"], "model.drip_data_intelligence.subscriptions_with_current_mrr": [], "model.drip_data_intelligence.subscriptions_with_success_managers": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.subscriptions_with_activation_dates": ["source.drip_data_intelligence.current.subscription_details"], "model.drip_data_intelligence.accounts_with_sms_campaigns_sent": [], "model.drip_data_intelligence.subscriptions_with_sku_count": ["model.drip_data_intelligence.accounts"], "model.drip_data_intelligence.marketing_subscription_status": ["model.drip_data_intelligence.marketing_subscription_status_audit"], "model.drip_data_intelligence.accounts_with_first_email_sent": [], "model.drip_data_intelligence.accounts_with_oms_indicated_provider": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.subscriptions_with_user_counts": ["model.drip_data_intelligence.memberships", "model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.num_accounts_connected_to_subscription": ["model.drip_data_intelligence.accounts"], "model.drip_data_intelligence.marketing_subscription_status_audit": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.subscriptions_with_financial_statuses": ["model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.transactions"], "model.drip_data_intelligence.users_with_last_login_date": ["model.drip_data_intelligence.users"], "model.drip_data_intelligence.accounts_with_first_person_added": ["model.drip_data_intelligence.account_events"], "model.drip_data_intelligence.accounts_with_has_ever_connected_oms": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts"], "model.drip_data_intelligence.subscriptions_with_trust_status": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.subscriptions_with_company_information": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.users"], "model.drip_data_intelligence.subscriptions_with_industries": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.accounts_with_email_campaigns_sent": [], "model.drip_data_intelligence.accounts_with_workflow_enabled": ["model.drip_data_intelligence.account_events"], "model.drip_data_intelligence.subscriptions_with_pricing_amounts": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.subscriptions_with_last_payments": ["model.drip_data_intelligence.transactions"], "model.drip_data_intelligence.account_dimensions": ["model.drip_data_intelligence.account_technology_usages_current", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.purchases", "model.drip_data_intelligence.purchases"], "model.drip_data_intelligence.churn_mrr_dashboard": ["model.drip_data_intelligence.account_events", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.customer_mrr_changed", "model.drip_data_intelligence.subscriptions_with_success_managers"], "model.drip_data_intelligence.marketing_recap": ["model.drip_data_intelligence.automation_emails", "model.drip_data_intelligence.broadcasts", "model.drip_data_intelligence.purchases_corrected", "model.drip_data_intelligence.workflows", "source.drip_data_intelligence.stream_events_etl.delivery_events"], "model.drip_data_intelligence.product_usage_snapshot_90_day_churn": [], "model.drip_data_intelligence.contracted_mrr_dashboard": ["model.drip_data_intelligence.account_events", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.customer_mrr_changed", "model.drip_data_intelligence.subscriptions_with_success_managers"], "model.drip_data_intelligence.product_usage_snapshot_most_recent_day": [], "model.drip_data_intelligence.expanded_mrr_dashboard": ["model.drip_data_intelligence.account_events", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.customer_mrr_changed", "model.drip_data_intelligence.subscriptions_with_success_managers"], "model.drip_data_intelligence.product_usage_snapshot_2022_cohort_by_week": ["source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date"], "model.drip_data_intelligence.product_usage_snapshot_activated_2022": [], "model.drip_data_intelligence.oms_indicated_on_subscription": ["source.drip_data_intelligence.data_intelligence.oms_indicated_subscription_events"], "model.drip_data_intelligence.sms_credit_ledgers": ["source.drip_data_intelligence.finance.sms_credit_ledgers"], "model.drip_data_intelligence.oms_indicated_on_account": ["source.drip_data_intelligence.data_intelligence.oms_indicated_account_events"], "model.drip_data_intelligence.customer_mrr_changed": ["source.drip_data_intelligence.finance.mrr_kpi"], "model.drip_data_intelligence.account_attributed_revenue": ["model.drip_data_intelligence.purchases_corrected"], "model.drip_data_intelligence.slt_rocks_churn": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.active_account_list_size_by_day": ["model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.backfill_calendar", "model.drip_data_intelligence.customer_mrr_changed", "source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date"], "model.drip_data_intelligence.daily_kpi_sms": ["model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.daily_kpi_by_category"], "model.drip_data_intelligence.account_builtwith_technology_detected": [], "model.drip_data_intelligence.subscription_kpis_daily": ["model.drip_data_intelligence.subscription_mrr_daily"], "model.drip_data_intelligence.daily_kpi_email": ["model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.daily_kpi_by_category"], "model.drip_data_intelligence.rfm_by_people": ["model.drip_data_intelligence.people_purchases"], "model.drip_data_intelligence.saas_monthly_by_category": ["model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.account_purchases": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.purchases_corrected"], "model.drip_data_intelligence.marketing_subscription_status_by_day": ["model.drip_data_intelligence.backfill_calendar", "model.drip_data_intelligence.backfill_calendar", "model.drip_data_intelligence.subscriptions", "source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date"], "model.drip_data_intelligence.active_forms_snapshot": ["model.drip_data_intelligence.active_forms_current"], "model.drip_data_intelligence.account_technology_usages_current": [], "model.drip_data_intelligence.active_forms_current": ["model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.forms", "model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.store_revenue_stats": ["model.drip_data_intelligence.account_attributed_revenue", "model.drip_data_intelligence.accounts", "source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date"], "model.drip_data_intelligence.people_purchases": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.purchases_corrected"], "model.drip_data_intelligence.total_kpis_daily": ["model.drip_data_intelligence.subscription_kpis_daily"], "model.drip_data_intelligence.legacy_form_totals": ["model.drip_data_intelligence.forms"], "model.drip_data_intelligence.subscription_mrr_daily": ["model.drip_data_intelligence.invoice_items", "model.drip_data_intelligence.invoices", "source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date", "source.drip_data_intelligence.full_table_etl.subscription_recurring_revenues"], "model.drip_data_intelligence.daily_kpi_by_category": ["model.drip_data_intelligence.total_kpis_daily", "model.drip_data_intelligence.total_kpis_daily", "model.drip_data_intelligence.total_kpis_daily", "model.drip_data_intelligence.total_kpis_daily", "model.drip_data_intelligence.total_kpis_daily"], "model.drip_data_intelligence.subscription_metrics_current": ["model.drip_data_intelligence.subscription_activated_within_trial", "model.drip_data_intelligence.subscription_churned_before_n_days_active", "model.drip_data_intelligence.subscription_created_by_drip_employee", "model.drip_data_intelligence.subscription_details", "model.drip_data_intelligence.subscription_dimensions", "model.drip_data_intelligence.subscription_first_churned_at", "model.drip_data_intelligence.subscription_has_marketing_attribution", "model.drip_data_intelligence.subscription_id", "model.drip_data_intelligence.subscription_indicated_an_oms", "model.drip_data_intelligence.subscription_indicated_an_oms_non_paid_marketing", "model.drip_data_intelligence.subscription_indicated_an_oms_paid_marketing", "model.drip_data_intelligence.subscription_is_unblocked", "model.drip_data_intelligence.subscription_oms_indicated", "model.drip_data_intelligence.subscription_oms_indicated_backfilled", "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_direct_marketing", "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_organic_marketing", "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_other_marketing", "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_paid_marketing", "model.drip_data_intelligence.subscription_trial_ended_at", "model.drip_data_intelligence.subscription_trial_start", "model.drip_data_intelligence.subscription_trust_status"], "model.drip_data_intelligence.subscription_oms_indicated_backfilled": ["model.drip_data_intelligence.accounts", "source.drip_data_intelligence.current.subscription_details"], "model.drip_data_intelligence.subscription_first_churned_at": [], "model.drip_data_intelligence.subscription_trust_status": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.subscription_oms_indicated": ["source.drip_data_intelligence.current.subscription_details"], "model.drip_data_intelligence.subscription_is_unblocked": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_paid_marketing": [], "model.drip_data_intelligence.subscription_dimensions": [], "model.drip_data_intelligence.subscription_indicated_an_oms_non_paid_marketing": ["model.drip_data_intelligence.accounts", "source.drip_data_intelligence.current.subscription_details"], "model.drip_data_intelligence.subscription_indicated_an_oms_paid_marketing": ["model.drip_data_intelligence.accounts", "source.drip_data_intelligence.current.subscription_details"], "model.drip_data_intelligence.subscription_id": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.subscription_activated_within_trial": ["model.drip_data_intelligence.subscriptions", "source.drip_data_intelligence.current.subscription_details", "source.drip_data_intelligence.data_intelligence.subscription_state_transitions"], "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_direct_marketing": [], "model.drip_data_intelligence.subscription_indicated_an_oms": ["model.drip_data_intelligence.accounts", "source.drip_data_intelligence.current.subscription_details"], "model.drip_data_intelligence.subscription_trial_start": ["model.drip_data_intelligence.subscriptions"], "model.drip_data_intelligence.subscription_has_marketing_attribution": [], "model.drip_data_intelligence.subscription_created_by_drip_employee": ["model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.users"], "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_organic_marketing": [], "model.drip_data_intelligence.subscription_details": ["source.drip_data_intelligence.current.subscription_details"], "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_other_marketing": [], "model.drip_data_intelligence.subscription_trial_ended_at": [], "model.drip_data_intelligence.subscription_churned_before_n_days_active": [], "model.drip_data_intelligence.account_metrics_current": ["model.drip_data_intelligence.300th_sms_person", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.added_sms_credits", "model.drip_data_intelligence.first_attributed_revenue", "model.drip_data_intelligence.first_sent_sms", "model.drip_data_intelligence.first_sms_people", "model.drip_data_intelligence.has_purchases", "model.drip_data_intelligence.has_reserved_long_code", "model.drip_data_intelligence.mrr", "model.drip_data_intelligence.oms_indicated", "model.drip_data_intelligence.sms_forms_fields", "model.drip_data_intelligence.sms_people", "model.drip_data_intelligence.total_billable_subscribers"], "model.drip_data_intelligence.first_sent_sms": ["source.drip_data_intelligence.full_table_etl.sms_credit_rollups"], "model.drip_data_intelligence.sms_forms_fields": ["model.drip_data_intelligence.forms", "source.drip_data_intelligence.full_table_etl.custom_fields"], "model.drip_data_intelligence.has_reserved_long_code": ["source.drip_data_intelligence.full_table_etl.twilio_from_codes", "source.drip_data_intelligence.full_table_etl.twilio_subaccounts"], "model.drip_data_intelligence.first_sms_people": ["source.drip_data_intelligence.full_table_etl.sms_people"], "model.drip_data_intelligence.sms_people": ["source.drip_data_intelligence.full_table_etl.sms_people"], "model.drip_data_intelligence.has_purchases": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.purchases"], "model.drip_data_intelligence.mrr": ["model.drip_data_intelligence.accounts", "model.drip_data_intelligence.accounts", "model.drip_data_intelligence.subscription_metrics_current", "source.drip_data_intelligence.full_table_etl.account_daily_usage_stats"], "model.drip_data_intelligence.oms_indicated": ["source.drip_data_intelligence.data_intelligence.oms_indicated_account_events"], "model.drip_data_intelligence.first_attributed_revenue": ["model.drip_data_intelligence.purchases"], "model.drip_data_intelligence.total_billable_subscribers": ["source.drip_data_intelligence.full_table_etl.account_daily_usage_stats"], "model.drip_data_intelligence.added_sms_credits": ["source.drip_data_intelligence.full_table_etl.sms_credit_rollups"], "model.drip_data_intelligence.300th_sms_person": ["source.drip_data_intelligence.full_table_etl.sms_people"], "model.drip_data_intelligence.finance_monthly_transactions_full": ["model.drip_data_intelligence.invoice_item_allocations", "model.drip_data_intelligence.invoice_items", "model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.transactions", "model.drip_data_intelligence.transactions"], "model.drip_data_intelligence.finance_monthly_report": ["model.drip_data_intelligence.finance_monthly_refunds_full", "model.drip_data_intelligence.finance_monthly_refunds_full", "model.drip_data_intelligence.finance_monthly_transactions_full", "model.drip_data_intelligence.finance_monthly_transactions_full"], "model.drip_data_intelligence.finance_monthly_report_old": ["model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.transactions", "model.drip_data_intelligence.transactions"], "model.drip_data_intelligence.monthly_service_transaction_totals_by_category": ["model.drip_data_intelligence.invoice_item_allocations", "model.drip_data_intelligence.invoice_item_allocations", "model.drip_data_intelligence.invoice_item_allocations", "model.drip_data_intelligence.invoice_items", "model.drip_data_intelligence.invoice_items", "model.drip_data_intelligence.transactions"], "model.drip_data_intelligence.finance_monthly_discrepancies": ["model.drip_data_intelligence.finance_monthly_report_old", "model.drip_data_intelligence.finance_monthly_report_old", "model.drip_data_intelligence.finance_monthly_report_rollup", "model.drip_data_intelligence.finance_monthly_report_rollup", "model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "model.drip_data_intelligence.transactions"], "model.drip_data_intelligence.finance_monthly_refunds_full": ["model.drip_data_intelligence.subscriptions", "model.drip_data_intelligence.transactions"], "model.drip_data_intelligence.finance_monthly_report_rollup": ["model.drip_data_intelligence.finance_monthly_report"], "model.drip_data_intelligence.onsite_campaign_totals": ["source.drip_data_intelligence.full_table_etl.sn_forms"], "snapshot.drip_data_intelligence.sn_forms_adoption_snapshot": ["model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.subscription_metrics_current"], "snapshot.drip_data_intelligence.delivery_events_by_email_at_7_days": ["model.drip_data_intelligence.broadcasts", "model.drip_data_intelligence.broadcasts", "model.drip_data_intelligence.delivery_events", "model.drip_data_intelligence.purchases_corrected"], "test.drip_data_intelligence.subscription_metrics_current_all_rows": ["model.drip_data_intelligence.subscription_id", "model.drip_data_intelligence.subscription_metrics_current"], "test.drip_data_intelligence.unique_subscriptions_id.03e6d0c90c": ["model.drip_data_intelligence.subscriptions"], "test.drip_data_intelligence.not_null_subscriptions_id.56827336e3": ["model.drip_data_intelligence.subscriptions"], "test.drip_data_intelligence.not_null_subscriptions_created_at.7462c715ab": ["model.drip_data_intelligence.subscriptions"], "test.drip_data_intelligence.unique_accounts_id.ce4d3187e0": ["model.drip_data_intelligence.accounts"], "test.drip_data_intelligence.not_null_accounts_id.521ffc790d": ["model.drip_data_intelligence.accounts"], "test.drip_data_intelligence.not_null_accounts_subscription_id.78236922b7": ["model.drip_data_intelligence.accounts"], "test.drip_data_intelligence.unique_users_id.ec952d9777": ["model.drip_data_intelligence.users"], "test.drip_data_intelligence.not_null_users_id.4db5ed5c63": ["model.drip_data_intelligence.users"], "test.drip_data_intelligence.not_null_users_email.f0068076e4": ["model.drip_data_intelligence.users"], "test.drip_data_intelligence.unique_account_events_id.34b699cca8": ["model.drip_data_intelligence.account_events"], "test.drip_data_intelligence.not_null_account_events_id.8abdf520c6": ["model.drip_data_intelligence.account_events"], "test.drip_data_intelligence.not_null_account_events_account_id.a49868ae22": ["model.drip_data_intelligence.account_events"], "test.drip_data_intelligence.unique_transactions_id.684003eda7": ["model.drip_data_intelligence.transactions"], "test.drip_data_intelligence.not_null_transactions_id.6462b524d8": ["model.drip_data_intelligence.transactions"], "test.drip_data_intelligence.not_null_transactions_subscription_id.bfc061815b": ["model.drip_data_intelligence.transactions"], "test.drip_data_intelligence.unique_forms_id.cbc3b08181": ["model.drip_data_intelligence.forms"], "test.drip_data_intelligence.not_null_forms_id.226b7696d6": ["model.drip_data_intelligence.forms"], "test.drip_data_intelligence.unique_workflows_id.6b2033703e": ["model.drip_data_intelligence.workflows"], "test.drip_data_intelligence.not_null_workflows_id.b155a0a179": ["model.drip_data_intelligence.workflows"], "test.drip_data_intelligence.unique_automation_emails_id.3d9d204e81": ["model.drip_data_intelligence.automation_emails"], "test.drip_data_intelligence.not_null_automation_emails_id.53164739f9": ["model.drip_data_intelligence.automation_emails"], "test.drip_data_intelligence.unique_broadcasts_id.038d4c0591": ["model.drip_data_intelligence.broadcasts"], "test.drip_data_intelligence.not_null_broadcasts_id.cf66366499": ["model.drip_data_intelligence.broadcasts"], "test.drip_data_intelligence.unique_purchases_id.d4642fbd37": ["model.drip_data_intelligence.purchases"], "test.drip_data_intelligence.not_null_purchases_id.2c6aea8f54": ["model.drip_data_intelligence.purchases"], "test.drip_data_intelligence.unique_invoices_id.53ab04bd4a": ["model.drip_data_intelligence.invoices"], "test.drip_data_intelligence.not_null_invoices_id.f86c186a49": ["model.drip_data_intelligence.invoices"], "test.drip_data_intelligence.unique_invoice_items_id.b24044a75d": ["model.drip_data_intelligence.invoice_items"], "test.drip_data_intelligence.not_null_invoice_items_id.f6d1aaa50a": ["model.drip_data_intelligence.invoice_items"], "test.drip_data_intelligence.unique_segment_groups_account_public_id.891e5e90cc": ["model.drip_data_intelligence.segment_groups"], "test.drip_data_intelligence.not_null_segment_groups_account_public_id.b262fae539": ["model.drip_data_intelligence.segment_groups"], "test.drip_data_intelligence.not_null_segment_groups_subscription_public_id.466e7d62b0": ["model.drip_data_intelligence.segment_groups"], "test.drip_data_intelligence.unique_segment_users_user_public_id.b1b772c05d": ["model.drip_data_intelligence.segment_users"], "test.drip_data_intelligence.not_null_segment_users_user_public_id.6aceac260d": ["model.drip_data_intelligence.segment_users"], "test.drip_data_intelligence.not_null_segment_user_group_mapping_user_public_id.2884a2749c": ["model.drip_data_intelligence.segment_user_group_mapping"], "test.drip_data_intelligence.not_null_segment_user_group_mapping_account_public_id.a636092582": ["model.drip_data_intelligence.segment_user_group_mapping"], "test.drip_data_intelligence.unique_account_dimensions_account_public_id.929bd9194f": ["model.drip_data_intelligence.account_dimensions"], "test.drip_data_intelligence.not_null_account_dimensions_account_public_id.5808828b1b": ["model.drip_data_intelligence.account_dimensions"], "test.drip_data_intelligence.not_null_customer_mrr_changed_action.bcf260f120": ["model.drip_data_intelligence.customer_mrr_changed"], "test.drip_data_intelligence.unique_subscription_metrics_current_subscription_id.3beee15e61": ["model.drip_data_intelligence.subscription_metrics_current"], "test.drip_data_intelligence.not_null_subscription_metrics_current_subscription_id.28de3d7385": ["model.drip_data_intelligence.subscription_metrics_current"], "test.drip_data_intelligence.unique_onsite_campaign_totals_account_id.8fd1f0b508": ["model.drip_data_intelligence.onsite_campaign_totals"], "test.drip_data_intelligence.not_null_onsite_campaign_totals_account_id.628bc9214f": ["model.drip_data_intelligence.onsite_campaign_totals"], "test.drip_data_intelligence.source_unique_current_subscription_details_subscription_id.959a3beee6": ["source.drip_data_intelligence.current.subscription_details"], "test.drip_data_intelligence.source_not_null_current_subscription_details_subscription_id.17456a7ee2": ["source.drip_data_intelligence.current.subscription_details"], "test.drip_data_intelligence.source_relationships_current_subscription_details_subscription_id__id__source_full_table_etl_subscriptions_.f111c3c56a": ["source.drip_data_intelligence.current.subscription_details", "source.drip_data_intelligence.full_table_etl.subscriptions"], "test.drip_data_intelligence.source_unique_full_table_etl_subscription_billing_attributes_subscription_id.37e379903a": ["source.drip_data_intelligence.full_table_etl.subscription_billing_attributes"], "test.drip_data_intelligence.source_not_null_full_table_etl_subscription_billing_attributes_subscription_id.0a3672935c": ["source.drip_data_intelligence.full_table_etl.subscription_billing_attributes"], "test.drip_data_intelligence.source_relationships_full_table_etl_subscription_billing_attributes_subscription_id__id__source_full_table_etl_subscriptions_.9a47ec55a5": ["source.drip_data_intelligence.full_table_etl.subscription_billing_attributes", "source.drip_data_intelligence.full_table_etl.subscriptions"], "source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date": [], "source.drip_data_intelligence.alpha_not_owned_by_dbt.historical_currency_conversion": [], "source.drip_data_intelligence.current.subscription_details": [], "source.drip_data_intelligence.data_intelligence.backfill_calendar": [], "source.drip_data_intelligence.data_intelligence.oms_indicated_account_events": [], "source.drip_data_intelligence.data_intelligence.oms_indicated_subscription_events": [], "source.drip_data_intelligence.data_intelligence.subscription_state_transitions": [], "source.drip_data_intelligence.finance.mrr_kpi": [], "source.drip_data_intelligence.finance.sms_credit_ledgers": [], "source.drip_data_intelligence.full_table_etl.account_daily_usage_stats": [], "source.drip_data_intelligence.full_table_etl.account_events": [], "source.drip_data_intelligence.full_table_etl.accounts": [], "source.drip_data_intelligence.full_table_etl.automation_emails": [], "source.drip_data_intelligence.full_table_etl.broadcasts": [], "source.drip_data_intelligence.full_table_etl.custom_fields": [], "source.drip_data_intelligence.full_table_etl.forms": [], "source.drip_data_intelligence.full_table_etl.invoice_item_allocations": [], "source.drip_data_intelligence.full_table_etl.invoice_items": [], "source.drip_data_intelligence.full_table_etl.invoices": [], "source.drip_data_intelligence.full_table_etl.memberships": [], "source.drip_data_intelligence.full_table_etl.purchases": [], "source.drip_data_intelligence.full_table_etl.sms_credit_rollups": [], "source.drip_data_intelligence.full_table_etl.sms_people": [], "source.drip_data_intelligence.full_table_etl.sn_forms": [], "source.drip_data_intelligence.full_table_etl.subscription_billing_attributes": [], "source.drip_data_intelligence.full_table_etl.subscription_recurring_revenues": [], "source.drip_data_intelligence.full_table_etl.subscriptions": [], "source.drip_data_intelligence.full_table_etl.transactions": [], "source.drip_data_intelligence.full_table_etl.twilio_from_codes": [], "source.drip_data_intelligence.full_table_etl.twilio_subaccounts": [], "source.drip_data_intelligence.full_table_etl.users": [], "source.drip_data_intelligence.full_table_etl.workflows": [], "source.drip_data_intelligence.stream_events_etl.delivery_events": []}, "child_map": {"model.drip_data_intelligence.backfill_calendar": ["model.drip_data_intelligence.active_account_list_size_by_day", "model.drip_data_intelligence.marketing_subscription_status_by_day", "model.drip_data_intelligence.marketing_subscription_status_by_day"], "model.drip_data_intelligence.invoice_item_allocations": ["model.drip_data_intelligence.finance_monthly_transactions_full", "model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "model.drip_data_intelligence.monthly_service_transaction_totals_by_category"], "model.drip_data_intelligence.users": ["model.drip_data_intelligence.segment_filtered_users", "model.drip_data_intelligence.segment_filtered_users", "model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_user_group_mapping", "model.drip_data_intelligence.segment_users", "model.drip_data_intelligence.subscription_created_by_drip_employee", "model.drip_data_intelligence.subscriptions_with_company_information", "model.drip_data_intelligence.users_with_last_login_date", "test.drip_data_intelligence.not_null_users_email.f0068076e4", "test.drip_data_intelligence.not_null_users_id.4db5ed5c63", "test.drip_data_intelligence.unique_users_id.ec952d9777"], "model.drip_data_intelligence.accounts": ["model.drip_data_intelligence.account_dimensions", "model.drip_data_intelligence.account_dimensions", "model.drip_data_intelligence.account_dimensions", "model.drip_data_intelligence.account_dimensions", "model.drip_data_intelligence.account_metrics_current", "model.drip_data_intelligence.account_purchases", "model.drip_data_intelligence.accounts_with_api_purchases", "model.drip_data_intelligence.accounts_with_has_ever_connected_oms", "model.drip_data_intelligence.accounts_with_has_ever_connected_oms", "model.drip_data_intelligence.accounts_with_legacy_form_activated_events", "model.drip_data_intelligence.accounts_with_oms_connected_provider", "model.drip_data_intelligence.has_purchases", "model.drip_data_intelligence.mrr", "model.drip_data_intelligence.mrr", "model.drip_data_intelligence.num_accounts_connected_to_subscription", "model.drip_data_intelligence.people_purchases", "model.drip_data_intelligence.segment_filtered_users", "model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_user_group_mapping", "model.drip_data_intelligence.store_revenue_stats", "model.drip_data_intelligence.subscription_indicated_an_oms", "model.drip_data_intelligence.subscription_indicated_an_oms_non_paid_marketing", "model.drip_data_intelligence.subscription_indicated_an_oms_paid_marketing", "model.drip_data_intelligence.subscription_oms_indicated_backfilled", "model.drip_data_intelligence.subscriptions_with_active_workflows", "model.drip_data_intelligence.subscriptions_with_company_information", "model.drip_data_intelligence.subscriptions_with_list_size", "model.drip_data_intelligence.subscriptions_with_sku_count", "model.drip_data_intelligence.subscriptions_with_store_revenue_attributes", "test.drip_data_intelligence.not_null_accounts_id.521ffc790d", "test.drip_data_intelligence.not_null_accounts_subscription_id.78236922b7", "test.drip_data_intelligence.unique_accounts_id.ce4d3187e0"], "model.drip_data_intelligence.sms_credit_rollups": [], "model.drip_data_intelligence.automation_emails": ["model.drip_data_intelligence.marketing_recap", "test.drip_data_intelligence.not_null_automation_emails_id.53164739f9", "test.drip_data_intelligence.unique_automation_emails_id.3d9d204e81"], "model.drip_data_intelligence.invoice_items": ["model.drip_data_intelligence.finance_monthly_transactions_full", "model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "model.drip_data_intelligence.subscription_mrr_daily", "test.drip_data_intelligence.not_null_invoice_items_id.f6d1aaa50a", "test.drip_data_intelligence.unique_invoice_items_id.b24044a75d"], "model.drip_data_intelligence.purchases": ["model.drip_data_intelligence.account_dimensions", "model.drip_data_intelligence.account_dimensions", "model.drip_data_intelligence.accounts_with_api_purchases", "model.drip_data_intelligence.first_attributed_revenue", "model.drip_data_intelligence.has_purchases", "model.drip_data_intelligence.purchases_corrected", "test.drip_data_intelligence.not_null_purchases_id.2c6aea8f54", "test.drip_data_intelligence.unique_purchases_id.d4642fbd37"], "model.drip_data_intelligence.invoices": ["model.drip_data_intelligence.subscription_mrr_daily", "test.drip_data_intelligence.not_null_invoices_id.f86c186a49", "test.drip_data_intelligence.unique_invoices_id.53ab04bd4a"], "model.drip_data_intelligence.delivery_events": ["snapshot.drip_data_intelligence.delivery_events_by_email_at_7_days"], "model.drip_data_intelligence.forms": ["model.drip_data_intelligence.active_forms_current", "model.drip_data_intelligence.legacy_form_totals", "model.drip_data_intelligence.sms_forms_fields", "test.drip_data_intelligence.not_null_forms_id.226b7696d6", "test.drip_data_intelligence.unique_forms_id.cbc3b08181"], "model.drip_data_intelligence.subscriptions": ["model.drip_data_intelligence.finance_monthly_refunds_full", "model.drip_data_intelligence.finance_monthly_report_old", "model.drip_data_intelligence.finance_monthly_transactions_full", "model.drip_data_intelligence.marketing_subscription_status_audit", "model.drip_data_intelligence.marketing_subscription_status_by_day", "model.drip_data_intelligence.segment_filtered_users", "model.drip_data_intelligence.segment_filtered_users", "model.drip_data_intelligence.segment_filtered_users", "model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.subscription_activated_within_trial", "model.drip_data_intelligence.subscription_created_by_drip_employee", "model.drip_data_intelligence.subscription_id", "model.drip_data_intelligence.subscription_is_unblocked", "model.drip_data_intelligence.subscription_trial_start", "model.drip_data_intelligence.subscription_trust_status", "model.drip_data_intelligence.subscriptions_with_churn_dates", "model.drip_data_intelligence.subscriptions_with_company_information", "model.drip_data_intelligence.subscriptions_with_financial_statuses", "model.drip_data_intelligence.subscriptions_with_industries", "model.drip_data_intelligence.subscriptions_with_pricing_amounts", "model.drip_data_intelligence.subscriptions_with_success_managers", "model.drip_data_intelligence.subscriptions_with_trial_start_at", "model.drip_data_intelligence.subscriptions_with_trust_status", "model.drip_data_intelligence.subscriptions_with_user_counts", "test.drip_data_intelligence.not_null_subscriptions_created_at.7462c715ab", "test.drip_data_intelligence.not_null_subscriptions_id.56827336e3", "test.drip_data_intelligence.unique_subscriptions_id.03e6d0c90c"], "model.drip_data_intelligence.transactions": ["model.drip_data_intelligence.finance_monthly_discrepancies", "model.drip_data_intelligence.finance_monthly_refunds_full", "model.drip_data_intelligence.finance_monthly_report_old", "model.drip_data_intelligence.finance_monthly_report_old", "model.drip_data_intelligence.finance_monthly_transactions_full", "model.drip_data_intelligence.finance_monthly_transactions_full", "model.drip_data_intelligence.monthly_service_transaction_totals_by_category", "model.drip_data_intelligence.subscriptions_with_financial_statuses", "model.drip_data_intelligence.subscriptions_with_first_payment_value_mrr", "model.drip_data_intelligence.subscriptions_with_last_payments", "test.drip_data_intelligence.not_null_transactions_id.6462b524d8", "test.drip_data_intelligence.not_null_transactions_subscription_id.bfc061815b", "test.drip_data_intelligence.unique_transactions_id.684003eda7"], "model.drip_data_intelligence.account_events": ["model.drip_data_intelligence.accounts_with_first_person_added", "model.drip_data_intelligence.accounts_with_first_registration_date", "model.drip_data_intelligence.accounts_with_installed_snippet_action", "model.drip_data_intelligence.accounts_with_legacy_form_activated_events", "model.drip_data_intelligence.accounts_with_workflow_enabled", "model.drip_data_intelligence.churn_mrr_dashboard", "model.drip_data_intelligence.contracted_mrr_dashboard", "model.drip_data_intelligence.expanded_mrr_dashboard", "test.drip_data_intelligence.not_null_account_events_account_id.a49868ae22", "test.drip_data_intelligence.not_null_account_events_id.8abdf520c6", "test.drip_data_intelligence.unique_account_events_id.34b699cca8"], "model.drip_data_intelligence.broadcasts": ["model.drip_data_intelligence.marketing_recap", "snapshot.drip_data_intelligence.delivery_events_by_email_at_7_days", "snapshot.drip_data_intelligence.delivery_events_by_email_at_7_days", "test.drip_data_intelligence.not_null_broadcasts_id.cf66366499", "test.drip_data_intelligence.unique_broadcasts_id.038d4c0591"], "model.drip_data_intelligence.purchases_corrected": ["model.drip_data_intelligence.account_attributed_revenue", "model.drip_data_intelligence.account_purchases", "model.drip_data_intelligence.marketing_recap", "model.drip_data_intelligence.people_purchases", "snapshot.drip_data_intelligence.delivery_events_by_email_at_7_days"], "model.drip_data_intelligence.workflows": ["model.drip_data_intelligence.marketing_recap", "model.drip_data_intelligence.subscriptions_with_active_workflows", "test.drip_data_intelligence.not_null_workflows_id.b155a0a179", "test.drip_data_intelligence.unique_workflows_id.6b2033703e"], "model.drip_data_intelligence.memberships": ["model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_user_group_mapping", "model.drip_data_intelligence.subscriptions_with_user_counts"], "model.drip_data_intelligence.segment_subscription_properties": ["model.drip_data_intelligence.saas_monthly_by_category"], "model.drip_data_intelligence.segment_user_group_mapping": ["model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_users", "test.drip_data_intelligence.not_null_segment_user_group_mapping_account_public_id.a636092582", "test.drip_data_intelligence.not_null_segment_user_group_mapping_user_public_id.2884a2749c"], "model.drip_data_intelligence.segment_groups": ["test.drip_data_intelligence.not_null_segment_groups_account_public_id.b262fae539", "test.drip_data_intelligence.not_null_segment_groups_subscription_public_id.466e7d62b0", "test.drip_data_intelligence.unique_segment_groups_account_public_id.891e5e90cc"], "model.drip_data_intelligence.segment_users": ["test.drip_data_intelligence.not_null_segment_users_user_public_id.6aceac260d", "test.drip_data_intelligence.unique_segment_users_user_public_id.b1b772c05d"], "model.drip_data_intelligence.subscriptions_with_api_enablement": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_churn_dates": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_trial_weeks": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.accounts_with_first_sms_sent": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_trial_end_date": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.accounts_with_oms_connected_provider": ["model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.accounts_with_api_purchases": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.segment_filtered_users": ["model.drip_data_intelligence.segment_filtered_users_recently_not_churned"], "model.drip_data_intelligence.accounts_with_installed_snippet_action": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_first_payment_value_mrr": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_sms_subscribers_count": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_list_size": ["model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_store_revenue_attributes": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.accounts_with_first_registration_date": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_trial_start_at": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.segment_filtered_users_recently_not_churned": ["model.drip_data_intelligence.segment_subscription_properties", "model.drip_data_intelligence.segment_user_group_mapping"], "model.drip_data_intelligence.accounts_with_legacy_form_activated_events": ["model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_active_workflows": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_current_mrr": ["model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_success_managers": ["model.drip_data_intelligence.churn_mrr_dashboard", "model.drip_data_intelligence.contracted_mrr_dashboard", "model.drip_data_intelligence.expanded_mrr_dashboard", "model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_activation_dates": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.accounts_with_sms_campaigns_sent": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_sku_count": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.marketing_subscription_status": ["model.drip_data_intelligence.segment_filtered_users", "model.drip_data_intelligence.segment_filtered_users", "model.drip_data_intelligence.segment_groups"], "model.drip_data_intelligence.accounts_with_first_email_sent": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.accounts_with_oms_indicated_provider": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_user_counts": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.num_accounts_connected_to_subscription": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.marketing_subscription_status_audit": ["model.drip_data_intelligence.marketing_subscription_status"], "model.drip_data_intelligence.subscriptions_with_financial_statuses": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.users_with_last_login_date": [], "model.drip_data_intelligence.accounts_with_first_person_added": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.accounts_with_has_ever_connected_oms": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_trust_status": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_company_information": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_industries": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.accounts_with_email_campaigns_sent": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.accounts_with_workflow_enabled": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_pricing_amounts": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.subscriptions_with_last_payments": ["model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.account_dimensions": ["test.drip_data_intelligence.not_null_account_dimensions_account_public_id.5808828b1b", "test.drip_data_intelligence.unique_account_dimensions_account_public_id.929bd9194f"], "model.drip_data_intelligence.churn_mrr_dashboard": [], "model.drip_data_intelligence.marketing_recap": [], "model.drip_data_intelligence.product_usage_snapshot_90_day_churn": [], "model.drip_data_intelligence.contracted_mrr_dashboard": [], "model.drip_data_intelligence.product_usage_snapshot_most_recent_day": [], "model.drip_data_intelligence.expanded_mrr_dashboard": [], "model.drip_data_intelligence.product_usage_snapshot_2022_cohort_by_week": [], "model.drip_data_intelligence.product_usage_snapshot_activated_2022": [], "model.drip_data_intelligence.oms_indicated_on_subscription": [], "model.drip_data_intelligence.sms_credit_ledgers": [], "model.drip_data_intelligence.oms_indicated_on_account": [], "model.drip_data_intelligence.customer_mrr_changed": ["model.drip_data_intelligence.active_account_list_size_by_day", "model.drip_data_intelligence.churn_mrr_dashboard", "model.drip_data_intelligence.contracted_mrr_dashboard", "model.drip_data_intelligence.expanded_mrr_dashboard", "test.drip_data_intelligence.not_null_customer_mrr_changed_action.bcf260f120"], "model.drip_data_intelligence.account_attributed_revenue": ["model.drip_data_intelligence.store_revenue_stats", "model.drip_data_intelligence.subscriptions_with_store_revenue_attributes"], "model.drip_data_intelligence.slt_rocks_churn": [], "model.drip_data_intelligence.active_account_list_size_by_day": [], "model.drip_data_intelligence.daily_kpi_sms": [], "model.drip_data_intelligence.account_builtwith_technology_detected": [], "model.drip_data_intelligence.subscription_kpis_daily": ["model.drip_data_intelligence.total_kpis_daily"], "model.drip_data_intelligence.daily_kpi_email": [], "model.drip_data_intelligence.rfm_by_people": [], "model.drip_data_intelligence.saas_monthly_by_category": [], "model.drip_data_intelligence.account_purchases": [], "model.drip_data_intelligence.marketing_subscription_status_by_day": [], "model.drip_data_intelligence.active_forms_snapshot": [], "model.drip_data_intelligence.account_technology_usages_current": ["model.drip_data_intelligence.account_dimensions"], "model.drip_data_intelligence.active_forms_current": ["model.drip_data_intelligence.active_forms_snapshot"], "model.drip_data_intelligence.store_revenue_stats": ["model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_subscription_properties"], "model.drip_data_intelligence.people_purchases": ["model.drip_data_intelligence.rfm_by_people"], "model.drip_data_intelligence.total_kpis_daily": ["model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.daily_kpi_by_category", "model.drip_data_intelligence.daily_kpi_by_category"], "model.drip_data_intelligence.legacy_form_totals": ["model.drip_data_intelligence.segment_groups"], "model.drip_data_intelligence.subscription_mrr_daily": ["model.drip_data_intelligence.subscription_kpis_daily"], "model.drip_data_intelligence.daily_kpi_by_category": ["model.drip_data_intelligence.daily_kpi_email", "model.drip_data_intelligence.daily_kpi_email", "model.drip_data_intelligence.daily_kpi_sms", "model.drip_data_intelligence.daily_kpi_sms", "model.drip_data_intelligence.saas_monthly_by_category"], "model.drip_data_intelligence.subscription_metrics_current": ["model.drip_data_intelligence.active_forms_current", "model.drip_data_intelligence.mrr", "model.drip_data_intelligence.slt_rocks_churn", "snapshot.drip_data_intelligence.sn_forms_adoption_snapshot", "test.drip_data_intelligence.not_null_subscription_metrics_current_subscription_id.28de3d7385", "test.drip_data_intelligence.subscription_metrics_current_all_rows", "test.drip_data_intelligence.unique_subscription_metrics_current_subscription_id.3beee15e61"], "model.drip_data_intelligence.subscription_oms_indicated_backfilled": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_first_churned_at": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_trust_status": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_oms_indicated": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_is_unblocked": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_paid_marketing": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_dimensions": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_indicated_an_oms_non_paid_marketing": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_indicated_an_oms_paid_marketing": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_id": ["model.drip_data_intelligence.subscription_metrics_current", "test.drip_data_intelligence.subscription_metrics_current_all_rows"], "model.drip_data_intelligence.subscription_activated_within_trial": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_direct_marketing": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_indicated_an_oms": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_trial_start": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_has_marketing_attribution": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_created_by_drip_employee": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_organic_marketing": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_details": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_pct_trial_lead_attributed_to_other_marketing": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_trial_ended_at": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.subscription_churned_before_n_days_active": ["model.drip_data_intelligence.subscription_metrics_current"], "model.drip_data_intelligence.account_metrics_current": ["model.drip_data_intelligence.accounts_with_first_sms_sent", "model.drip_data_intelligence.accounts_with_oms_indicated_provider", "model.drip_data_intelligence.active_account_list_size_by_day", "model.drip_data_intelligence.active_forms_current", "model.drip_data_intelligence.churn_mrr_dashboard", "model.drip_data_intelligence.churn_mrr_dashboard", "model.drip_data_intelligence.contracted_mrr_dashboard", "model.drip_data_intelligence.contracted_mrr_dashboard", "model.drip_data_intelligence.expanded_mrr_dashboard", "model.drip_data_intelligence.expanded_mrr_dashboard", "model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.subscriptions_with_sms_subscribers_count", "snapshot.drip_data_intelligence.sn_forms_adoption_snapshot"], "model.drip_data_intelligence.first_sent_sms": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.sms_forms_fields": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.has_reserved_long_code": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.first_sms_people": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.sms_people": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.has_purchases": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.mrr": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.oms_indicated": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.first_attributed_revenue": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.total_billable_subscribers": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.added_sms_credits": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.300th_sms_person": ["model.drip_data_intelligence.account_metrics_current"], "model.drip_data_intelligence.finance_monthly_transactions_full": ["model.drip_data_intelligence.finance_monthly_report", "model.drip_data_intelligence.finance_monthly_report"], "model.drip_data_intelligence.finance_monthly_report": ["model.drip_data_intelligence.finance_monthly_report_rollup"], "model.drip_data_intelligence.finance_monthly_report_old": ["model.drip_data_intelligence.finance_monthly_discrepancies", "model.drip_data_intelligence.finance_monthly_discrepancies"], "model.drip_data_intelligence.monthly_service_transaction_totals_by_category": ["model.drip_data_intelligence.finance_monthly_discrepancies", "model.drip_data_intelligence.finance_monthly_transactions_full"], "model.drip_data_intelligence.finance_monthly_discrepancies": [], "model.drip_data_intelligence.finance_monthly_refunds_full": ["model.drip_data_intelligence.finance_monthly_report", "model.drip_data_intelligence.finance_monthly_report"], "model.drip_data_intelligence.finance_monthly_report_rollup": ["model.drip_data_intelligence.finance_monthly_discrepancies", "model.drip_data_intelligence.finance_monthly_discrepancies"], "model.drip_data_intelligence.onsite_campaign_totals": ["model.drip_data_intelligence.segment_groups", "model.drip_data_intelligence.segment_subscription_properties", "test.drip_data_intelligence.not_null_onsite_campaign_totals_account_id.628bc9214f", "test.drip_data_intelligence.unique_onsite_campaign_totals_account_id.8fd1f0b508"], "snapshot.drip_data_intelligence.sn_forms_adoption_snapshot": [], "snapshot.drip_data_intelligence.delivery_events_by_email_at_7_days": [], "test.drip_data_intelligence.subscription_metrics_current_all_rows": [], "test.drip_data_intelligence.unique_subscriptions_id.03e6d0c90c": [], "test.drip_data_intelligence.not_null_subscriptions_id.56827336e3": [], "test.drip_data_intelligence.not_null_subscriptions_created_at.7462c715ab": [], "test.drip_data_intelligence.unique_accounts_id.ce4d3187e0": [], "test.drip_data_intelligence.not_null_accounts_id.521ffc790d": [], "test.drip_data_intelligence.not_null_accounts_subscription_id.78236922b7": [], "test.drip_data_intelligence.unique_users_id.ec952d9777": [], "test.drip_data_intelligence.not_null_users_id.4db5ed5c63": [], "test.drip_data_intelligence.not_null_users_email.f0068076e4": [], "test.drip_data_intelligence.unique_account_events_id.34b699cca8": [], "test.drip_data_intelligence.not_null_account_events_id.8abdf520c6": [], "test.drip_data_intelligence.not_null_account_events_account_id.a49868ae22": [], "test.drip_data_intelligence.unique_transactions_id.684003eda7": [], "test.drip_data_intelligence.not_null_transactions_id.6462b524d8": [], "test.drip_data_intelligence.not_null_transactions_subscription_id.bfc061815b": [], "test.drip_data_intelligence.unique_forms_id.cbc3b08181": [], "test.drip_data_intelligence.not_null_forms_id.226b7696d6": [], "test.drip_data_intelligence.unique_workflows_id.6b2033703e": [], "test.drip_data_intelligence.not_null_workflows_id.b155a0a179": [], "test.drip_data_intelligence.unique_automation_emails_id.3d9d204e81": [], "test.drip_data_intelligence.not_null_automation_emails_id.53164739f9": [], "test.drip_data_intelligence.unique_broadcasts_id.038d4c0591": [], "test.drip_data_intelligence.not_null_broadcasts_id.cf66366499": [], "test.drip_data_intelligence.unique_purchases_id.d4642fbd37": [], "test.drip_data_intelligence.not_null_purchases_id.2c6aea8f54": [], "test.drip_data_intelligence.unique_invoices_id.53ab04bd4a": [], "test.drip_data_intelligence.not_null_invoices_id.f86c186a49": [], "test.drip_data_intelligence.unique_invoice_items_id.b24044a75d": [], "test.drip_data_intelligence.not_null_invoice_items_id.f6d1aaa50a": [], "test.drip_data_intelligence.unique_segment_groups_account_public_id.891e5e90cc": [], "test.drip_data_intelligence.not_null_segment_groups_account_public_id.b262fae539": [], "test.drip_data_intelligence.not_null_segment_groups_subscription_public_id.466e7d62b0": [], "test.drip_data_intelligence.unique_segment_users_user_public_id.b1b772c05d": [], "test.drip_data_intelligence.not_null_segment_users_user_public_id.6aceac260d": [], "test.drip_data_intelligence.not_null_segment_user_group_mapping_user_public_id.2884a2749c": [], "test.drip_data_intelligence.not_null_segment_user_group_mapping_account_public_id.a636092582": [], "test.drip_data_intelligence.unique_account_dimensions_account_public_id.929bd9194f": [], "test.drip_data_intelligence.not_null_account_dimensions_account_public_id.5808828b1b": [], "test.drip_data_intelligence.not_null_customer_mrr_changed_action.bcf260f120": [], "test.drip_data_intelligence.unique_subscription_metrics_current_subscription_id.3beee15e61": [], "test.drip_data_intelligence.not_null_subscription_metrics_current_subscription_id.28de3d7385": [], "test.drip_data_intelligence.unique_onsite_campaign_totals_account_id.8fd1f0b508": [], "test.drip_data_intelligence.not_null_onsite_campaign_totals_account_id.628bc9214f": [], "test.drip_data_intelligence.source_unique_current_subscription_details_subscription_id.959a3beee6": [], "test.drip_data_intelligence.source_not_null_current_subscription_details_subscription_id.17456a7ee2": [], "test.drip_data_intelligence.source_relationships_current_subscription_details_subscription_id__id__source_full_table_etl_subscriptions_.f111c3c56a": [], "test.drip_data_intelligence.source_unique_full_table_etl_subscription_billing_attributes_subscription_id.37e379903a": [], "test.drip_data_intelligence.source_not_null_full_table_etl_subscription_billing_attributes_subscription_id.0a3672935c": [], "test.drip_data_intelligence.source_relationships_full_table_etl_subscription_billing_attributes_subscription_id__id__source_full_table_etl_subscriptions_.9a47ec55a5": [], "source.drip_data_intelligence.alpha_not_owned_by_dbt.dim_date": ["model.drip_data_intelligence.active_account_list_size_by_day", "model.drip_data_intelligence.marketing_subscription_status_by_day", "model.drip_data_intelligence.product_usage_snapshot_2022_cohort_by_week", "model.drip_data_intelligence.store_revenue_stats", "model.drip_data_intelligence.subscription_mrr_daily"], "source.drip_data_intelligence.alpha_not_owned_by_dbt.historical_currency_conversion": ["model.drip_data_intelligence.purchases_corrected"], "source.drip_data_intelligence.current.subscription_details": ["model.drip_data_intelligence.subscription_activated_within_trial", "model.drip_data_intelligence.subscription_details", "model.drip_data_intelligence.subscription_indicated_an_oms", "model.drip_data_intelligence.subscription_indicated_an_oms_non_paid_marketing", "model.drip_data_intelligence.subscription_indicated_an_oms_paid_marketing", "model.drip_data_intelligence.subscription_oms_indicated", "model.drip_data_intelligence.subscription_oms_indicated_backfilled", "model.drip_data_intelligence.subscriptions_with_activation_dates", "model.drip_data_intelligence.subscriptions_with_trial_weeks", "test.drip_data_intelligence.source_not_null_current_subscription_details_subscription_id.17456a7ee2", "test.drip_data_intelligence.source_relationships_current_subscription_details_subscription_id__id__source_full_table_etl_subscriptions_.f111c3c56a", "test.drip_data_intelligence.source_unique_current_subscription_details_subscription_id.959a3beee6"], "source.drip_data_intelligence.data_intelligence.backfill_calendar": [], "source.drip_data_intelligence.data_intelligence.oms_indicated_account_events": ["model.drip_data_intelligence.oms_indicated", "model.drip_data_intelligence.oms_indicated_on_account"], "source.drip_data_intelligence.data_intelligence.oms_indicated_subscription_events": ["model.drip_data_intelligence.oms_indicated_on_subscription"], "source.drip_data_intelligence.data_intelligence.subscription_state_transitions": ["model.drip_data_intelligence.subscription_activated_within_trial"], "source.drip_data_intelligence.finance.mrr_kpi": ["model.drip_data_intelligence.customer_mrr_changed"], "source.drip_data_intelligence.finance.sms_credit_ledgers": ["model.drip_data_intelligence.sms_credit_ledgers"], "source.drip_data_intelligence.full_table_etl.account_daily_usage_stats": ["model.drip_data_intelligence.mrr", "model.drip_data_intelligence.total_billable_subscribers"], "source.drip_data_intelligence.full_table_etl.account_events": ["model.drip_data_intelligence.account_events"], "source.drip_data_intelligence.full_table_etl.accounts": ["model.drip_data_intelligence.accounts"], "source.drip_data_intelligence.full_table_etl.automation_emails": ["model.drip_data_intelligence.automation_emails"], "source.drip_data_intelligence.full_table_etl.broadcasts": ["model.drip_data_intelligence.broadcasts"], "source.drip_data_intelligence.full_table_etl.custom_fields": ["model.drip_data_intelligence.sms_forms_fields"], "source.drip_data_intelligence.full_table_etl.forms": ["model.drip_data_intelligence.forms"], "source.drip_data_intelligence.full_table_etl.invoice_item_allocations": ["model.drip_data_intelligence.invoice_item_allocations"], "source.drip_data_intelligence.full_table_etl.invoice_items": ["model.drip_data_intelligence.invoice_items"], "source.drip_data_intelligence.full_table_etl.invoices": ["model.drip_data_intelligence.invoices"], "source.drip_data_intelligence.full_table_etl.memberships": ["model.drip_data_intelligence.memberships"], "source.drip_data_intelligence.full_table_etl.purchases": ["model.drip_data_intelligence.purchases"], "source.drip_data_intelligence.full_table_etl.sms_credit_rollups": ["model.drip_data_intelligence.added_sms_credits", "model.drip_data_intelligence.first_sent_sms", "model.drip_data_intelligence.sms_credit_rollups"], "source.drip_data_intelligence.full_table_etl.sms_people": ["model.drip_data_intelligence.300th_sms_person", "model.drip_data_intelligence.first_sms_people", "model.drip_data_intelligence.sms_people"], "source.drip_data_intelligence.full_table_etl.sn_forms": ["model.drip_data_intelligence.onsite_campaign_totals"], "source.drip_data_intelligence.full_table_etl.subscription_billing_attributes": ["test.drip_data_intelligence.source_not_null_full_table_etl_subscription_billing_attributes_subscription_id.0a3672935c", "test.drip_data_intelligence.source_relationships_full_table_etl_subscription_billing_attributes_subscription_id__id__source_full_table_etl_subscriptions_.9a47ec55a5", "test.drip_data_intelligence.source_unique_full_table_etl_subscription_billing_attributes_subscription_id.37e379903a"], "source.drip_data_intelligence.full_table_etl.subscription_recurring_revenues": ["model.drip_data_intelligence.subscription_mrr_daily"], "source.drip_data_intelligence.full_table_etl.subscriptions": ["model.drip_data_intelligence.subscriptions", "test.drip_data_intelligence.source_relationships_current_subscription_details_subscription_id__id__source_full_table_etl_subscriptions_.f111c3c56a", "test.drip_data_intelligence.source_relationships_full_table_etl_subscription_billing_attributes_subscription_id__id__source_full_table_etl_subscriptions_.9a47ec55a5"], "source.drip_data_intelligence.full_table_etl.transactions": ["model.drip_data_intelligence.transactions"], "source.drip_data_intelligence.full_table_etl.twilio_from_codes": ["model.drip_data_intelligence.has_reserved_long_code"], "source.drip_data_intelligence.full_table_etl.twilio_subaccounts": ["model.drip_data_intelligence.has_reserved_long_code"], "source.drip_data_intelligence.full_table_etl.users": ["model.drip_data_intelligence.users"], "source.drip_data_intelligence.full_table_etl.workflows": ["model.drip_data_intelligence.workflows"], "source.drip_data_intelligence.stream_events_etl.delivery_events": ["model.drip_data_intelligence.delivery_events", "model.drip_data_intelligence.marketing_recap"]}}